/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Situation : IEquatable<Situation>
    {
        /// <summary>
        /// Gets or Sets IdG
        /// </summary>
        [Required]
        [DataMember(Name="idG", EmitDefaultValue=false)]
        public string IdG { get; set; }

        /// <summary>
        /// Gets or Sets HeaderInformation
        /// </summary>
        [Required]
        [DataMember(Name="headerInformation", EmitDefaultValue=false)]
        public HeaderInformation HeaderInformation { get; set; }

        /// <summary>
        /// Gets or Sets SituationRecord
        /// </summary>
        [Required]
        [DataMember(Name="situationRecord", EmitDefaultValue=false)]
        public List<SituationRecordG> SituationRecord { get; set; }

        /// <summary>
        /// Gets or Sets SituationExtensionG
        /// </summary>
        [DataMember(Name="situationExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> SituationExtensionG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Situation {\n");
            sb.Append("  IdG: ").Append(IdG).Append("\n");
            sb.Append("  HeaderInformation: ").Append(HeaderInformation).Append("\n");
            sb.Append("  SituationRecord: ").Append(SituationRecord).Append("\n");
            sb.Append("  SituationExtensionG: ").Append(SituationExtensionG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Situation)obj);
        }

        /// <summary>
        /// Returns true if Situation instances are equal
        /// </summary>
        /// <param name="other">Instance of Situation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Situation other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IdG == other.IdG ||
                    IdG != null &&
                    IdG.Equals(other.IdG)
                ) && 
                (
                    HeaderInformation == other.HeaderInformation ||
                    HeaderInformation != null &&
                    HeaderInformation.Equals(other.HeaderInformation)
                ) && 
                (
                    SituationRecord == other.SituationRecord ||
                    SituationRecord != null &&
                    other.SituationRecord != null &&
                    SituationRecord.SequenceEqual(other.SituationRecord)
                ) && 
                (
                    SituationExtensionG == other.SituationExtensionG ||
                    SituationExtensionG != null &&
                    other.SituationExtensionG != null &&
                    SituationExtensionG.SequenceEqual(other.SituationExtensionG)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IdG != null)
                    hashCode = hashCode * 59 + IdG.GetHashCode();
                    if (HeaderInformation != null)
                    hashCode = hashCode * 59 + HeaderInformation.GetHashCode();
                    if (SituationRecord != null)
                    hashCode = hashCode * 59 + SituationRecord.GetHashCode();
                    if (SituationExtensionG != null)
                    hashCode = hashCode * 59 + SituationExtensionG.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Situation left, Situation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Situation left, Situation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
