/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class VehicleCharacteristics : IEquatable<VehicleCharacteristics>
    {
        /// <summary>
        /// Gets or Sets FuelType
        /// </summary>
        [DataMember(Name="fuelType", EmitDefaultValue=false)]
        public List<FuelTypeEnumG> FuelType { get; set; }

        /// <summary>
        /// Gets or Sets LoadType
        /// </summary>
        [DataMember(Name="loadType", EmitDefaultValue=false)]
        public LoadTypeEnumG LoadType { get; set; }

        /// <summary>
        /// Gets or Sets VehicleEquipment
        /// </summary>
        [DataMember(Name="vehicleEquipment", EmitDefaultValue=false)]
        public VehicleEquipmentEnumG VehicleEquipment { get; set; }

        /// <summary>
        /// Gets or Sets VehicleType
        /// </summary>
        [DataMember(Name="vehicleType", EmitDefaultValue=false)]
        public List<VehicleTypeEnumG> VehicleType { get; set; }

        /// <summary>
        /// Gets or Sets VehicleUsage
        /// </summary>
        [DataMember(Name="vehicleUsage", EmitDefaultValue=false)]
        public VehicleUsageEnumG VehicleUsage { get; set; }

        /// <summary>
        /// Gets or Sets YearOfFirstRegistration
        /// </summary>
        [DataMember(Name="yearOfFirstRegistration", EmitDefaultValue=true)]
        public int YearOfFirstRegistration { get; set; }

        /// <summary>
        /// Gets or Sets GrossWeightCharacteristic
        /// </summary>
        [DataMember(Name="grossWeightCharacteristic", EmitDefaultValue=false)]
        public List<GrossWeightCharacteristic> GrossWeightCharacteristic { get; set; }

        /// <summary>
        /// Gets or Sets HeightCharacteristic
        /// </summary>
        [DataMember(Name="heightCharacteristic", EmitDefaultValue=false)]
        public List<HeightCharacteristic> HeightCharacteristic { get; set; }

        /// <summary>
        /// Gets or Sets LengthCharacteristic
        /// </summary>
        [DataMember(Name="lengthCharacteristic", EmitDefaultValue=false)]
        public List<LengthCharacteristic> LengthCharacteristic { get; set; }

        /// <summary>
        /// Gets or Sets WidthCharacteristic
        /// </summary>
        [DataMember(Name="widthCharacteristic", EmitDefaultValue=false)]
        public List<WidthCharacteristic> WidthCharacteristic { get; set; }

        /// <summary>
        /// Gets or Sets HeaviestAxleWeightCharacteristic
        /// </summary>
        [DataMember(Name="heaviestAxleWeightCharacteristic", EmitDefaultValue=false)]
        public List<HeaviestAxleWeightCharacteristic> HeaviestAxleWeightCharacteristic { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfAxlesCharacteristic
        /// </summary>
        [DataMember(Name="numberOfAxlesCharacteristic", EmitDefaultValue=false)]
        public List<NumberOfAxlesCharacteristic> NumberOfAxlesCharacteristic { get; set; }

        /// <summary>
        /// Gets or Sets Emissions
        /// </summary>
        [DataMember(Name="emissions", EmitDefaultValue=false)]
        public Emissions Emissions { get; set; }

        /// <summary>
        /// Gets or Sets VehicleCharacteristicsExtensionG
        /// </summary>
        [DataMember(Name="vehicleCharacteristicsExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> VehicleCharacteristicsExtensionG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VehicleCharacteristics {\n");
            sb.Append("  FuelType: ").Append(FuelType).Append("\n");
            sb.Append("  LoadType: ").Append(LoadType).Append("\n");
            sb.Append("  VehicleEquipment: ").Append(VehicleEquipment).Append("\n");
            sb.Append("  VehicleType: ").Append(VehicleType).Append("\n");
            sb.Append("  VehicleUsage: ").Append(VehicleUsage).Append("\n");
            sb.Append("  YearOfFirstRegistration: ").Append(YearOfFirstRegistration).Append("\n");
            sb.Append("  GrossWeightCharacteristic: ").Append(GrossWeightCharacteristic).Append("\n");
            sb.Append("  HeightCharacteristic: ").Append(HeightCharacteristic).Append("\n");
            sb.Append("  LengthCharacteristic: ").Append(LengthCharacteristic).Append("\n");
            sb.Append("  WidthCharacteristic: ").Append(WidthCharacteristic).Append("\n");
            sb.Append("  HeaviestAxleWeightCharacteristic: ").Append(HeaviestAxleWeightCharacteristic).Append("\n");
            sb.Append("  NumberOfAxlesCharacteristic: ").Append(NumberOfAxlesCharacteristic).Append("\n");
            sb.Append("  Emissions: ").Append(Emissions).Append("\n");
            sb.Append("  VehicleCharacteristicsExtensionG: ").Append(VehicleCharacteristicsExtensionG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VehicleCharacteristics)obj);
        }

        /// <summary>
        /// Returns true if VehicleCharacteristics instances are equal
        /// </summary>
        /// <param name="other">Instance of VehicleCharacteristics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VehicleCharacteristics other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FuelType == other.FuelType ||
                    FuelType != null &&
                    other.FuelType != null &&
                    FuelType.SequenceEqual(other.FuelType)
                ) && 
                (
                    LoadType == other.LoadType ||
                    LoadType != null &&
                    LoadType.Equals(other.LoadType)
                ) && 
                (
                    VehicleEquipment == other.VehicleEquipment ||
                    VehicleEquipment != null &&
                    VehicleEquipment.Equals(other.VehicleEquipment)
                ) && 
                (
                    VehicleType == other.VehicleType ||
                    VehicleType != null &&
                    other.VehicleType != null &&
                    VehicleType.SequenceEqual(other.VehicleType)
                ) && 
                (
                    VehicleUsage == other.VehicleUsage ||
                    VehicleUsage != null &&
                    VehicleUsage.Equals(other.VehicleUsage)
                ) && 
                (
                    YearOfFirstRegistration == other.YearOfFirstRegistration ||
                    
                    YearOfFirstRegistration.Equals(other.YearOfFirstRegistration)
                ) && 
                (
                    GrossWeightCharacteristic == other.GrossWeightCharacteristic ||
                    GrossWeightCharacteristic != null &&
                    other.GrossWeightCharacteristic != null &&
                    GrossWeightCharacteristic.SequenceEqual(other.GrossWeightCharacteristic)
                ) && 
                (
                    HeightCharacteristic == other.HeightCharacteristic ||
                    HeightCharacteristic != null &&
                    other.HeightCharacteristic != null &&
                    HeightCharacteristic.SequenceEqual(other.HeightCharacteristic)
                ) && 
                (
                    LengthCharacteristic == other.LengthCharacteristic ||
                    LengthCharacteristic != null &&
                    other.LengthCharacteristic != null &&
                    LengthCharacteristic.SequenceEqual(other.LengthCharacteristic)
                ) && 
                (
                    WidthCharacteristic == other.WidthCharacteristic ||
                    WidthCharacteristic != null &&
                    other.WidthCharacteristic != null &&
                    WidthCharacteristic.SequenceEqual(other.WidthCharacteristic)
                ) && 
                (
                    HeaviestAxleWeightCharacteristic == other.HeaviestAxleWeightCharacteristic ||
                    HeaviestAxleWeightCharacteristic != null &&
                    other.HeaviestAxleWeightCharacteristic != null &&
                    HeaviestAxleWeightCharacteristic.SequenceEqual(other.HeaviestAxleWeightCharacteristic)
                ) && 
                (
                    NumberOfAxlesCharacteristic == other.NumberOfAxlesCharacteristic ||
                    NumberOfAxlesCharacteristic != null &&
                    other.NumberOfAxlesCharacteristic != null &&
                    NumberOfAxlesCharacteristic.SequenceEqual(other.NumberOfAxlesCharacteristic)
                ) && 
                (
                    Emissions == other.Emissions ||
                    Emissions != null &&
                    Emissions.Equals(other.Emissions)
                ) && 
                (
                    VehicleCharacteristicsExtensionG == other.VehicleCharacteristicsExtensionG ||
                    VehicleCharacteristicsExtensionG != null &&
                    other.VehicleCharacteristicsExtensionG != null &&
                    VehicleCharacteristicsExtensionG.SequenceEqual(other.VehicleCharacteristicsExtensionG)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FuelType != null)
                    hashCode = hashCode * 59 + FuelType.GetHashCode();
                    if (LoadType != null)
                    hashCode = hashCode * 59 + LoadType.GetHashCode();
                    if (VehicleEquipment != null)
                    hashCode = hashCode * 59 + VehicleEquipment.GetHashCode();
                    if (VehicleType != null)
                    hashCode = hashCode * 59 + VehicleType.GetHashCode();
                    if (VehicleUsage != null)
                    hashCode = hashCode * 59 + VehicleUsage.GetHashCode();
                    
                    hashCode = hashCode * 59 + YearOfFirstRegistration.GetHashCode();
                    if (GrossWeightCharacteristic != null)
                    hashCode = hashCode * 59 + GrossWeightCharacteristic.GetHashCode();
                    if (HeightCharacteristic != null)
                    hashCode = hashCode * 59 + HeightCharacteristic.GetHashCode();
                    if (LengthCharacteristic != null)
                    hashCode = hashCode * 59 + LengthCharacteristic.GetHashCode();
                    if (WidthCharacteristic != null)
                    hashCode = hashCode * 59 + WidthCharacteristic.GetHashCode();
                    if (HeaviestAxleWeightCharacteristic != null)
                    hashCode = hashCode * 59 + HeaviestAxleWeightCharacteristic.GetHashCode();
                    if (NumberOfAxlesCharacteristic != null)
                    hashCode = hashCode * 59 + NumberOfAxlesCharacteristic.GetHashCode();
                    if (Emissions != null)
                    hashCode = hashCode * 59 + Emissions.GetHashCode();
                    if (VehicleCharacteristicsExtensionG != null)
                    hashCode = hashCode * 59 + VehicleCharacteristicsExtensionG.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VehicleCharacteristics left, VehicleCharacteristics right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VehicleCharacteristics left, VehicleCharacteristics right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
