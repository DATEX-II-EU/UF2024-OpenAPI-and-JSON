/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ExchangeContext : IEquatable<ExchangeContext>
    {
        /// <summary>
        /// Gets or Sets CodedExchangeProtocol
        /// </summary>
        [Required]
        [DataMember(Name="codedExchangeProtocol", EmitDefaultValue=false)]
        public ProtocolTypeEnumG CodedExchangeProtocol { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeSpecificationVersion
        /// </summary>
        [Required]
        [MaxLength(1024)]
        [DataMember(Name="exchangeSpecificationVersion", EmitDefaultValue=false)]
        public string ExchangeSpecificationVersion { get; set; }

        /// <summary>
        /// Gets or Sets OperatingMode
        /// </summary>
        [DataMember(Name="operatingMode", EmitDefaultValue=false)]
        public OperatingModeEnumG OperatingMode { get; set; }

        /// <summary>
        /// Gets or Sets UpdateMethod
        /// </summary>
        [DataMember(Name="updateMethod", EmitDefaultValue=false)]
        public UpdateMethodEnumG UpdateMethod { get; set; }

        /// <summary>
        /// Gets or Sets NonCodedExchangeProtocol
        /// </summary>
        [MaxLength(1024)]
        [DataMember(Name="nonCodedExchangeProtocol", EmitDefaultValue=false)]
        public string NonCodedExchangeProtocol { get; set; }

        /// <summary>
        /// Gets or Sets SupplierOrCisRequester
        /// </summary>
        [Required]
        [DataMember(Name="supplierOrCisRequester", EmitDefaultValue=false)]
        public Agent SupplierOrCisRequester { get; set; }

        /// <summary>
        /// Gets or Sets ClientOrCisProvider
        /// </summary>
        [DataMember(Name="clientOrCisProvider", EmitDefaultValue=false)]
        public List<Agent> ClientOrCisProvider { get; set; }

        /// <summary>
        /// Gets or Sets Subscription
        /// </summary>
        [DataMember(Name="subscription", EmitDefaultValue=false)]
        public Subscription Subscription { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeContextExtensionG
        /// </summary>
        [DataMember(Name="exchangeContextExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> ExchangeContextExtensionG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExchangeContext {\n");
            sb.Append("  CodedExchangeProtocol: ").Append(CodedExchangeProtocol).Append("\n");
            sb.Append("  ExchangeSpecificationVersion: ").Append(ExchangeSpecificationVersion).Append("\n");
            sb.Append("  OperatingMode: ").Append(OperatingMode).Append("\n");
            sb.Append("  UpdateMethod: ").Append(UpdateMethod).Append("\n");
            sb.Append("  NonCodedExchangeProtocol: ").Append(NonCodedExchangeProtocol).Append("\n");
            sb.Append("  SupplierOrCisRequester: ").Append(SupplierOrCisRequester).Append("\n");
            sb.Append("  ClientOrCisProvider: ").Append(ClientOrCisProvider).Append("\n");
            sb.Append("  Subscription: ").Append(Subscription).Append("\n");
            sb.Append("  ExchangeContextExtensionG: ").Append(ExchangeContextExtensionG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ExchangeContext)obj);
        }

        /// <summary>
        /// Returns true if ExchangeContext instances are equal
        /// </summary>
        /// <param name="other">Instance of ExchangeContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExchangeContext other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CodedExchangeProtocol == other.CodedExchangeProtocol ||
                    CodedExchangeProtocol != null &&
                    CodedExchangeProtocol.Equals(other.CodedExchangeProtocol)
                ) && 
                (
                    ExchangeSpecificationVersion == other.ExchangeSpecificationVersion ||
                    ExchangeSpecificationVersion != null &&
                    ExchangeSpecificationVersion.Equals(other.ExchangeSpecificationVersion)
                ) && 
                (
                    OperatingMode == other.OperatingMode ||
                    OperatingMode != null &&
                    OperatingMode.Equals(other.OperatingMode)
                ) && 
                (
                    UpdateMethod == other.UpdateMethod ||
                    UpdateMethod != null &&
                    UpdateMethod.Equals(other.UpdateMethod)
                ) && 
                (
                    NonCodedExchangeProtocol == other.NonCodedExchangeProtocol ||
                    NonCodedExchangeProtocol != null &&
                    NonCodedExchangeProtocol.Equals(other.NonCodedExchangeProtocol)
                ) && 
                (
                    SupplierOrCisRequester == other.SupplierOrCisRequester ||
                    SupplierOrCisRequester != null &&
                    SupplierOrCisRequester.Equals(other.SupplierOrCisRequester)
                ) && 
                (
                    ClientOrCisProvider == other.ClientOrCisProvider ||
                    ClientOrCisProvider != null &&
                    other.ClientOrCisProvider != null &&
                    ClientOrCisProvider.SequenceEqual(other.ClientOrCisProvider)
                ) && 
                (
                    Subscription == other.Subscription ||
                    Subscription != null &&
                    Subscription.Equals(other.Subscription)
                ) && 
                (
                    ExchangeContextExtensionG == other.ExchangeContextExtensionG ||
                    ExchangeContextExtensionG != null &&
                    other.ExchangeContextExtensionG != null &&
                    ExchangeContextExtensionG.SequenceEqual(other.ExchangeContextExtensionG)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CodedExchangeProtocol != null)
                    hashCode = hashCode * 59 + CodedExchangeProtocol.GetHashCode();
                    if (ExchangeSpecificationVersion != null)
                    hashCode = hashCode * 59 + ExchangeSpecificationVersion.GetHashCode();
                    if (OperatingMode != null)
                    hashCode = hashCode * 59 + OperatingMode.GetHashCode();
                    if (UpdateMethod != null)
                    hashCode = hashCode * 59 + UpdateMethod.GetHashCode();
                    if (NonCodedExchangeProtocol != null)
                    hashCode = hashCode * 59 + NonCodedExchangeProtocol.GetHashCode();
                    if (SupplierOrCisRequester != null)
                    hashCode = hashCode * 59 + SupplierOrCisRequester.GetHashCode();
                    if (ClientOrCisProvider != null)
                    hashCode = hashCode * 59 + ClientOrCisProvider.GetHashCode();
                    if (Subscription != null)
                    hashCode = hashCode * 59 + Subscription.GetHashCode();
                    if (ExchangeContextExtensionG != null)
                    hashCode = hashCode * 59 + ExchangeContextExtensionG.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ExchangeContext left, ExchangeContext right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ExchangeContext left, ExchangeContext right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
