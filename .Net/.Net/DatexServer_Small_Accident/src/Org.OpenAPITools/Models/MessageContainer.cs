/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class MessageContainer : IEquatable<MessageContainer>
    {
        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name="payload", EmitDefaultValue=false)]
        public List<PayloadPublicationG> Payload { get; set; }

        /// <summary>
        /// Gets or Sets CisInformation
        /// </summary>
        [DataMember(Name="cisInformation", EmitDefaultValue=false)]
        public CISInformation CisInformation { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeInformation
        /// </summary>
        [Required]
        [DataMember(Name="exchangeInformation", EmitDefaultValue=false)]
        public ExchangeInformation ExchangeInformation { get; set; }

        /// <summary>
        /// Gets or Sets InformationManagement
        /// </summary>
        [DataMember(Name="informationManagement", EmitDefaultValue=false)]
        public InformationManagement InformationManagement { get; set; }

        /// <summary>
        /// Gets or Sets MessageContainerExtensionG
        /// </summary>
        [DataMember(Name="messageContainerExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> MessageContainerExtensionG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageContainer {\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  CisInformation: ").Append(CisInformation).Append("\n");
            sb.Append("  ExchangeInformation: ").Append(ExchangeInformation).Append("\n");
            sb.Append("  InformationManagement: ").Append(InformationManagement).Append("\n");
            sb.Append("  MessageContainerExtensionG: ").Append(MessageContainerExtensionG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MessageContainer)obj);
        }

        /// <summary>
        /// Returns true if MessageContainer instances are equal
        /// </summary>
        /// <param name="other">Instance of MessageContainer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageContainer other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Payload == other.Payload ||
                    Payload != null &&
                    other.Payload != null &&
                    Payload.SequenceEqual(other.Payload)
                ) && 
                (
                    CisInformation == other.CisInformation ||
                    CisInformation != null &&
                    CisInformation.Equals(other.CisInformation)
                ) && 
                (
                    ExchangeInformation == other.ExchangeInformation ||
                    ExchangeInformation != null &&
                    ExchangeInformation.Equals(other.ExchangeInformation)
                ) && 
                (
                    InformationManagement == other.InformationManagement ||
                    InformationManagement != null &&
                    InformationManagement.Equals(other.InformationManagement)
                ) && 
                (
                    MessageContainerExtensionG == other.MessageContainerExtensionG ||
                    MessageContainerExtensionG != null &&
                    other.MessageContainerExtensionG != null &&
                    MessageContainerExtensionG.SequenceEqual(other.MessageContainerExtensionG)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Payload != null)
                    hashCode = hashCode * 59 + Payload.GetHashCode();
                    if (CisInformation != null)
                    hashCode = hashCode * 59 + CisInformation.GetHashCode();
                    if (ExchangeInformation != null)
                    hashCode = hashCode * 59 + ExchangeInformation.GetHashCode();
                    if (InformationManagement != null)
                    hashCode = hashCode * 59 + InformationManagement.GetHashCode();
                    if (MessageContainerExtensionG != null)
                    hashCode = hashCode * 59 + MessageContainerExtensionG.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MessageContainer left, MessageContainer right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MessageContainer left, MessageContainer right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
