/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class HazardousMaterials : IEquatable<HazardousMaterials>
    {
        /// <summary>
        /// Gets or Sets ChemicalName
        /// </summary>
        [Required]
        [DataMember(Name="chemicalName", EmitDefaultValue=false)]
        public MultilingualString ChemicalName { get; set; }

        /// <summary>
        /// Gets or Sets DangerousGoodsFlashPoint
        /// </summary>
        [DataMember(Name="dangerousGoodsFlashPoint", EmitDefaultValue=true)]
        public decimal DangerousGoodsFlashPoint { get; set; }

        /// <summary>
        /// Gets or Sets DangerousGoodsRegulations
        /// </summary>
        [DataMember(Name="dangerousGoodsRegulations", EmitDefaultValue=false)]
        public DangerousGoodsRegulationsEnumG DangerousGoodsRegulations { get; set; }

        /// <summary>
        /// Gets or Sets HazardCodeIdentification
        /// </summary>
        [MaxLength(1024)]
        [DataMember(Name="hazardCodeIdentification", EmitDefaultValue=false)]
        public string HazardCodeIdentification { get; set; }

        /// <summary>
        /// Gets or Sets HazardCodeVersionNumber
        /// </summary>
        [DataMember(Name="hazardCodeVersionNumber", EmitDefaultValue=true)]
        public int HazardCodeVersionNumber { get; set; }

        /// <summary>
        /// Gets or Sets HazardSubstanceItemPageNumber
        /// </summary>
        [MaxLength(1024)]
        [DataMember(Name="hazardSubstanceItemPageNumber", EmitDefaultValue=false)]
        public string HazardSubstanceItemPageNumber { get; set; }

        /// <summary>
        /// Gets or Sets TremCardNumber
        /// </summary>
        [MaxLength(1024)]
        [DataMember(Name="tremCardNumber", EmitDefaultValue=false)]
        public string TremCardNumber { get; set; }

        /// <summary>
        /// Gets or Sets UndgNumber
        /// </summary>
        [MaxLength(1024)]
        [DataMember(Name="undgNumber", EmitDefaultValue=false)]
        public string UndgNumber { get; set; }

        /// <summary>
        /// Gets or Sets VolumeOfDangerousGoods
        /// </summary>
        [DataMember(Name="volumeOfDangerousGoods", EmitDefaultValue=true)]
        public decimal VolumeOfDangerousGoods { get; set; }

        /// <summary>
        /// Gets or Sets WeightOfDangerousGoods
        /// </summary>
        [DataMember(Name="weightOfDangerousGoods", EmitDefaultValue=true)]
        public decimal WeightOfDangerousGoods { get; set; }

        /// <summary>
        /// Gets or Sets HazardousMaterialsExtensionG
        /// </summary>
        [DataMember(Name="hazardousMaterialsExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> HazardousMaterialsExtensionG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HazardousMaterials {\n");
            sb.Append("  ChemicalName: ").Append(ChemicalName).Append("\n");
            sb.Append("  DangerousGoodsFlashPoint: ").Append(DangerousGoodsFlashPoint).Append("\n");
            sb.Append("  DangerousGoodsRegulations: ").Append(DangerousGoodsRegulations).Append("\n");
            sb.Append("  HazardCodeIdentification: ").Append(HazardCodeIdentification).Append("\n");
            sb.Append("  HazardCodeVersionNumber: ").Append(HazardCodeVersionNumber).Append("\n");
            sb.Append("  HazardSubstanceItemPageNumber: ").Append(HazardSubstanceItemPageNumber).Append("\n");
            sb.Append("  TremCardNumber: ").Append(TremCardNumber).Append("\n");
            sb.Append("  UndgNumber: ").Append(UndgNumber).Append("\n");
            sb.Append("  VolumeOfDangerousGoods: ").Append(VolumeOfDangerousGoods).Append("\n");
            sb.Append("  WeightOfDangerousGoods: ").Append(WeightOfDangerousGoods).Append("\n");
            sb.Append("  HazardousMaterialsExtensionG: ").Append(HazardousMaterialsExtensionG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HazardousMaterials)obj);
        }

        /// <summary>
        /// Returns true if HazardousMaterials instances are equal
        /// </summary>
        /// <param name="other">Instance of HazardousMaterials to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HazardousMaterials other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ChemicalName == other.ChemicalName ||
                    ChemicalName != null &&
                    ChemicalName.Equals(other.ChemicalName)
                ) && 
                (
                    DangerousGoodsFlashPoint == other.DangerousGoodsFlashPoint ||
                    
                    DangerousGoodsFlashPoint.Equals(other.DangerousGoodsFlashPoint)
                ) && 
                (
                    DangerousGoodsRegulations == other.DangerousGoodsRegulations ||
                    DangerousGoodsRegulations != null &&
                    DangerousGoodsRegulations.Equals(other.DangerousGoodsRegulations)
                ) && 
                (
                    HazardCodeIdentification == other.HazardCodeIdentification ||
                    HazardCodeIdentification != null &&
                    HazardCodeIdentification.Equals(other.HazardCodeIdentification)
                ) && 
                (
                    HazardCodeVersionNumber == other.HazardCodeVersionNumber ||
                    
                    HazardCodeVersionNumber.Equals(other.HazardCodeVersionNumber)
                ) && 
                (
                    HazardSubstanceItemPageNumber == other.HazardSubstanceItemPageNumber ||
                    HazardSubstanceItemPageNumber != null &&
                    HazardSubstanceItemPageNumber.Equals(other.HazardSubstanceItemPageNumber)
                ) && 
                (
                    TremCardNumber == other.TremCardNumber ||
                    TremCardNumber != null &&
                    TremCardNumber.Equals(other.TremCardNumber)
                ) && 
                (
                    UndgNumber == other.UndgNumber ||
                    UndgNumber != null &&
                    UndgNumber.Equals(other.UndgNumber)
                ) && 
                (
                    VolumeOfDangerousGoods == other.VolumeOfDangerousGoods ||
                    
                    VolumeOfDangerousGoods.Equals(other.VolumeOfDangerousGoods)
                ) && 
                (
                    WeightOfDangerousGoods == other.WeightOfDangerousGoods ||
                    
                    WeightOfDangerousGoods.Equals(other.WeightOfDangerousGoods)
                ) && 
                (
                    HazardousMaterialsExtensionG == other.HazardousMaterialsExtensionG ||
                    HazardousMaterialsExtensionG != null &&
                    other.HazardousMaterialsExtensionG != null &&
                    HazardousMaterialsExtensionG.SequenceEqual(other.HazardousMaterialsExtensionG)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ChemicalName != null)
                    hashCode = hashCode * 59 + ChemicalName.GetHashCode();
                    
                    hashCode = hashCode * 59 + DangerousGoodsFlashPoint.GetHashCode();
                    if (DangerousGoodsRegulations != null)
                    hashCode = hashCode * 59 + DangerousGoodsRegulations.GetHashCode();
                    if (HazardCodeIdentification != null)
                    hashCode = hashCode * 59 + HazardCodeIdentification.GetHashCode();
                    
                    hashCode = hashCode * 59 + HazardCodeVersionNumber.GetHashCode();
                    if (HazardSubstanceItemPageNumber != null)
                    hashCode = hashCode * 59 + HazardSubstanceItemPageNumber.GetHashCode();
                    if (TremCardNumber != null)
                    hashCode = hashCode * 59 + TremCardNumber.GetHashCode();
                    if (UndgNumber != null)
                    hashCode = hashCode * 59 + UndgNumber.GetHashCode();
                    
                    hashCode = hashCode * 59 + VolumeOfDangerousGoods.GetHashCode();
                    
                    hashCode = hashCode * 59 + WeightOfDangerousGoods.GetHashCode();
                    if (HazardousMaterialsExtensionG != null)
                    hashCode = hashCode * 59 + HazardousMaterialsExtensionG.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HazardousMaterials left, HazardousMaterials right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HazardousMaterials left, HazardousMaterials right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
