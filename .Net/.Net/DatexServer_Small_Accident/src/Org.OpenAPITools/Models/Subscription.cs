/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Subscription : IEquatable<Subscription>
    {
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [MaxLength(1024)]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceID
        /// </summary>
        [DataMember(Name="referenceID", EmitDefaultValue=false)]
        public Reference ReferenceID { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionStart
        /// </summary>
        [DataMember(Name="subscriptionStart", EmitDefaultValue=true)]
        public DateTime SubscriptionStart { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionEnd
        /// </summary>
        [DataMember(Name="subscriptionEnd", EmitDefaultValue=true)]
        public DateTime SubscriptionEnd { get; set; }

        /// <summary>
        /// Gets or Sets DeliveyFrequency
        /// </summary>
        [DataMember(Name="deliveyFrequency", EmitDefaultValue=true)]
        public int DeliveyFrequency { get; set; }

        /// <summary>
        /// Gets or Sets Validity
        /// </summary>
        [DataMember(Name="validity", EmitDefaultValue=false)]
        public Validity Validity { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionExtensionG
        /// </summary>
        [DataMember(Name="subscriptionExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> SubscriptionExtensionG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Subscription {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReferenceID: ").Append(ReferenceID).Append("\n");
            sb.Append("  SubscriptionStart: ").Append(SubscriptionStart).Append("\n");
            sb.Append("  SubscriptionEnd: ").Append(SubscriptionEnd).Append("\n");
            sb.Append("  DeliveyFrequency: ").Append(DeliveyFrequency).Append("\n");
            sb.Append("  Validity: ").Append(Validity).Append("\n");
            sb.Append("  SubscriptionExtensionG: ").Append(SubscriptionExtensionG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Subscription)obj);
        }

        /// <summary>
        /// Returns true if Subscription instances are equal
        /// </summary>
        /// <param name="other">Instance of Subscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Subscription other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ReferenceID == other.ReferenceID ||
                    ReferenceID != null &&
                    ReferenceID.Equals(other.ReferenceID)
                ) && 
                (
                    SubscriptionStart == other.SubscriptionStart ||
                    
                    SubscriptionStart.Equals(other.SubscriptionStart)
                ) && 
                (
                    SubscriptionEnd == other.SubscriptionEnd ||
                    
                    SubscriptionEnd.Equals(other.SubscriptionEnd)
                ) && 
                (
                    DeliveyFrequency == other.DeliveyFrequency ||
                    
                    DeliveyFrequency.Equals(other.DeliveyFrequency)
                ) && 
                (
                    Validity == other.Validity ||
                    Validity != null &&
                    Validity.Equals(other.Validity)
                ) && 
                (
                    SubscriptionExtensionG == other.SubscriptionExtensionG ||
                    SubscriptionExtensionG != null &&
                    other.SubscriptionExtensionG != null &&
                    SubscriptionExtensionG.SequenceEqual(other.SubscriptionExtensionG)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ReferenceID != null)
                    hashCode = hashCode * 59 + ReferenceID.GetHashCode();
                    
                    hashCode = hashCode * 59 + SubscriptionStart.GetHashCode();
                    
                    hashCode = hashCode * 59 + SubscriptionEnd.GetHashCode();
                    
                    hashCode = hashCode * 59 + DeliveyFrequency.GetHashCode();
                    if (Validity != null)
                    hashCode = hashCode * 59 + Validity.GetHashCode();
                    if (SubscriptionExtensionG != null)
                    hashCode = hashCode * 59 + SubscriptionExtensionG.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Subscription left, Subscription right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Subscription left, Subscription right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
