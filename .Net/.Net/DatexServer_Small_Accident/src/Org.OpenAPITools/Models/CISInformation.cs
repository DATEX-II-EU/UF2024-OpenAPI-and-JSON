/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CISInformation : IEquatable<CISInformation>
    {
        /// <summary>
        /// Gets or Sets ServiceFeedback
        /// </summary>
        [DataMember(Name="serviceFeedback", EmitDefaultValue=false)]
        public List<ServiceFeedback> ServiceFeedback { get; set; }

        /// <summary>
        /// Gets or Sets ServiceRequest
        /// </summary>
        [DataMember(Name="serviceRequest", EmitDefaultValue=false)]
        public List<ServiceRequest> ServiceRequest { get; set; }

        /// <summary>
        /// Gets or Sets CisInformationExtensionG
        /// </summary>
        [DataMember(Name="cisInformationExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> CisInformationExtensionG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CISInformation {\n");
            sb.Append("  ServiceFeedback: ").Append(ServiceFeedback).Append("\n");
            sb.Append("  ServiceRequest: ").Append(ServiceRequest).Append("\n");
            sb.Append("  CisInformationExtensionG: ").Append(CisInformationExtensionG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CISInformation)obj);
        }

        /// <summary>
        /// Returns true if CISInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of CISInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CISInformation other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ServiceFeedback == other.ServiceFeedback ||
                    ServiceFeedback != null &&
                    other.ServiceFeedback != null &&
                    ServiceFeedback.SequenceEqual(other.ServiceFeedback)
                ) && 
                (
                    ServiceRequest == other.ServiceRequest ||
                    ServiceRequest != null &&
                    other.ServiceRequest != null &&
                    ServiceRequest.SequenceEqual(other.ServiceRequest)
                ) && 
                (
                    CisInformationExtensionG == other.CisInformationExtensionG ||
                    CisInformationExtensionG != null &&
                    other.CisInformationExtensionG != null &&
                    CisInformationExtensionG.SequenceEqual(other.CisInformationExtensionG)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ServiceFeedback != null)
                    hashCode = hashCode * 59 + ServiceFeedback.GetHashCode();
                    if (ServiceRequest != null)
                    hashCode = hashCode * 59 + ServiceRequest.GetHashCode();
                    if (CisInformationExtensionG != null)
                    hashCode = hashCode * 59 + CisInformationExtensionG.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CISInformation left, CISInformation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CISInformation left, CISInformation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
