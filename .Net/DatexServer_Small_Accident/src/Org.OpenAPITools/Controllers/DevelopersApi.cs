/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DevelopersApiController : ControllerBase
    { 
        /// <summary>
        /// DATEX II snapshot pull
        /// </summary>
        /// <remarks>Keepalive </remarks>
        /// <response code="200">Result from keepalive</response>
        [HttpGet]
        [Route("/datexpull/1.0.2/keepalive")]
        [ValidateModelState]
        [SwaggerOperation("KeepAlive")]
        [SwaggerResponse(statusCode: 200, type: typeof(ExchangheInformation), description: "Result from keepalive")]
        public virtual IActionResult KeepAlive()
        {

            ExchangheInformation ex = new ExchangheInformation();
            ex.DynamicInformation = new DynamicInformation();
            ex.DynamicInformation.ExchangeStatus = new ExchangeStatusEnumG();
            ex.DynamicInformation.ExchangeStatus.Value = ExchangeStatusEnum.OnlineEnum;
            ex.DynamicInformation.MessageGenerationTimestamp = DateTime.Now;
            ex.DynamicInformation.ReturnInformation = new ReturnInformation();
            ex.MessageType = new MessageTypeEnumG();
            ex.MessageType.Value = MessageTypeEnum.KeepAliveEnum;
            ex.ExchangeContext = new ExchangeContext();
            ex.ExchangeContext.ClientOrCisProvider = new List<Agent>();
            Agent agent = new Agent();
            agent.InternationalIdentifier = new InternationalIdentifier();
            agent.InternationalIdentifier.Country = "RO";
            agent.InternationalIdentifier.NationalIdentifier = "DEMO";
            ex.ExchangeContext.ClientOrCisProvider.Add(agent);
            return new ObjectResult(ex);
            //return new ObjectResult(ex.ToJson());
        }

        /// <summary>
        /// DATEX II snapshot pull
        /// </summary>
        /// <remarks>Snapshot pull DATEX II API</remarks>
        /// <response code="200">Result from snapshot pull</response>
        [HttpGet]
        [Route("/datexpull/1.0.2/pull")]
        [ValidateModelState]
        [SwaggerOperation("SnapshotPull")]
        [SwaggerResponse(statusCode: 200, type: typeof(MessageContainer), description: "Result from snapshot pull")]
        public virtual IActionResult SnapshotPull()
        {
            MessageContainer messageContainer = new MessageContainer();
            messageContainer.Payload = new List<PayloadPublicationG>();
            PayloadPublicationG payloadPublicationG = new PayloadPublicationG();
            payloadPublicationG.SitSituationPublication = new SituationPublication();

            messageContainer.Payload.Add(payloadPublicationG);
            
            return new ObjectResult(messageContainer);
        }

        /// <summary>
        /// DATEX II snapshot pull situation
        /// </summary>
        /// <remarks>Snapshot pull situation DATEX II API</remarks>
        /// <param name="id">Id of Situation</param>
        /// <response code="200">Result from snapshot pull</response>
        [HttpGet]
        [Route("/datexpull/1.0.2/pullsituation")]
        [ValidateModelState]
        [SwaggerOperation("SnapshotPullSituation")]
        [SwaggerResponse(statusCode: 200, type: typeof(Situation), description: "Result from snapshot pull")]
        public virtual IActionResult SnapshotPullSituation([FromQuery (Name = "id")][Required()]string id)
        {
 
             MessageContainer messageContainer = new MessageContainer();
            return new ObjectResult(messageContainer);
        }
    }
}
