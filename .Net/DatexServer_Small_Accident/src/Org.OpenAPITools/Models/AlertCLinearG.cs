/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AlertCLinearG : IEquatable<AlertCLinearG>
    {
        /// <summary>
        /// Gets or Sets LocAlertCLinearByCode
        /// </summary>
        [DataMember(Name="locAlertCLinearByCode", EmitDefaultValue=false)]
        public AlertCLinearByCode LocAlertCLinearByCode { get; set; }

        /// <summary>
        /// Gets or Sets LocAlertCMethod4Linear
        /// </summary>
        [DataMember(Name="locAlertCMethod4Linear", EmitDefaultValue=false)]
        public AlertCMethod4Linear LocAlertCMethod4Linear { get; set; }

        /// <summary>
        /// Gets or Sets LocAlertCMethod2Linear
        /// </summary>
        [DataMember(Name="locAlertCMethod2Linear", EmitDefaultValue=false)]
        public AlertCMethod2Linear LocAlertCMethod2Linear { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlertCLinearG {\n");
            sb.Append("  LocAlertCLinearByCode: ").Append(LocAlertCLinearByCode).Append("\n");
            sb.Append("  LocAlertCMethod4Linear: ").Append(LocAlertCMethod4Linear).Append("\n");
            sb.Append("  LocAlertCMethod2Linear: ").Append(LocAlertCMethod2Linear).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AlertCLinearG)obj);
        }

        /// <summary>
        /// Returns true if AlertCLinearG instances are equal
        /// </summary>
        /// <param name="other">Instance of AlertCLinearG to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlertCLinearG other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LocAlertCLinearByCode == other.LocAlertCLinearByCode ||
                    LocAlertCLinearByCode != null &&
                    LocAlertCLinearByCode.Equals(other.LocAlertCLinearByCode)
                ) && 
                (
                    LocAlertCMethod4Linear == other.LocAlertCMethod4Linear ||
                    LocAlertCMethod4Linear != null &&
                    LocAlertCMethod4Linear.Equals(other.LocAlertCMethod4Linear)
                ) && 
                (
                    LocAlertCMethod2Linear == other.LocAlertCMethod2Linear ||
                    LocAlertCMethod2Linear != null &&
                    LocAlertCMethod2Linear.Equals(other.LocAlertCMethod2Linear)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LocAlertCLinearByCode != null)
                    hashCode = hashCode * 59 + LocAlertCLinearByCode.GetHashCode();
                    if (LocAlertCMethod4Linear != null)
                    hashCode = hashCode * 59 + LocAlertCMethod4Linear.GetHashCode();
                    if (LocAlertCMethod2Linear != null)
                    hashCode = hashCode * 59 + LocAlertCMethod2Linear.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AlertCLinearG left, AlertCLinearG right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AlertCLinearG left, AlertCLinearG right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
