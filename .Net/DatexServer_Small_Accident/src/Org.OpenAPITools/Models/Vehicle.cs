/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Vehicle : IEquatable<Vehicle>
    {
        /// <summary>
        /// Gets or Sets AnonymizedVehicleReference
        /// </summary>
        [MaxLength(1024)]
        [DataMember(Name="anonymizedVehicleReference", EmitDefaultValue=false)]
        public string AnonymizedVehicleReference { get; set; }

        /// <summary>
        /// Gets or Sets VehicleColour
        /// </summary>
        [DataMember(Name="vehicleColour", EmitDefaultValue=false)]
        public MultilingualString VehicleColour { get; set; }

        /// <summary>
        /// Gets or Sets VehicleCountryOfOrigin
        /// </summary>
        [MaxLength(1024)]
        [DataMember(Name="vehicleCountryOfOrigin", EmitDefaultValue=false)]
        public string VehicleCountryOfOrigin { get; set; }

        /// <summary>
        /// Gets or Sets VehicleIdentifier
        /// </summary>
        [MaxLength(1024)]
        [DataMember(Name="vehicleIdentifier", EmitDefaultValue=false)]
        public string VehicleIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets VehicleManufacturer
        /// </summary>
        [MaxLength(1024)]
        [DataMember(Name="vehicleManufacturer", EmitDefaultValue=false)]
        public string VehicleManufacturer { get; set; }

        /// <summary>
        /// Gets or Sets VehicleModel
        /// </summary>
        [MaxLength(1024)]
        [DataMember(Name="vehicleModel", EmitDefaultValue=false)]
        public string VehicleModel { get; set; }

        /// <summary>
        /// Gets or Sets VehicleRegistrationPlateIdentifier
        /// </summary>
        [MaxLength(1024)]
        [DataMember(Name="vehicleRegistrationPlateIdentifier", EmitDefaultValue=false)]
        public string VehicleRegistrationPlateIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets VehicleStatus
        /// </summary>
        [DataMember(Name="vehicleStatus", EmitDefaultValue=false)]
        public VehicleStatusEnumG VehicleStatus { get; set; }

        /// <summary>
        /// Gets or Sets VehicleCharacteristics
        /// </summary>
        [DataMember(Name="vehicleCharacteristics", EmitDefaultValue=false)]
        public VehicleCharacteristics VehicleCharacteristics { get; set; }

        /// <summary>
        /// Gets or Sets AxleSpacingOnVehicle
        /// </summary>
        [DataMember(Name="axleSpacingOnVehicle", EmitDefaultValue=false)]
        public List<AxleSpacing> AxleSpacingOnVehicle { get; set; }

        /// <summary>
        /// Gets or Sets SpecificAxleWeight
        /// </summary>
        [DataMember(Name="specificAxleWeight", EmitDefaultValue=false)]
        public List<AxleWeight> SpecificAxleWeight { get; set; }

        /// <summary>
        /// Gets or Sets HazardousGoodsAssociatedWithVehicle
        /// </summary>
        [DataMember(Name="hazardousGoodsAssociatedWithVehicle", EmitDefaultValue=false)]
        public HazardousMaterials HazardousGoodsAssociatedWithVehicle { get; set; }

        /// <summary>
        /// Gets or Sets VehicleExtensionG
        /// </summary>
        [DataMember(Name="vehicleExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> VehicleExtensionG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Vehicle {\n");
            sb.Append("  AnonymizedVehicleReference: ").Append(AnonymizedVehicleReference).Append("\n");
            sb.Append("  VehicleColour: ").Append(VehicleColour).Append("\n");
            sb.Append("  VehicleCountryOfOrigin: ").Append(VehicleCountryOfOrigin).Append("\n");
            sb.Append("  VehicleIdentifier: ").Append(VehicleIdentifier).Append("\n");
            sb.Append("  VehicleManufacturer: ").Append(VehicleManufacturer).Append("\n");
            sb.Append("  VehicleModel: ").Append(VehicleModel).Append("\n");
            sb.Append("  VehicleRegistrationPlateIdentifier: ").Append(VehicleRegistrationPlateIdentifier).Append("\n");
            sb.Append("  VehicleStatus: ").Append(VehicleStatus).Append("\n");
            sb.Append("  VehicleCharacteristics: ").Append(VehicleCharacteristics).Append("\n");
            sb.Append("  AxleSpacingOnVehicle: ").Append(AxleSpacingOnVehicle).Append("\n");
            sb.Append("  SpecificAxleWeight: ").Append(SpecificAxleWeight).Append("\n");
            sb.Append("  HazardousGoodsAssociatedWithVehicle: ").Append(HazardousGoodsAssociatedWithVehicle).Append("\n");
            sb.Append("  VehicleExtensionG: ").Append(VehicleExtensionG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Vehicle)obj);
        }

        /// <summary>
        /// Returns true if Vehicle instances are equal
        /// </summary>
        /// <param name="other">Instance of Vehicle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vehicle other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AnonymizedVehicleReference == other.AnonymizedVehicleReference ||
                    AnonymizedVehicleReference != null &&
                    AnonymizedVehicleReference.Equals(other.AnonymizedVehicleReference)
                ) && 
                (
                    VehicleColour == other.VehicleColour ||
                    VehicleColour != null &&
                    VehicleColour.Equals(other.VehicleColour)
                ) && 
                (
                    VehicleCountryOfOrigin == other.VehicleCountryOfOrigin ||
                    VehicleCountryOfOrigin != null &&
                    VehicleCountryOfOrigin.Equals(other.VehicleCountryOfOrigin)
                ) && 
                (
                    VehicleIdentifier == other.VehicleIdentifier ||
                    VehicleIdentifier != null &&
                    VehicleIdentifier.Equals(other.VehicleIdentifier)
                ) && 
                (
                    VehicleManufacturer == other.VehicleManufacturer ||
                    VehicleManufacturer != null &&
                    VehicleManufacturer.Equals(other.VehicleManufacturer)
                ) && 
                (
                    VehicleModel == other.VehicleModel ||
                    VehicleModel != null &&
                    VehicleModel.Equals(other.VehicleModel)
                ) && 
                (
                    VehicleRegistrationPlateIdentifier == other.VehicleRegistrationPlateIdentifier ||
                    VehicleRegistrationPlateIdentifier != null &&
                    VehicleRegistrationPlateIdentifier.Equals(other.VehicleRegistrationPlateIdentifier)
                ) && 
                (
                    VehicleStatus == other.VehicleStatus ||
                    VehicleStatus != null &&
                    VehicleStatus.Equals(other.VehicleStatus)
                ) && 
                (
                    VehicleCharacteristics == other.VehicleCharacteristics ||
                    VehicleCharacteristics != null &&
                    VehicleCharacteristics.Equals(other.VehicleCharacteristics)
                ) && 
                (
                    AxleSpacingOnVehicle == other.AxleSpacingOnVehicle ||
                    AxleSpacingOnVehicle != null &&
                    other.AxleSpacingOnVehicle != null &&
                    AxleSpacingOnVehicle.SequenceEqual(other.AxleSpacingOnVehicle)
                ) && 
                (
                    SpecificAxleWeight == other.SpecificAxleWeight ||
                    SpecificAxleWeight != null &&
                    other.SpecificAxleWeight != null &&
                    SpecificAxleWeight.SequenceEqual(other.SpecificAxleWeight)
                ) && 
                (
                    HazardousGoodsAssociatedWithVehicle == other.HazardousGoodsAssociatedWithVehicle ||
                    HazardousGoodsAssociatedWithVehicle != null &&
                    HazardousGoodsAssociatedWithVehicle.Equals(other.HazardousGoodsAssociatedWithVehicle)
                ) && 
                (
                    VehicleExtensionG == other.VehicleExtensionG ||
                    VehicleExtensionG != null &&
                    other.VehicleExtensionG != null &&
                    VehicleExtensionG.SequenceEqual(other.VehicleExtensionG)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AnonymizedVehicleReference != null)
                    hashCode = hashCode * 59 + AnonymizedVehicleReference.GetHashCode();
                    if (VehicleColour != null)
                    hashCode = hashCode * 59 + VehicleColour.GetHashCode();
                    if (VehicleCountryOfOrigin != null)
                    hashCode = hashCode * 59 + VehicleCountryOfOrigin.GetHashCode();
                    if (VehicleIdentifier != null)
                    hashCode = hashCode * 59 + VehicleIdentifier.GetHashCode();
                    if (VehicleManufacturer != null)
                    hashCode = hashCode * 59 + VehicleManufacturer.GetHashCode();
                    if (VehicleModel != null)
                    hashCode = hashCode * 59 + VehicleModel.GetHashCode();
                    if (VehicleRegistrationPlateIdentifier != null)
                    hashCode = hashCode * 59 + VehicleRegistrationPlateIdentifier.GetHashCode();
                    if (VehicleStatus != null)
                    hashCode = hashCode * 59 + VehicleStatus.GetHashCode();
                    if (VehicleCharacteristics != null)
                    hashCode = hashCode * 59 + VehicleCharacteristics.GetHashCode();
                    if (AxleSpacingOnVehicle != null)
                    hashCode = hashCode * 59 + AxleSpacingOnVehicle.GetHashCode();
                    if (SpecificAxleWeight != null)
                    hashCode = hashCode * 59 + SpecificAxleWeight.GetHashCode();
                    if (HazardousGoodsAssociatedWithVehicle != null)
                    hashCode = hashCode * 59 + HazardousGoodsAssociatedWithVehicle.GetHashCode();
                    if (VehicleExtensionG != null)
                    hashCode = hashCode * 59 + VehicleExtensionG.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Vehicle left, Vehicle right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Vehicle left, Vehicle right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
