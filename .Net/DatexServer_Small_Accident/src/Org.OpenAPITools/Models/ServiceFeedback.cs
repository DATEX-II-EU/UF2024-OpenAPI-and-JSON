/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ServiceFeedback : IEquatable<ServiceFeedback>
    {
        /// <summary>
        /// Gets or Sets ServiceRequestFeedbackReason
        /// </summary>
        [DataMember(Name="serviceRequestFeedbackReason", EmitDefaultValue=false)]
        public MultilingualString ServiceRequestFeedbackReason { get; set; }

        /// <summary>
        /// Gets or Sets ServiceRequestStatus
        /// </summary>
        [Required]
        [DataMember(Name="serviceRequestStatus", EmitDefaultValue=false)]
        public ServiceActionStatusEnumG ServiceRequestStatus { get; set; }

        /// <summary>
        /// Gets or Sets ServiceRequestReference
        /// </summary>
        [Required]
        [DataMember(Name="serviceRequestReference", EmitDefaultValue=false)]
        public VersionedReference ServiceRequestReference { get; set; }

        /// <summary>
        /// Gets or Sets ServiceProvider
        /// </summary>
        [Required]
        [DataMember(Name="serviceProvider", EmitDefaultValue=false)]
        public Agent ServiceProvider { get; set; }

        /// <summary>
        /// Gets or Sets ServiceFeedbackExtensionG
        /// </summary>
        [DataMember(Name="serviceFeedbackExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> ServiceFeedbackExtensionG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceFeedback {\n");
            sb.Append("  ServiceRequestFeedbackReason: ").Append(ServiceRequestFeedbackReason).Append("\n");
            sb.Append("  ServiceRequestStatus: ").Append(ServiceRequestStatus).Append("\n");
            sb.Append("  ServiceRequestReference: ").Append(ServiceRequestReference).Append("\n");
            sb.Append("  ServiceProvider: ").Append(ServiceProvider).Append("\n");
            sb.Append("  ServiceFeedbackExtensionG: ").Append(ServiceFeedbackExtensionG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ServiceFeedback)obj);
        }

        /// <summary>
        /// Returns true if ServiceFeedback instances are equal
        /// </summary>
        /// <param name="other">Instance of ServiceFeedback to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceFeedback other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ServiceRequestFeedbackReason == other.ServiceRequestFeedbackReason ||
                    ServiceRequestFeedbackReason != null &&
                    ServiceRequestFeedbackReason.Equals(other.ServiceRequestFeedbackReason)
                ) && 
                (
                    ServiceRequestStatus == other.ServiceRequestStatus ||
                    ServiceRequestStatus != null &&
                    ServiceRequestStatus.Equals(other.ServiceRequestStatus)
                ) && 
                (
                    ServiceRequestReference == other.ServiceRequestReference ||
                    ServiceRequestReference != null &&
                    ServiceRequestReference.Equals(other.ServiceRequestReference)
                ) && 
                (
                    ServiceProvider == other.ServiceProvider ||
                    ServiceProvider != null &&
                    ServiceProvider.Equals(other.ServiceProvider)
                ) && 
                (
                    ServiceFeedbackExtensionG == other.ServiceFeedbackExtensionG ||
                    ServiceFeedbackExtensionG != null &&
                    other.ServiceFeedbackExtensionG != null &&
                    ServiceFeedbackExtensionG.SequenceEqual(other.ServiceFeedbackExtensionG)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ServiceRequestFeedbackReason != null)
                    hashCode = hashCode * 59 + ServiceRequestFeedbackReason.GetHashCode();
                    if (ServiceRequestStatus != null)
                    hashCode = hashCode * 59 + ServiceRequestStatus.GetHashCode();
                    if (ServiceRequestReference != null)
                    hashCode = hashCode * 59 + ServiceRequestReference.GetHashCode();
                    if (ServiceProvider != null)
                    hashCode = hashCode * 59 + ServiceProvider.GetHashCode();
                    if (ServiceFeedbackExtensionG != null)
                    hashCode = hashCode * 59 + ServiceFeedbackExtensionG.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ServiceFeedback left, ServiceFeedback right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ServiceFeedback left, ServiceFeedback right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
