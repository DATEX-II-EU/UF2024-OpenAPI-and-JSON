/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PointLocation : IEquatable<PointLocation>
    {
        /// <summary>
        /// Gets or Sets CoordinatesForDisplay
        /// </summary>
        [DataMember(Name="coordinatesForDisplay", EmitDefaultValue=false)]
        public PointCoordinates CoordinatesForDisplay { get; set; }

        /// <summary>
        /// Gets or Sets SupplementaryPositionalDescription
        /// </summary>
        [DataMember(Name="supplementaryPositionalDescription", EmitDefaultValue=false)]
        public SupplementaryPositionalDescription SupplementaryPositionalDescription { get; set; }

        /// <summary>
        /// Gets or Sets PointByCoordinates
        /// </summary>
        [DataMember(Name="pointByCoordinates", EmitDefaultValue=false)]
        public PointByCoordinates PointByCoordinates { get; set; }

        /// <summary>
        /// Gets or Sets AlertCPoint
        /// </summary>
        [DataMember(Name="alertCPoint", EmitDefaultValue=false)]
        public List<AlertCPointG> AlertCPoint { get; set; }

        /// <summary>
        /// Gets or Sets LocationReferenceExtensionG
        /// </summary>
        [DataMember(Name="locationReferenceExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> LocationReferenceExtensionG { get; set; }

        /// <summary>
        /// Gets or Sets LocationExtensionG
        /// </summary>
        [DataMember(Name="locationExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> LocationExtensionG { get; set; }

        /// <summary>
        /// Gets or Sets NetworkLocationExtensionG
        /// </summary>
        [DataMember(Name="networkLocationExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> NetworkLocationExtensionG { get; set; }

        /// <summary>
        /// Gets or Sets PointLocationExtensionG
        /// </summary>
        [DataMember(Name="pointLocationExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> PointLocationExtensionG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PointLocation {\n");
            sb.Append("  CoordinatesForDisplay: ").Append(CoordinatesForDisplay).Append("\n");
            sb.Append("  SupplementaryPositionalDescription: ").Append(SupplementaryPositionalDescription).Append("\n");
            sb.Append("  PointByCoordinates: ").Append(PointByCoordinates).Append("\n");
            sb.Append("  AlertCPoint: ").Append(AlertCPoint).Append("\n");
            sb.Append("  LocationReferenceExtensionG: ").Append(LocationReferenceExtensionG).Append("\n");
            sb.Append("  LocationExtensionG: ").Append(LocationExtensionG).Append("\n");
            sb.Append("  NetworkLocationExtensionG: ").Append(NetworkLocationExtensionG).Append("\n");
            sb.Append("  PointLocationExtensionG: ").Append(PointLocationExtensionG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PointLocation)obj);
        }

        /// <summary>
        /// Returns true if PointLocation instances are equal
        /// </summary>
        /// <param name="other">Instance of PointLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PointLocation other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CoordinatesForDisplay == other.CoordinatesForDisplay ||
                    CoordinatesForDisplay != null &&
                    CoordinatesForDisplay.Equals(other.CoordinatesForDisplay)
                ) && 
                (
                    SupplementaryPositionalDescription == other.SupplementaryPositionalDescription ||
                    SupplementaryPositionalDescription != null &&
                    SupplementaryPositionalDescription.Equals(other.SupplementaryPositionalDescription)
                ) && 
                (
                    PointByCoordinates == other.PointByCoordinates ||
                    PointByCoordinates != null &&
                    PointByCoordinates.Equals(other.PointByCoordinates)
                ) && 
                (
                    AlertCPoint == other.AlertCPoint ||
                    AlertCPoint != null &&
                    other.AlertCPoint != null &&
                    AlertCPoint.SequenceEqual(other.AlertCPoint)
                ) && 
                (
                    LocationReferenceExtensionG == other.LocationReferenceExtensionG ||
                    LocationReferenceExtensionG != null &&
                    other.LocationReferenceExtensionG != null &&
                    LocationReferenceExtensionG.SequenceEqual(other.LocationReferenceExtensionG)
                ) && 
                (
                    LocationExtensionG == other.LocationExtensionG ||
                    LocationExtensionG != null &&
                    other.LocationExtensionG != null &&
                    LocationExtensionG.SequenceEqual(other.LocationExtensionG)
                ) && 
                (
                    NetworkLocationExtensionG == other.NetworkLocationExtensionG ||
                    NetworkLocationExtensionG != null &&
                    other.NetworkLocationExtensionG != null &&
                    NetworkLocationExtensionG.SequenceEqual(other.NetworkLocationExtensionG)
                ) && 
                (
                    PointLocationExtensionG == other.PointLocationExtensionG ||
                    PointLocationExtensionG != null &&
                    other.PointLocationExtensionG != null &&
                    PointLocationExtensionG.SequenceEqual(other.PointLocationExtensionG)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CoordinatesForDisplay != null)
                    hashCode = hashCode * 59 + CoordinatesForDisplay.GetHashCode();
                    if (SupplementaryPositionalDescription != null)
                    hashCode = hashCode * 59 + SupplementaryPositionalDescription.GetHashCode();
                    if (PointByCoordinates != null)
                    hashCode = hashCode * 59 + PointByCoordinates.GetHashCode();
                    if (AlertCPoint != null)
                    hashCode = hashCode * 59 + AlertCPoint.GetHashCode();
                    if (LocationReferenceExtensionG != null)
                    hashCode = hashCode * 59 + LocationReferenceExtensionG.GetHashCode();
                    if (LocationExtensionG != null)
                    hashCode = hashCode * 59 + LocationExtensionG.GetHashCode();
                    if (NetworkLocationExtensionG != null)
                    hashCode = hashCode * 59 + NetworkLocationExtensionG.GetHashCode();
                    if (PointLocationExtensionG != null)
                    hashCode = hashCode * 59 + PointLocationExtensionG.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PointLocation left, PointLocation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PointLocation left, PointLocation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
