/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DynamicInformation : IEquatable<DynamicInformation>
    {
        /// <summary>
        /// Gets or Sets ExchangeStatus
        /// </summary>
        [Required]
        [DataMember(Name="exchangeStatus", EmitDefaultValue=false)]
        public ExchangeStatusEnumG ExchangeStatus { get; set; }

        /// <summary>
        /// Gets or Sets ExchangeStatusDescription
        /// </summary>
        [DataMember(Name="exchangeStatusDescription", EmitDefaultValue=false)]
        public MultilingualString ExchangeStatusDescription { get; set; }

        /// <summary>
        /// Gets or Sets CompletedPaylod
        /// </summary>
        [DataMember(Name="completedPaylod", EmitDefaultValue=true)]
        public bool CompletedPaylod { get; set; }

        /// <summary>
        /// Gets or Sets MessageSequencingNumber
        /// </summary>
        [DataMember(Name="messageSequencingNumber", EmitDefaultValue=true)]
        public int MessageSequencingNumber { get; set; }

        /// <summary>
        /// Gets or Sets MessageGenerationTimestamp
        /// </summary>
        [Required]
        [DataMember(Name="messageGenerationTimestamp", EmitDefaultValue=true)]
        public DateTime MessageGenerationTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets ReturnInformation
        /// </summary>
        [DataMember(Name="returnInformation", EmitDefaultValue=false)]
        public ReturnInformation ReturnInformation { get; set; }

        /// <summary>
        /// Gets or Sets SessionInformation
        /// </summary>
        [DataMember(Name="sessionInformation", EmitDefaultValue=false)]
        public SessionInformation SessionInformation { get; set; }

        /// <summary>
        /// Gets or Sets DynamicInformationExtensionG
        /// </summary>
        [DataMember(Name="dynamicInformationExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> DynamicInformationExtensionG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DynamicInformation {\n");
            sb.Append("  ExchangeStatus: ").Append(ExchangeStatus).Append("\n");
            sb.Append("  ExchangeStatusDescription: ").Append(ExchangeStatusDescription).Append("\n");
            sb.Append("  CompletedPaylod: ").Append(CompletedPaylod).Append("\n");
            sb.Append("  MessageSequencingNumber: ").Append(MessageSequencingNumber).Append("\n");
            sb.Append("  MessageGenerationTimestamp: ").Append(MessageGenerationTimestamp).Append("\n");
            sb.Append("  ReturnInformation: ").Append(ReturnInformation).Append("\n");
            sb.Append("  SessionInformation: ").Append(SessionInformation).Append("\n");
            sb.Append("  DynamicInformationExtensionG: ").Append(DynamicInformationExtensionG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DynamicInformation)obj);
        }

        /// <summary>
        /// Returns true if DynamicInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of DynamicInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DynamicInformation other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ExchangeStatus == other.ExchangeStatus ||
                    ExchangeStatus != null &&
                    ExchangeStatus.Equals(other.ExchangeStatus)
                ) && 
                (
                    ExchangeStatusDescription == other.ExchangeStatusDescription ||
                    ExchangeStatusDescription != null &&
                    ExchangeStatusDescription.Equals(other.ExchangeStatusDescription)
                ) && 
                (
                    CompletedPaylod == other.CompletedPaylod ||
                    
                    CompletedPaylod.Equals(other.CompletedPaylod)
                ) && 
                (
                    MessageSequencingNumber == other.MessageSequencingNumber ||
                    
                    MessageSequencingNumber.Equals(other.MessageSequencingNumber)
                ) && 
                (
                    MessageGenerationTimestamp == other.MessageGenerationTimestamp ||
                    
                    MessageGenerationTimestamp.Equals(other.MessageGenerationTimestamp)
                ) && 
                (
                    ReturnInformation == other.ReturnInformation ||
                    ReturnInformation != null &&
                    ReturnInformation.Equals(other.ReturnInformation)
                ) && 
                (
                    SessionInformation == other.SessionInformation ||
                    SessionInformation != null &&
                    SessionInformation.Equals(other.SessionInformation)
                ) && 
                (
                    DynamicInformationExtensionG == other.DynamicInformationExtensionG ||
                    DynamicInformationExtensionG != null &&
                    other.DynamicInformationExtensionG != null &&
                    DynamicInformationExtensionG.SequenceEqual(other.DynamicInformationExtensionG)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ExchangeStatus != null)
                    hashCode = hashCode * 59 + ExchangeStatus.GetHashCode();
                    if (ExchangeStatusDescription != null)
                    hashCode = hashCode * 59 + ExchangeStatusDescription.GetHashCode();
                    
                    hashCode = hashCode * 59 + CompletedPaylod.GetHashCode();
                    
                    hashCode = hashCode * 59 + MessageSequencingNumber.GetHashCode();
                    
                    hashCode = hashCode * 59 + MessageGenerationTimestamp.GetHashCode();
                    if (ReturnInformation != null)
                    hashCode = hashCode * 59 + ReturnInformation.GetHashCode();
                    if (SessionInformation != null)
                    hashCode = hashCode * 59 + SessionInformation.GetHashCode();
                    if (DynamicInformationExtensionG != null)
                    hashCode = hashCode * 59 + DynamicInformationExtensionG.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DynamicInformation left, DynamicInformation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DynamicInformation left, DynamicInformation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
