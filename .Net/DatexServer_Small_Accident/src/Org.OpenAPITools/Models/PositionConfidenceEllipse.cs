/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PositionConfidenceEllipse : IEquatable<PositionConfidenceEllipse>
    {
        /// <summary>
        /// Gets or Sets SemiMajorAxisLength
        /// </summary>
        [DataMember(Name="semiMajorAxisLength", EmitDefaultValue=true)]
        public decimal SemiMajorAxisLength { get; set; }

        /// <summary>
        /// Gets or Sets SemiMajorAxisLengthCodedError
        /// </summary>
        [DataMember(Name="semiMajorAxisLengthCodedError", EmitDefaultValue=false)]
        public PositionConfidenceCodedErrorEnumG SemiMajorAxisLengthCodedError { get; set; }

        /// <summary>
        /// Gets or Sets SemiMinorAxisLength
        /// </summary>
        [DataMember(Name="semiMinorAxisLength", EmitDefaultValue=true)]
        public decimal SemiMinorAxisLength { get; set; }

        /// <summary>
        /// Gets or Sets SemiMinorAxisLengthCodedError
        /// </summary>
        [DataMember(Name="semiMinorAxisLengthCodedError", EmitDefaultValue=false)]
        public PositionConfidenceCodedErrorEnumG SemiMinorAxisLengthCodedError { get; set; }

        /// <summary>
        /// Gets or Sets SemiMajorAxisOrientation
        /// </summary>
        [DataMember(Name="semiMajorAxisOrientation", EmitDefaultValue=true)]
        public int SemiMajorAxisOrientation { get; set; }

        /// <summary>
        /// Gets or Sets SemiMajorAxisOrientationError
        /// </summary>
        [DataMember(Name="semiMajorAxisOrientationError", EmitDefaultValue=true)]
        public bool SemiMajorAxisOrientationError { get; set; }

        /// <summary>
        /// Gets or Sets PositionConfidenceEllipseExtensionG
        /// </summary>
        [DataMember(Name="positionConfidenceEllipseExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> PositionConfidenceEllipseExtensionG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PositionConfidenceEllipse {\n");
            sb.Append("  SemiMajorAxisLength: ").Append(SemiMajorAxisLength).Append("\n");
            sb.Append("  SemiMajorAxisLengthCodedError: ").Append(SemiMajorAxisLengthCodedError).Append("\n");
            sb.Append("  SemiMinorAxisLength: ").Append(SemiMinorAxisLength).Append("\n");
            sb.Append("  SemiMinorAxisLengthCodedError: ").Append(SemiMinorAxisLengthCodedError).Append("\n");
            sb.Append("  SemiMajorAxisOrientation: ").Append(SemiMajorAxisOrientation).Append("\n");
            sb.Append("  SemiMajorAxisOrientationError: ").Append(SemiMajorAxisOrientationError).Append("\n");
            sb.Append("  PositionConfidenceEllipseExtensionG: ").Append(PositionConfidenceEllipseExtensionG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PositionConfidenceEllipse)obj);
        }

        /// <summary>
        /// Returns true if PositionConfidenceEllipse instances are equal
        /// </summary>
        /// <param name="other">Instance of PositionConfidenceEllipse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PositionConfidenceEllipse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SemiMajorAxisLength == other.SemiMajorAxisLength ||
                    
                    SemiMajorAxisLength.Equals(other.SemiMajorAxisLength)
                ) && 
                (
                    SemiMajorAxisLengthCodedError == other.SemiMajorAxisLengthCodedError ||
                    SemiMajorAxisLengthCodedError != null &&
                    SemiMajorAxisLengthCodedError.Equals(other.SemiMajorAxisLengthCodedError)
                ) && 
                (
                    SemiMinorAxisLength == other.SemiMinorAxisLength ||
                    
                    SemiMinorAxisLength.Equals(other.SemiMinorAxisLength)
                ) && 
                (
                    SemiMinorAxisLengthCodedError == other.SemiMinorAxisLengthCodedError ||
                    SemiMinorAxisLengthCodedError != null &&
                    SemiMinorAxisLengthCodedError.Equals(other.SemiMinorAxisLengthCodedError)
                ) && 
                (
                    SemiMajorAxisOrientation == other.SemiMajorAxisOrientation ||
                    
                    SemiMajorAxisOrientation.Equals(other.SemiMajorAxisOrientation)
                ) && 
                (
                    SemiMajorAxisOrientationError == other.SemiMajorAxisOrientationError ||
                    
                    SemiMajorAxisOrientationError.Equals(other.SemiMajorAxisOrientationError)
                ) && 
                (
                    PositionConfidenceEllipseExtensionG == other.PositionConfidenceEllipseExtensionG ||
                    PositionConfidenceEllipseExtensionG != null &&
                    other.PositionConfidenceEllipseExtensionG != null &&
                    PositionConfidenceEllipseExtensionG.SequenceEqual(other.PositionConfidenceEllipseExtensionG)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + SemiMajorAxisLength.GetHashCode();
                    if (SemiMajorAxisLengthCodedError != null)
                    hashCode = hashCode * 59 + SemiMajorAxisLengthCodedError.GetHashCode();
                    
                    hashCode = hashCode * 59 + SemiMinorAxisLength.GetHashCode();
                    if (SemiMinorAxisLengthCodedError != null)
                    hashCode = hashCode * 59 + SemiMinorAxisLengthCodedError.GetHashCode();
                    
                    hashCode = hashCode * 59 + SemiMajorAxisOrientation.GetHashCode();
                    
                    hashCode = hashCode * 59 + SemiMajorAxisOrientationError.GetHashCode();
                    if (PositionConfidenceEllipseExtensionG != null)
                    hashCode = hashCode * 59 + PositionConfidenceEllipseExtensionG.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PositionConfidenceEllipse left, PositionConfidenceEllipse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PositionConfidenceEllipse left, PositionConfidenceEllipse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
