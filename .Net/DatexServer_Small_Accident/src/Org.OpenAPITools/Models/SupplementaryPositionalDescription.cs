/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SupplementaryPositionalDescription : IEquatable<SupplementaryPositionalDescription>
    {
        /// <summary>
        /// Gets or Sets LocationDescription
        /// </summary>
        [DataMember(Name="locationDescription", EmitDefaultValue=false)]
        public MultilingualString LocationDescription { get; set; }

        /// <summary>
        /// Gets or Sets Carriageway
        /// </summary>
        [DataMember(Name="carriageway", EmitDefaultValue=false)]
        public List<Carriageway> Carriageway { get; set; }

        /// <summary>
        /// Gets or Sets NamedArea
        /// </summary>
        [DataMember(Name="namedArea", EmitDefaultValue=false)]
        public NamedAreaG NamedArea { get; set; }

        /// <summary>
        /// Gets or Sets RoadInformation
        /// </summary>
        [DataMember(Name="roadInformation", EmitDefaultValue=false)]
        public List<RoadInformationG> RoadInformation { get; set; }

        /// <summary>
        /// Gets or Sets SupplementaryPositionalDescriptionExtensionG
        /// </summary>
        [DataMember(Name="supplementaryPositionalDescriptionExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> SupplementaryPositionalDescriptionExtensionG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SupplementaryPositionalDescription {\n");
            sb.Append("  LocationDescription: ").Append(LocationDescription).Append("\n");
            sb.Append("  Carriageway: ").Append(Carriageway).Append("\n");
            sb.Append("  NamedArea: ").Append(NamedArea).Append("\n");
            sb.Append("  RoadInformation: ").Append(RoadInformation).Append("\n");
            sb.Append("  SupplementaryPositionalDescriptionExtensionG: ").Append(SupplementaryPositionalDescriptionExtensionG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SupplementaryPositionalDescription)obj);
        }

        /// <summary>
        /// Returns true if SupplementaryPositionalDescription instances are equal
        /// </summary>
        /// <param name="other">Instance of SupplementaryPositionalDescription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SupplementaryPositionalDescription other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LocationDescription == other.LocationDescription ||
                    LocationDescription != null &&
                    LocationDescription.Equals(other.LocationDescription)
                ) && 
                (
                    Carriageway == other.Carriageway ||
                    Carriageway != null &&
                    other.Carriageway != null &&
                    Carriageway.SequenceEqual(other.Carriageway)
                ) && 
                (
                    NamedArea == other.NamedArea ||
                    NamedArea != null &&
                    NamedArea.Equals(other.NamedArea)
                ) && 
                (
                    RoadInformation == other.RoadInformation ||
                    RoadInformation != null &&
                    other.RoadInformation != null &&
                    RoadInformation.SequenceEqual(other.RoadInformation)
                ) && 
                (
                    SupplementaryPositionalDescriptionExtensionG == other.SupplementaryPositionalDescriptionExtensionG ||
                    SupplementaryPositionalDescriptionExtensionG != null &&
                    other.SupplementaryPositionalDescriptionExtensionG != null &&
                    SupplementaryPositionalDescriptionExtensionG.SequenceEqual(other.SupplementaryPositionalDescriptionExtensionG)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LocationDescription != null)
                    hashCode = hashCode * 59 + LocationDescription.GetHashCode();
                    if (Carriageway != null)
                    hashCode = hashCode * 59 + Carriageway.GetHashCode();
                    if (NamedArea != null)
                    hashCode = hashCode * 59 + NamedArea.GetHashCode();
                    if (RoadInformation != null)
                    hashCode = hashCode * 59 + RoadInformation.GetHashCode();
                    if (SupplementaryPositionalDescriptionExtensionG != null)
                    hashCode = hashCode * 59 + SupplementaryPositionalDescriptionExtensionG.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SupplementaryPositionalDescription left, SupplementaryPositionalDescription right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SupplementaryPositionalDescription left, SupplementaryPositionalDescription right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
