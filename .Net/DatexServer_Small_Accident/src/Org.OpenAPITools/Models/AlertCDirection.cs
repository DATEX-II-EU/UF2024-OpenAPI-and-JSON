/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AlertCDirection : IEquatable<AlertCDirection>
    {
        /// <summary>
        /// Gets or Sets AlertCDirectionCoded
        /// </summary>
        [Required]
        [DataMember(Name="alertCDirectionCoded", EmitDefaultValue=false)]
        public AlertCDirectionEnumG AlertCDirectionCoded { get; set; }

        /// <summary>
        /// Gets or Sets AlertCDirectionNamed
        /// </summary>
        [DataMember(Name="alertCDirectionNamed", EmitDefaultValue=false)]
        public MultilingualString AlertCDirectionNamed { get; set; }

        /// <summary>
        /// Gets or Sets AlertCAffectedDirection
        /// </summary>
        [Required]
        [DataMember(Name="alertCAffectedDirection", EmitDefaultValue=false)]
        public LinearDirectionEnumG AlertCAffectedDirection { get; set; }

        /// <summary>
        /// Gets or Sets AlertCDirectionExtensionG
        /// </summary>
        [DataMember(Name="alertCDirectionExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> AlertCDirectionExtensionG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlertCDirection {\n");
            sb.Append("  AlertCDirectionCoded: ").Append(AlertCDirectionCoded).Append("\n");
            sb.Append("  AlertCDirectionNamed: ").Append(AlertCDirectionNamed).Append("\n");
            sb.Append("  AlertCAffectedDirection: ").Append(AlertCAffectedDirection).Append("\n");
            sb.Append("  AlertCDirectionExtensionG: ").Append(AlertCDirectionExtensionG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AlertCDirection)obj);
        }

        /// <summary>
        /// Returns true if AlertCDirection instances are equal
        /// </summary>
        /// <param name="other">Instance of AlertCDirection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlertCDirection other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AlertCDirectionCoded == other.AlertCDirectionCoded ||
                    AlertCDirectionCoded != null &&
                    AlertCDirectionCoded.Equals(other.AlertCDirectionCoded)
                ) && 
                (
                    AlertCDirectionNamed == other.AlertCDirectionNamed ||
                    AlertCDirectionNamed != null &&
                    AlertCDirectionNamed.Equals(other.AlertCDirectionNamed)
                ) && 
                (
                    AlertCAffectedDirection == other.AlertCAffectedDirection ||
                    AlertCAffectedDirection != null &&
                    AlertCAffectedDirection.Equals(other.AlertCAffectedDirection)
                ) && 
                (
                    AlertCDirectionExtensionG == other.AlertCDirectionExtensionG ||
                    AlertCDirectionExtensionG != null &&
                    other.AlertCDirectionExtensionG != null &&
                    AlertCDirectionExtensionG.SequenceEqual(other.AlertCDirectionExtensionG)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AlertCDirectionCoded != null)
                    hashCode = hashCode * 59 + AlertCDirectionCoded.GetHashCode();
                    if (AlertCDirectionNamed != null)
                    hashCode = hashCode * 59 + AlertCDirectionNamed.GetHashCode();
                    if (AlertCAffectedDirection != null)
                    hashCode = hashCode * 59 + AlertCAffectedDirection.GetHashCode();
                    if (AlertCDirectionExtensionG != null)
                    hashCode = hashCode * 59 + AlertCDirectionExtensionG.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AlertCDirection left, AlertCDirection right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AlertCDirection left, AlertCDirection right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
