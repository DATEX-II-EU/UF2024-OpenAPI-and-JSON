/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ReturnInformation : IEquatable<ReturnInformation>
    {
        /// <summary>
        /// Gets or Sets ReturnStatus
        /// </summary>
        [Required]
        [DataMember(Name="returnStatus", EmitDefaultValue=false)]
        public ExchangeReturnEnumG ReturnStatus { get; set; }

        /// <summary>
        /// Gets or Sets ReturnStatusReason
        /// </summary>
        [DataMember(Name="returnStatusReason", EmitDefaultValue=false)]
        public MultilingualString ReturnStatusReason { get; set; }

        /// <summary>
        /// Gets or Sets CodedInvalidityReason
        /// </summary>
        [DataMember(Name="codedInvalidityReason", EmitDefaultValue=false)]
        public List<InvalidityReasonEnumG> CodedInvalidityReason { get; set; }

        /// <summary>
        /// Gets or Sets ReturnInformationExtensionG
        /// </summary>
        [DataMember(Name="returnInformationExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> ReturnInformationExtensionG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReturnInformation {\n");
            sb.Append("  ReturnStatus: ").Append(ReturnStatus).Append("\n");
            sb.Append("  ReturnStatusReason: ").Append(ReturnStatusReason).Append("\n");
            sb.Append("  CodedInvalidityReason: ").Append(CodedInvalidityReason).Append("\n");
            sb.Append("  ReturnInformationExtensionG: ").Append(ReturnInformationExtensionG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReturnInformation)obj);
        }

        /// <summary>
        /// Returns true if ReturnInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of ReturnInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReturnInformation other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReturnStatus == other.ReturnStatus ||
                    ReturnStatus != null &&
                    ReturnStatus.Equals(other.ReturnStatus)
                ) && 
                (
                    ReturnStatusReason == other.ReturnStatusReason ||
                    ReturnStatusReason != null &&
                    ReturnStatusReason.Equals(other.ReturnStatusReason)
                ) && 
                (
                    CodedInvalidityReason == other.CodedInvalidityReason ||
                    CodedInvalidityReason != null &&
                    other.CodedInvalidityReason != null &&
                    CodedInvalidityReason.SequenceEqual(other.CodedInvalidityReason)
                ) && 
                (
                    ReturnInformationExtensionG == other.ReturnInformationExtensionG ||
                    ReturnInformationExtensionG != null &&
                    other.ReturnInformationExtensionG != null &&
                    ReturnInformationExtensionG.SequenceEqual(other.ReturnInformationExtensionG)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReturnStatus != null)
                    hashCode = hashCode * 59 + ReturnStatus.GetHashCode();
                    if (ReturnStatusReason != null)
                    hashCode = hashCode * 59 + ReturnStatusReason.GetHashCode();
                    if (CodedInvalidityReason != null)
                    hashCode = hashCode * 59 + CodedInvalidityReason.GetHashCode();
                    if (ReturnInformationExtensionG != null)
                    hashCode = hashCode * 59 + ReturnInformationExtensionG.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReturnInformation left, ReturnInformation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReturnInformation left, ReturnInformation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
