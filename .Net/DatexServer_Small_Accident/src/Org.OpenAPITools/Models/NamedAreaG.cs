/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class NamedAreaG : IEquatable<NamedAreaG>
    {
        /// <summary>
        /// Gets or Sets LocNamedArea
        /// </summary>
        [DataMember(Name="locNamedArea", EmitDefaultValue=false)]
        public NamedArea LocNamedArea { get; set; }

        /// <summary>
        /// Gets or Sets LocNutsNamedArea
        /// </summary>
        [DataMember(Name="locNutsNamedArea", EmitDefaultValue=false)]
        public NutsNamedArea LocNutsNamedArea { get; set; }

        /// <summary>
        /// Gets or Sets LocIsoNamedArea
        /// </summary>
        [DataMember(Name="locIsoNamedArea", EmitDefaultValue=false)]
        public IsoNamedArea LocIsoNamedArea { get; set; }

        /// <summary>
        /// Gets or Sets LocxNamedAreaExtended
        /// </summary>
        [DataMember(Name="locxNamedAreaExtended", EmitDefaultValue=false)]
        public NamedAreaExtended LocxNamedAreaExtended { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NamedAreaG {\n");
            sb.Append("  LocNamedArea: ").Append(LocNamedArea).Append("\n");
            sb.Append("  LocNutsNamedArea: ").Append(LocNutsNamedArea).Append("\n");
            sb.Append("  LocIsoNamedArea: ").Append(LocIsoNamedArea).Append("\n");
            sb.Append("  LocxNamedAreaExtended: ").Append(LocxNamedAreaExtended).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NamedAreaG)obj);
        }

        /// <summary>
        /// Returns true if NamedAreaG instances are equal
        /// </summary>
        /// <param name="other">Instance of NamedAreaG to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NamedAreaG other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LocNamedArea == other.LocNamedArea ||
                    LocNamedArea != null &&
                    LocNamedArea.Equals(other.LocNamedArea)
                ) && 
                (
                    LocNutsNamedArea == other.LocNutsNamedArea ||
                    LocNutsNamedArea != null &&
                    LocNutsNamedArea.Equals(other.LocNutsNamedArea)
                ) && 
                (
                    LocIsoNamedArea == other.LocIsoNamedArea ||
                    LocIsoNamedArea != null &&
                    LocIsoNamedArea.Equals(other.LocIsoNamedArea)
                ) && 
                (
                    LocxNamedAreaExtended == other.LocxNamedAreaExtended ||
                    LocxNamedAreaExtended != null &&
                    LocxNamedAreaExtended.Equals(other.LocxNamedAreaExtended)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LocNamedArea != null)
                    hashCode = hashCode * 59 + LocNamedArea.GetHashCode();
                    if (LocNutsNamedArea != null)
                    hashCode = hashCode * 59 + LocNutsNamedArea.GetHashCode();
                    if (LocIsoNamedArea != null)
                    hashCode = hashCode * 59 + LocIsoNamedArea.GetHashCode();
                    if (LocxNamedAreaExtended != null)
                    hashCode = hashCode * 59 + LocxNamedAreaExtended.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NamedAreaG left, NamedAreaG right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NamedAreaG left, NamedAreaG right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
