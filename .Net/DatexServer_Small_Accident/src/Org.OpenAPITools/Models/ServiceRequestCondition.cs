/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ServiceRequestCondition : IEquatable<ServiceRequestCondition>
    {
        /// <summary>
        /// Gets or Sets ConditionDescription
        /// </summary>
        [DataMember(Name="conditionDescription", EmitDefaultValue=false)]
        public MultilingualString ConditionDescription { get; set; }

        /// <summary>
        /// Gets or Sets ExternalIdCondition
        /// </summary>
        [DataMember(Name="externalIdCondition", EmitDefaultValue=false)]
        public List<string> ExternalIdCondition { get; set; }

        /// <summary>
        /// Gets or Sets ReferencedCondition
        /// </summary>
        [DataMember(Name="referencedCondition", EmitDefaultValue=false)]
        public List<Reference> ReferencedCondition { get; set; }

        /// <summary>
        /// Gets or Sets VersionReferencedCondition
        /// </summary>
        [DataMember(Name="versionReferencedCondition", EmitDefaultValue=false)]
        public List<VersionedReference> VersionReferencedCondition { get; set; }

        /// <summary>
        /// Gets or Sets ServiceRequestConditionExtensionG
        /// </summary>
        [DataMember(Name="serviceRequestConditionExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> ServiceRequestConditionExtensionG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceRequestCondition {\n");
            sb.Append("  ConditionDescription: ").Append(ConditionDescription).Append("\n");
            sb.Append("  ExternalIdCondition: ").Append(ExternalIdCondition).Append("\n");
            sb.Append("  ReferencedCondition: ").Append(ReferencedCondition).Append("\n");
            sb.Append("  VersionReferencedCondition: ").Append(VersionReferencedCondition).Append("\n");
            sb.Append("  ServiceRequestConditionExtensionG: ").Append(ServiceRequestConditionExtensionG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ServiceRequestCondition)obj);
        }

        /// <summary>
        /// Returns true if ServiceRequestCondition instances are equal
        /// </summary>
        /// <param name="other">Instance of ServiceRequestCondition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceRequestCondition other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ConditionDescription == other.ConditionDescription ||
                    ConditionDescription != null &&
                    ConditionDescription.Equals(other.ConditionDescription)
                ) && 
                (
                    ExternalIdCondition == other.ExternalIdCondition ||
                    ExternalIdCondition != null &&
                    other.ExternalIdCondition != null &&
                    ExternalIdCondition.SequenceEqual(other.ExternalIdCondition)
                ) && 
                (
                    ReferencedCondition == other.ReferencedCondition ||
                    ReferencedCondition != null &&
                    other.ReferencedCondition != null &&
                    ReferencedCondition.SequenceEqual(other.ReferencedCondition)
                ) && 
                (
                    VersionReferencedCondition == other.VersionReferencedCondition ||
                    VersionReferencedCondition != null &&
                    other.VersionReferencedCondition != null &&
                    VersionReferencedCondition.SequenceEqual(other.VersionReferencedCondition)
                ) && 
                (
                    ServiceRequestConditionExtensionG == other.ServiceRequestConditionExtensionG ||
                    ServiceRequestConditionExtensionG != null &&
                    other.ServiceRequestConditionExtensionG != null &&
                    ServiceRequestConditionExtensionG.SequenceEqual(other.ServiceRequestConditionExtensionG)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ConditionDescription != null)
                    hashCode = hashCode * 59 + ConditionDescription.GetHashCode();
                    if (ExternalIdCondition != null)
                    hashCode = hashCode * 59 + ExternalIdCondition.GetHashCode();
                    if (ReferencedCondition != null)
                    hashCode = hashCode * 59 + ReferencedCondition.GetHashCode();
                    if (VersionReferencedCondition != null)
                    hashCode = hashCode * 59 + VersionReferencedCondition.GetHashCode();
                    if (ServiceRequestConditionExtensionG != null)
                    hashCode = hashCode * 59 + ServiceRequestConditionExtensionG.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ServiceRequestCondition left, ServiceRequestCondition right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ServiceRequestCondition left, ServiceRequestCondition right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
