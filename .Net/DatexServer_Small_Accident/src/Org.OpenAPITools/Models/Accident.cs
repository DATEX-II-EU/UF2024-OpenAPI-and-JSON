/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Accident : IEquatable<Accident>
    {
        /// <summary>
        /// Gets or Sets IdG
        /// </summary>
        [Required]
        [DataMember(Name="idG", EmitDefaultValue=false)]
        public string IdG { get; set; }

        /// <summary>
        /// Gets or Sets VersionG
        /// </summary>
        [Required]
        [DataMember(Name="versionG", EmitDefaultValue=false)]
        public string VersionG { get; set; }

        /// <summary>
        /// Gets or Sets SituationRecordCreationTime
        /// </summary>
        [Required]
        [DataMember(Name="situationRecordCreationTime", EmitDefaultValue=true)]
        public DateTime SituationRecordCreationTime { get; set; }

        /// <summary>
        /// Gets or Sets SituationRecordVersionTime
        /// </summary>
        [Required]
        [DataMember(Name="situationRecordVersionTime", EmitDefaultValue=true)]
        public DateTime SituationRecordVersionTime { get; set; }

        /// <summary>
        /// Gets or Sets ProbabilityOfOccurrence
        /// </summary>
        [Required]
        [DataMember(Name="probabilityOfOccurrence", EmitDefaultValue=false)]
        public ProbabilityOfOccurrenceEnumG ProbabilityOfOccurrence { get; set; }

        /// <summary>
        /// Gets or Sets AccidentCause
        /// </summary>
        [DataMember(Name="accidentCause", EmitDefaultValue=false)]
        public AccidentCauseEnumG AccidentCause { get; set; }

        /// <summary>
        /// Gets or Sets AccidentType
        /// </summary>
        [Required]
        [DataMember(Name="accidentType", EmitDefaultValue=false)]
        public List<AccidentTypeEnumG> AccidentType { get; set; }

        /// <summary>
        /// Gets or Sets CollisionType
        /// </summary>
        [DataMember(Name="collisionType", EmitDefaultValue=false)]
        public CollisionTypeEnumG CollisionType { get; set; }

        /// <summary>
        /// Gets or Sets TotalNumberOfPeopleInvolved
        /// </summary>
        [DataMember(Name="totalNumberOfPeopleInvolved", EmitDefaultValue=true)]
        public int TotalNumberOfPeopleInvolved { get; set; }

        /// <summary>
        /// Gets or Sets TotalNumberOfVehiclesInvolved
        /// </summary>
        [DataMember(Name="totalNumberOfVehiclesInvolved", EmitDefaultValue=true)]
        public int TotalNumberOfVehiclesInvolved { get; set; }

        /// <summary>
        /// Gets or Sets Validity
        /// </summary>
        [Required]
        [DataMember(Name="validity", EmitDefaultValue=false)]
        public Validity Validity { get; set; }

        /// <summary>
        /// Gets or Sets LocationReference
        /// </summary>
        [Required]
        [DataMember(Name="locationReference", EmitDefaultValue=false)]
        public LocationReferenceG LocationReference { get; set; }

        /// <summary>
        /// Gets or Sets VehicleInvolved
        /// </summary>
        [DataMember(Name="vehicleInvolved", EmitDefaultValue=false)]
        public List<Vehicle> VehicleInvolved { get; set; }

        /// <summary>
        /// Gets or Sets GroupOfVehiclesInvolved
        /// </summary>
        [DataMember(Name="groupOfVehiclesInvolved", EmitDefaultValue=false)]
        public List<GroupOfVehiclesInvolved> GroupOfVehiclesInvolved { get; set; }

        /// <summary>
        /// Gets or Sets GroupOfPeopleInvolved
        /// </summary>
        [DataMember(Name="groupOfPeopleInvolved", EmitDefaultValue=false)]
        public List<GroupOfPeopleInvolved> GroupOfPeopleInvolved { get; set; }

        /// <summary>
        /// Gets or Sets SituationRecordExtensionG
        /// </summary>
        [DataMember(Name="situationRecordExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> SituationRecordExtensionG { get; set; }

        /// <summary>
        /// Gets or Sets TrafficElementExtensionG
        /// </summary>
        [DataMember(Name="trafficElementExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> TrafficElementExtensionG { get; set; }

        /// <summary>
        /// Gets or Sets AccidentExtensionG
        /// </summary>
        [DataMember(Name="accidentExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> AccidentExtensionG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Accident {\n");
            sb.Append("  IdG: ").Append(IdG).Append("\n");
            sb.Append("  VersionG: ").Append(VersionG).Append("\n");
            sb.Append("  SituationRecordCreationTime: ").Append(SituationRecordCreationTime).Append("\n");
            sb.Append("  SituationRecordVersionTime: ").Append(SituationRecordVersionTime).Append("\n");
            sb.Append("  ProbabilityOfOccurrence: ").Append(ProbabilityOfOccurrence).Append("\n");
            sb.Append("  AccidentCause: ").Append(AccidentCause).Append("\n");
            sb.Append("  AccidentType: ").Append(AccidentType).Append("\n");
            sb.Append("  CollisionType: ").Append(CollisionType).Append("\n");
            sb.Append("  TotalNumberOfPeopleInvolved: ").Append(TotalNumberOfPeopleInvolved).Append("\n");
            sb.Append("  TotalNumberOfVehiclesInvolved: ").Append(TotalNumberOfVehiclesInvolved).Append("\n");
            sb.Append("  Validity: ").Append(Validity).Append("\n");
            sb.Append("  LocationReference: ").Append(LocationReference).Append("\n");
            sb.Append("  VehicleInvolved: ").Append(VehicleInvolved).Append("\n");
            sb.Append("  GroupOfVehiclesInvolved: ").Append(GroupOfVehiclesInvolved).Append("\n");
            sb.Append("  GroupOfPeopleInvolved: ").Append(GroupOfPeopleInvolved).Append("\n");
            sb.Append("  SituationRecordExtensionG: ").Append(SituationRecordExtensionG).Append("\n");
            sb.Append("  TrafficElementExtensionG: ").Append(TrafficElementExtensionG).Append("\n");
            sb.Append("  AccidentExtensionG: ").Append(AccidentExtensionG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Accident)obj);
        }

        /// <summary>
        /// Returns true if Accident instances are equal
        /// </summary>
        /// <param name="other">Instance of Accident to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Accident other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IdG == other.IdG ||
                    IdG != null &&
                    IdG.Equals(other.IdG)
                ) && 
                (
                    VersionG == other.VersionG ||
                    VersionG != null &&
                    VersionG.Equals(other.VersionG)
                ) && 
                (
                    SituationRecordCreationTime == other.SituationRecordCreationTime ||
                    
                    SituationRecordCreationTime.Equals(other.SituationRecordCreationTime)
                ) && 
                (
                    SituationRecordVersionTime == other.SituationRecordVersionTime ||
                    
                    SituationRecordVersionTime.Equals(other.SituationRecordVersionTime)
                ) && 
                (
                    ProbabilityOfOccurrence == other.ProbabilityOfOccurrence ||
                    ProbabilityOfOccurrence != null &&
                    ProbabilityOfOccurrence.Equals(other.ProbabilityOfOccurrence)
                ) && 
                (
                    AccidentCause == other.AccidentCause ||
                    AccidentCause != null &&
                    AccidentCause.Equals(other.AccidentCause)
                ) && 
                (
                    AccidentType == other.AccidentType ||
                    AccidentType != null &&
                    other.AccidentType != null &&
                    AccidentType.SequenceEqual(other.AccidentType)
                ) && 
                (
                    CollisionType == other.CollisionType ||
                    CollisionType != null &&
                    CollisionType.Equals(other.CollisionType)
                ) && 
                (
                    TotalNumberOfPeopleInvolved == other.TotalNumberOfPeopleInvolved ||
                    
                    TotalNumberOfPeopleInvolved.Equals(other.TotalNumberOfPeopleInvolved)
                ) && 
                (
                    TotalNumberOfVehiclesInvolved == other.TotalNumberOfVehiclesInvolved ||
                    
                    TotalNumberOfVehiclesInvolved.Equals(other.TotalNumberOfVehiclesInvolved)
                ) && 
                (
                    Validity == other.Validity ||
                    Validity != null &&
                    Validity.Equals(other.Validity)
                ) && 
                (
                    LocationReference == other.LocationReference ||
                    LocationReference != null &&
                    LocationReference.Equals(other.LocationReference)
                ) && 
                (
                    VehicleInvolved == other.VehicleInvolved ||
                    VehicleInvolved != null &&
                    other.VehicleInvolved != null &&
                    VehicleInvolved.SequenceEqual(other.VehicleInvolved)
                ) && 
                (
                    GroupOfVehiclesInvolved == other.GroupOfVehiclesInvolved ||
                    GroupOfVehiclesInvolved != null &&
                    other.GroupOfVehiclesInvolved != null &&
                    GroupOfVehiclesInvolved.SequenceEqual(other.GroupOfVehiclesInvolved)
                ) && 
                (
                    GroupOfPeopleInvolved == other.GroupOfPeopleInvolved ||
                    GroupOfPeopleInvolved != null &&
                    other.GroupOfPeopleInvolved != null &&
                    GroupOfPeopleInvolved.SequenceEqual(other.GroupOfPeopleInvolved)
                ) && 
                (
                    SituationRecordExtensionG == other.SituationRecordExtensionG ||
                    SituationRecordExtensionG != null &&
                    other.SituationRecordExtensionG != null &&
                    SituationRecordExtensionG.SequenceEqual(other.SituationRecordExtensionG)
                ) && 
                (
                    TrafficElementExtensionG == other.TrafficElementExtensionG ||
                    TrafficElementExtensionG != null &&
                    other.TrafficElementExtensionG != null &&
                    TrafficElementExtensionG.SequenceEqual(other.TrafficElementExtensionG)
                ) && 
                (
                    AccidentExtensionG == other.AccidentExtensionG ||
                    AccidentExtensionG != null &&
                    other.AccidentExtensionG != null &&
                    AccidentExtensionG.SequenceEqual(other.AccidentExtensionG)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IdG != null)
                    hashCode = hashCode * 59 + IdG.GetHashCode();
                    if (VersionG != null)
                    hashCode = hashCode * 59 + VersionG.GetHashCode();
                    
                    hashCode = hashCode * 59 + SituationRecordCreationTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + SituationRecordVersionTime.GetHashCode();
                    if (ProbabilityOfOccurrence != null)
                    hashCode = hashCode * 59 + ProbabilityOfOccurrence.GetHashCode();
                    if (AccidentCause != null)
                    hashCode = hashCode * 59 + AccidentCause.GetHashCode();
                    if (AccidentType != null)
                    hashCode = hashCode * 59 + AccidentType.GetHashCode();
                    if (CollisionType != null)
                    hashCode = hashCode * 59 + CollisionType.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalNumberOfPeopleInvolved.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalNumberOfVehiclesInvolved.GetHashCode();
                    if (Validity != null)
                    hashCode = hashCode * 59 + Validity.GetHashCode();
                    if (LocationReference != null)
                    hashCode = hashCode * 59 + LocationReference.GetHashCode();
                    if (VehicleInvolved != null)
                    hashCode = hashCode * 59 + VehicleInvolved.GetHashCode();
                    if (GroupOfVehiclesInvolved != null)
                    hashCode = hashCode * 59 + GroupOfVehiclesInvolved.GetHashCode();
                    if (GroupOfPeopleInvolved != null)
                    hashCode = hashCode * 59 + GroupOfPeopleInvolved.GetHashCode();
                    if (SituationRecordExtensionG != null)
                    hashCode = hashCode * 59 + SituationRecordExtensionG.GetHashCode();
                    if (TrafficElementExtensionG != null)
                    hashCode = hashCode * 59 + TrafficElementExtensionG.GetHashCode();
                    if (AccidentExtensionG != null)
                    hashCode = hashCode * 59 + AccidentExtensionG.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Accident left, Accident right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Accident left, Accident right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
