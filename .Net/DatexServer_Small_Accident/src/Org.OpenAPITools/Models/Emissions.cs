/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Emissions : IEquatable<Emissions>
    {
        /// <summary>
        /// Gets or Sets EmissionClassificationEuro
        /// </summary>
        [DataMember(Name="emissionClassificationEuro", EmitDefaultValue=false)]
        public EmissionClassificationEuroEnumG EmissionClassificationEuro { get; set; }

        /// <summary>
        /// Gets or Sets EmissionClassificationOther
        /// </summary>
        [DataMember(Name="emissionClassificationOther", EmitDefaultValue=false)]
        public List<string> EmissionClassificationOther { get; set; }

        /// <summary>
        /// Gets or Sets EmissionLevel
        /// </summary>
        [DataMember(Name="emissionLevel", EmitDefaultValue=false)]
        public LowEmissionLevelEnumG EmissionLevel { get; set; }

        /// <summary>
        /// Gets or Sets EmissionsExtensionG
        /// </summary>
        [DataMember(Name="emissionsExtensionG", EmitDefaultValue=false)]
        public EmissionsExtensionTypeG EmissionsExtensionG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Emissions {\n");
            sb.Append("  EmissionClassificationEuro: ").Append(EmissionClassificationEuro).Append("\n");
            sb.Append("  EmissionClassificationOther: ").Append(EmissionClassificationOther).Append("\n");
            sb.Append("  EmissionLevel: ").Append(EmissionLevel).Append("\n");
            sb.Append("  EmissionsExtensionG: ").Append(EmissionsExtensionG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Emissions)obj);
        }

        /// <summary>
        /// Returns true if Emissions instances are equal
        /// </summary>
        /// <param name="other">Instance of Emissions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Emissions other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EmissionClassificationEuro == other.EmissionClassificationEuro ||
                    EmissionClassificationEuro != null &&
                    EmissionClassificationEuro.Equals(other.EmissionClassificationEuro)
                ) && 
                (
                    EmissionClassificationOther == other.EmissionClassificationOther ||
                    EmissionClassificationOther != null &&
                    other.EmissionClassificationOther != null &&
                    EmissionClassificationOther.SequenceEqual(other.EmissionClassificationOther)
                ) && 
                (
                    EmissionLevel == other.EmissionLevel ||
                    EmissionLevel != null &&
                    EmissionLevel.Equals(other.EmissionLevel)
                ) && 
                (
                    EmissionsExtensionG == other.EmissionsExtensionG ||
                    EmissionsExtensionG != null &&
                    EmissionsExtensionG.Equals(other.EmissionsExtensionG)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EmissionClassificationEuro != null)
                    hashCode = hashCode * 59 + EmissionClassificationEuro.GetHashCode();
                    if (EmissionClassificationOther != null)
                    hashCode = hashCode * 59 + EmissionClassificationOther.GetHashCode();
                    if (EmissionLevel != null)
                    hashCode = hashCode * 59 + EmissionLevel.GetHashCode();
                    if (EmissionsExtensionG != null)
                    hashCode = hashCode * 59 + EmissionsExtensionG.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Emissions left, Emissions right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Emissions left, Emissions right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
