/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PayloadPublicationG : IEquatable<PayloadPublicationG>
    {
        /// <summary>
        /// Gets or Sets VersionG
        /// </summary>
        [DataMember(Name="versionG", EmitDefaultValue=false)]
        public string VersionG { get; set; } = "3.5";

        /// <summary>
        /// Gets or Sets ModelBaseVersionG
        /// </summary>
        [Required]
        [DataMember(Name="modelBaseVersionG", EmitDefaultValue=false)]
        public string ModelBaseVersionG { get; set; } = "3";

        /// <summary>
        /// Gets or Sets ExtensionNameG
        /// </summary>
        [DataMember(Name="extensionNameG", EmitDefaultValue=false)]
        public string ExtensionNameG { get; set; }

        /// <summary>
        /// Gets or Sets ExtensionVersionG
        /// </summary>
        [DataMember(Name="extensionVersionG", EmitDefaultValue=false)]
        public string ExtensionVersionG { get; set; }

        /// <summary>
        /// Gets or Sets ProfileNameG
        /// </summary>
        [DataMember(Name="profileNameG", EmitDefaultValue=false)]
        public string ProfileNameG { get; set; }

        /// <summary>
        /// Gets or Sets ProfileVersionG
        /// </summary>
        [DataMember(Name="profileVersionG", EmitDefaultValue=false)]
        public string ProfileVersionG { get; set; }

        /// <summary>
        /// Gets or Sets SitSituationPublication
        /// </summary>
        [DataMember(Name="sitSituationPublication", EmitDefaultValue=false)]
        public SituationPublication SitSituationPublication { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayloadPublicationG {\n");
            sb.Append("  VersionG: ").Append(VersionG).Append("\n");
            sb.Append("  ModelBaseVersionG: ").Append(ModelBaseVersionG).Append("\n");
            sb.Append("  ExtensionNameG: ").Append(ExtensionNameG).Append("\n");
            sb.Append("  ExtensionVersionG: ").Append(ExtensionVersionG).Append("\n");
            sb.Append("  ProfileNameG: ").Append(ProfileNameG).Append("\n");
            sb.Append("  ProfileVersionG: ").Append(ProfileVersionG).Append("\n");
            sb.Append("  SitSituationPublication: ").Append(SitSituationPublication).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PayloadPublicationG)obj);
        }

        /// <summary>
        /// Returns true if PayloadPublicationG instances are equal
        /// </summary>
        /// <param name="other">Instance of PayloadPublicationG to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayloadPublicationG other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VersionG == other.VersionG ||
                    VersionG != null &&
                    VersionG.Equals(other.VersionG)
                ) && 
                (
                    ModelBaseVersionG == other.ModelBaseVersionG ||
                    ModelBaseVersionG != null &&
                    ModelBaseVersionG.Equals(other.ModelBaseVersionG)
                ) && 
                (
                    ExtensionNameG == other.ExtensionNameG ||
                    ExtensionNameG != null &&
                    ExtensionNameG.Equals(other.ExtensionNameG)
                ) && 
                (
                    ExtensionVersionG == other.ExtensionVersionG ||
                    ExtensionVersionG != null &&
                    ExtensionVersionG.Equals(other.ExtensionVersionG)
                ) && 
                (
                    ProfileNameG == other.ProfileNameG ||
                    ProfileNameG != null &&
                    ProfileNameG.Equals(other.ProfileNameG)
                ) && 
                (
                    ProfileVersionG == other.ProfileVersionG ||
                    ProfileVersionG != null &&
                    ProfileVersionG.Equals(other.ProfileVersionG)
                ) && 
                (
                    SitSituationPublication == other.SitSituationPublication ||
                    SitSituationPublication != null &&
                    SitSituationPublication.Equals(other.SitSituationPublication)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VersionG != null)
                    hashCode = hashCode * 59 + VersionG.GetHashCode();
                    if (ModelBaseVersionG != null)
                    hashCode = hashCode * 59 + ModelBaseVersionG.GetHashCode();
                    if (ExtensionNameG != null)
                    hashCode = hashCode * 59 + ExtensionNameG.GetHashCode();
                    if (ExtensionVersionG != null)
                    hashCode = hashCode * 59 + ExtensionVersionG.GetHashCode();
                    if (ProfileNameG != null)
                    hashCode = hashCode * 59 + ProfileNameG.GetHashCode();
                    if (ProfileVersionG != null)
                    hashCode = hashCode * 59 + ProfileVersionG.GetHashCode();
                    if (SitSituationPublication != null)
                    hashCode = hashCode * 59 + SitSituationPublication.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PayloadPublicationG left, PayloadPublicationG right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PayloadPublicationG left, PayloadPublicationG right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
