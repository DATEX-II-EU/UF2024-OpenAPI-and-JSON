/*
 * DATEX II Snapshot Pull API
 *
 * This is DATEX II Snapshot PULL API returning PayloadPublication.
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: you@your-company.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Agent : IEquatable<Agent>
    {
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [MaxLength(1024)]
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [MaxLength(1024)]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceID
        /// </summary>
        [MaxLength(1024)]
        [DataMember(Name="referenceID", EmitDefaultValue=false)]
        public string ReferenceID { get; set; }

        /// <summary>
        /// Gets or Sets ServiceURL
        /// </summary>
        [MaxLength(1024)]
        [DataMember(Name="serviceURL", EmitDefaultValue=false)]
        public string ServiceURL { get; set; }

        /// <summary>
        /// Gets or Sets InternationalIdentifier
        /// </summary>
        [DataMember(Name="internationalIdentifier", EmitDefaultValue=false)]
        public InternationalIdentifier InternationalIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets AgentExtensionG
        /// </summary>
        [DataMember(Name="agentExtensionG", EmitDefaultValue=false)]
        public Dictionary<string, Object> AgentExtensionG { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Agent {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ReferenceID: ").Append(ReferenceID).Append("\n");
            sb.Append("  ServiceURL: ").Append(ServiceURL).Append("\n");
            sb.Append("  InternationalIdentifier: ").Append(InternationalIdentifier).Append("\n");
            sb.Append("  AgentExtensionG: ").Append(AgentExtensionG).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Agent)obj);
        }

        /// <summary>
        /// Returns true if Agent instances are equal
        /// </summary>
        /// <param name="other">Instance of Agent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Agent other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ReferenceID == other.ReferenceID ||
                    ReferenceID != null &&
                    ReferenceID.Equals(other.ReferenceID)
                ) && 
                (
                    ServiceURL == other.ServiceURL ||
                    ServiceURL != null &&
                    ServiceURL.Equals(other.ServiceURL)
                ) && 
                (
                    InternationalIdentifier == other.InternationalIdentifier ||
                    InternationalIdentifier != null &&
                    InternationalIdentifier.Equals(other.InternationalIdentifier)
                ) && 
                (
                    AgentExtensionG == other.AgentExtensionG ||
                    AgentExtensionG != null &&
                    other.AgentExtensionG != null &&
                    AgentExtensionG.SequenceEqual(other.AgentExtensionG)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ReferenceID != null)
                    hashCode = hashCode * 59 + ReferenceID.GetHashCode();
                    if (ServiceURL != null)
                    hashCode = hashCode * 59 + ServiceURL.GetHashCode();
                    if (InternationalIdentifier != null)
                    hashCode = hashCode * 59 + InternationalIdentifier.GetHashCode();
                    if (AgentExtensionG != null)
                    hashCode = hashCode * 59 + AgentExtensionG.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Agent left, Agent right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Agent left, Agent right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
