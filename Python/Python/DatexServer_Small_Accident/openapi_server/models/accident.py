from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.accident_cause_enum_g import AccidentCauseEnumG
from openapi_server.models.accident_type_enum_g import AccidentTypeEnumG
from openapi_server.models.collision_type_enum_g import CollisionTypeEnumG
from openapi_server.models.group_of_people_involved import GroupOfPeopleInvolved
from openapi_server.models.group_of_vehicles_involved import GroupOfVehiclesInvolved
from openapi_server.models.location_reference_g import LocationReferenceG
from openapi_server.models.probability_of_occurrence_enum_g import ProbabilityOfOccurrenceEnumG
from openapi_server.models.validity import Validity
from openapi_server.models.vehicle import Vehicle
from openapi_server import util

from openapi_server.models.accident_cause_enum_g import AccidentCauseEnumG  # noqa: E501
from openapi_server.models.accident_type_enum_g import AccidentTypeEnumG  # noqa: E501
from openapi_server.models.collision_type_enum_g import CollisionTypeEnumG  # noqa: E501
from openapi_server.models.group_of_people_involved import GroupOfPeopleInvolved  # noqa: E501
from openapi_server.models.group_of_vehicles_involved import GroupOfVehiclesInvolved  # noqa: E501
from openapi_server.models.location_reference_g import LocationReferenceG  # noqa: E501
from openapi_server.models.probability_of_occurrence_enum_g import ProbabilityOfOccurrenceEnumG  # noqa: E501
from openapi_server.models.validity import Validity  # noqa: E501
from openapi_server.models.vehicle import Vehicle  # noqa: E501

class Accident(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id_g=None, version_g=None, situation_record_creation_time=None, situation_record_version_time=None, probability_of_occurrence=None, accident_cause=None, accident_type=None, collision_type=None, total_number_of_people_involved=None, total_number_of_vehicles_involved=None, validity=None, location_reference=None, vehicle_involved=None, group_of_vehicles_involved=None, group_of_people_involved=None, situation_record_extension_g=None, traffic_element_extension_g=None, accident_extension_g=None):  # noqa: E501
        """Accident - a model defined in OpenAPI

        :param id_g: The id_g of this Accident.  # noqa: E501
        :type id_g: str
        :param version_g: The version_g of this Accident.  # noqa: E501
        :type version_g: str
        :param situation_record_creation_time: The situation_record_creation_time of this Accident.  # noqa: E501
        :type situation_record_creation_time: datetime
        :param situation_record_version_time: The situation_record_version_time of this Accident.  # noqa: E501
        :type situation_record_version_time: datetime
        :param probability_of_occurrence: The probability_of_occurrence of this Accident.  # noqa: E501
        :type probability_of_occurrence: ProbabilityOfOccurrenceEnumG
        :param accident_cause: The accident_cause of this Accident.  # noqa: E501
        :type accident_cause: AccidentCauseEnumG
        :param accident_type: The accident_type of this Accident.  # noqa: E501
        :type accident_type: List[AccidentTypeEnumG]
        :param collision_type: The collision_type of this Accident.  # noqa: E501
        :type collision_type: CollisionTypeEnumG
        :param total_number_of_people_involved: The total_number_of_people_involved of this Accident.  # noqa: E501
        :type total_number_of_people_involved: int
        :param total_number_of_vehicles_involved: The total_number_of_vehicles_involved of this Accident.  # noqa: E501
        :type total_number_of_vehicles_involved: int
        :param validity: The validity of this Accident.  # noqa: E501
        :type validity: Validity
        :param location_reference: The location_reference of this Accident.  # noqa: E501
        :type location_reference: LocationReferenceG
        :param vehicle_involved: The vehicle_involved of this Accident.  # noqa: E501
        :type vehicle_involved: List[Vehicle]
        :param group_of_vehicles_involved: The group_of_vehicles_involved of this Accident.  # noqa: E501
        :type group_of_vehicles_involved: List[GroupOfVehiclesInvolved]
        :param group_of_people_involved: The group_of_people_involved of this Accident.  # noqa: E501
        :type group_of_people_involved: List[GroupOfPeopleInvolved]
        :param situation_record_extension_g: The situation_record_extension_g of this Accident.  # noqa: E501
        :type situation_record_extension_g: Dict[str, object]
        :param traffic_element_extension_g: The traffic_element_extension_g of this Accident.  # noqa: E501
        :type traffic_element_extension_g: Dict[str, object]
        :param accident_extension_g: The accident_extension_g of this Accident.  # noqa: E501
        :type accident_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'id_g': str,
            'version_g': str,
            'situation_record_creation_time': datetime,
            'situation_record_version_time': datetime,
            'probability_of_occurrence': ProbabilityOfOccurrenceEnumG,
            'accident_cause': AccidentCauseEnumG,
            'accident_type': List[AccidentTypeEnumG],
            'collision_type': CollisionTypeEnumG,
            'total_number_of_people_involved': int,
            'total_number_of_vehicles_involved': int,
            'validity': Validity,
            'location_reference': LocationReferenceG,
            'vehicle_involved': List[Vehicle],
            'group_of_vehicles_involved': List[GroupOfVehiclesInvolved],
            'group_of_people_involved': List[GroupOfPeopleInvolved],
            'situation_record_extension_g': Dict[str, object],
            'traffic_element_extension_g': Dict[str, object],
            'accident_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'id_g': 'idG',
            'version_g': 'versionG',
            'situation_record_creation_time': 'situationRecordCreationTime',
            'situation_record_version_time': 'situationRecordVersionTime',
            'probability_of_occurrence': 'probabilityOfOccurrence',
            'accident_cause': 'accidentCause',
            'accident_type': 'accidentType',
            'collision_type': 'collisionType',
            'total_number_of_people_involved': 'totalNumberOfPeopleInvolved',
            'total_number_of_vehicles_involved': 'totalNumberOfVehiclesInvolved',
            'validity': 'validity',
            'location_reference': 'locationReference',
            'vehicle_involved': 'vehicleInvolved',
            'group_of_vehicles_involved': 'groupOfVehiclesInvolved',
            'group_of_people_involved': 'groupOfPeopleInvolved',
            'situation_record_extension_g': 'situationRecordExtensionG',
            'traffic_element_extension_g': 'trafficElementExtensionG',
            'accident_extension_g': 'accidentExtensionG'
        }

        self._id_g = id_g
        self._version_g = version_g
        self._situation_record_creation_time = situation_record_creation_time
        self._situation_record_version_time = situation_record_version_time
        self._probability_of_occurrence = probability_of_occurrence
        self._accident_cause = accident_cause
        self._accident_type = accident_type
        self._collision_type = collision_type
        self._total_number_of_people_involved = total_number_of_people_involved
        self._total_number_of_vehicles_involved = total_number_of_vehicles_involved
        self._validity = validity
        self._location_reference = location_reference
        self._vehicle_involved = vehicle_involved
        self._group_of_vehicles_involved = group_of_vehicles_involved
        self._group_of_people_involved = group_of_people_involved
        self._situation_record_extension_g = situation_record_extension_g
        self._traffic_element_extension_g = traffic_element_extension_g
        self._accident_extension_g = accident_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'Accident':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Accident of this Accident.  # noqa: E501
        :rtype: Accident
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_g(self) -> str:
        """Gets the id_g of this Accident.


        :return: The id_g of this Accident.
        :rtype: str
        """
        return self._id_g

    @id_g.setter
    def id_g(self, id_g: str):
        """Sets the id_g of this Accident.


        :param id_g: The id_g of this Accident.
        :type id_g: str
        """
        if id_g is None:
            raise ValueError("Invalid value for `id_g`, must not be `None`")  # noqa: E501

        self._id_g = id_g

    @property
    def version_g(self) -> str:
        """Gets the version_g of this Accident.


        :return: The version_g of this Accident.
        :rtype: str
        """
        return self._version_g

    @version_g.setter
    def version_g(self, version_g: str):
        """Sets the version_g of this Accident.


        :param version_g: The version_g of this Accident.
        :type version_g: str
        """
        if version_g is None:
            raise ValueError("Invalid value for `version_g`, must not be `None`")  # noqa: E501

        self._version_g = version_g

    @property
    def situation_record_creation_time(self) -> datetime:
        """Gets the situation_record_creation_time of this Accident.


        :return: The situation_record_creation_time of this Accident.
        :rtype: datetime
        """
        return self._situation_record_creation_time

    @situation_record_creation_time.setter
    def situation_record_creation_time(self, situation_record_creation_time: datetime):
        """Sets the situation_record_creation_time of this Accident.


        :param situation_record_creation_time: The situation_record_creation_time of this Accident.
        :type situation_record_creation_time: datetime
        """
        if situation_record_creation_time is None:
            raise ValueError("Invalid value for `situation_record_creation_time`, must not be `None`")  # noqa: E501

        self._situation_record_creation_time = situation_record_creation_time

    @property
    def situation_record_version_time(self) -> datetime:
        """Gets the situation_record_version_time of this Accident.


        :return: The situation_record_version_time of this Accident.
        :rtype: datetime
        """
        return self._situation_record_version_time

    @situation_record_version_time.setter
    def situation_record_version_time(self, situation_record_version_time: datetime):
        """Sets the situation_record_version_time of this Accident.


        :param situation_record_version_time: The situation_record_version_time of this Accident.
        :type situation_record_version_time: datetime
        """
        if situation_record_version_time is None:
            raise ValueError("Invalid value for `situation_record_version_time`, must not be `None`")  # noqa: E501

        self._situation_record_version_time = situation_record_version_time

    @property
    def probability_of_occurrence(self) -> ProbabilityOfOccurrenceEnumG:
        """Gets the probability_of_occurrence of this Accident.


        :return: The probability_of_occurrence of this Accident.
        :rtype: ProbabilityOfOccurrenceEnumG
        """
        return self._probability_of_occurrence

    @probability_of_occurrence.setter
    def probability_of_occurrence(self, probability_of_occurrence: ProbabilityOfOccurrenceEnumG):
        """Sets the probability_of_occurrence of this Accident.


        :param probability_of_occurrence: The probability_of_occurrence of this Accident.
        :type probability_of_occurrence: ProbabilityOfOccurrenceEnumG
        """
        if probability_of_occurrence is None:
            raise ValueError("Invalid value for `probability_of_occurrence`, must not be `None`")  # noqa: E501

        self._probability_of_occurrence = probability_of_occurrence

    @property
    def accident_cause(self) -> AccidentCauseEnumG:
        """Gets the accident_cause of this Accident.


        :return: The accident_cause of this Accident.
        :rtype: AccidentCauseEnumG
        """
        return self._accident_cause

    @accident_cause.setter
    def accident_cause(self, accident_cause: AccidentCauseEnumG):
        """Sets the accident_cause of this Accident.


        :param accident_cause: The accident_cause of this Accident.
        :type accident_cause: AccidentCauseEnumG
        """

        self._accident_cause = accident_cause

    @property
    def accident_type(self) -> List[AccidentTypeEnumG]:
        """Gets the accident_type of this Accident.


        :return: The accident_type of this Accident.
        :rtype: List[AccidentTypeEnumG]
        """
        return self._accident_type

    @accident_type.setter
    def accident_type(self, accident_type: List[AccidentTypeEnumG]):
        """Sets the accident_type of this Accident.


        :param accident_type: The accident_type of this Accident.
        :type accident_type: List[AccidentTypeEnumG]
        """
        if accident_type is None:
            raise ValueError("Invalid value for `accident_type`, must not be `None`")  # noqa: E501
        if accident_type is not None and len(accident_type) < 1:
            raise ValueError("Invalid value for `accident_type`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._accident_type = accident_type

    @property
    def collision_type(self) -> CollisionTypeEnumG:
        """Gets the collision_type of this Accident.


        :return: The collision_type of this Accident.
        :rtype: CollisionTypeEnumG
        """
        return self._collision_type

    @collision_type.setter
    def collision_type(self, collision_type: CollisionTypeEnumG):
        """Sets the collision_type of this Accident.


        :param collision_type: The collision_type of this Accident.
        :type collision_type: CollisionTypeEnumG
        """

        self._collision_type = collision_type

    @property
    def total_number_of_people_involved(self) -> int:
        """Gets the total_number_of_people_involved of this Accident.


        :return: The total_number_of_people_involved of this Accident.
        :rtype: int
        """
        return self._total_number_of_people_involved

    @total_number_of_people_involved.setter
    def total_number_of_people_involved(self, total_number_of_people_involved: int):
        """Sets the total_number_of_people_involved of this Accident.


        :param total_number_of_people_involved: The total_number_of_people_involved of this Accident.
        :type total_number_of_people_involved: int
        """
        if total_number_of_people_involved is not None and total_number_of_people_involved < 0:  # noqa: E501
            raise ValueError("Invalid value for `total_number_of_people_involved`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_number_of_people_involved = total_number_of_people_involved

    @property
    def total_number_of_vehicles_involved(self) -> int:
        """Gets the total_number_of_vehicles_involved of this Accident.


        :return: The total_number_of_vehicles_involved of this Accident.
        :rtype: int
        """
        return self._total_number_of_vehicles_involved

    @total_number_of_vehicles_involved.setter
    def total_number_of_vehicles_involved(self, total_number_of_vehicles_involved: int):
        """Sets the total_number_of_vehicles_involved of this Accident.


        :param total_number_of_vehicles_involved: The total_number_of_vehicles_involved of this Accident.
        :type total_number_of_vehicles_involved: int
        """
        if total_number_of_vehicles_involved is not None and total_number_of_vehicles_involved < 0:  # noqa: E501
            raise ValueError("Invalid value for `total_number_of_vehicles_involved`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_number_of_vehicles_involved = total_number_of_vehicles_involved

    @property
    def validity(self) -> Validity:
        """Gets the validity of this Accident.


        :return: The validity of this Accident.
        :rtype: Validity
        """
        return self._validity

    @validity.setter
    def validity(self, validity: Validity):
        """Sets the validity of this Accident.


        :param validity: The validity of this Accident.
        :type validity: Validity
        """
        if validity is None:
            raise ValueError("Invalid value for `validity`, must not be `None`")  # noqa: E501

        self._validity = validity

    @property
    def location_reference(self) -> LocationReferenceG:
        """Gets the location_reference of this Accident.


        :return: The location_reference of this Accident.
        :rtype: LocationReferenceG
        """
        return self._location_reference

    @location_reference.setter
    def location_reference(self, location_reference: LocationReferenceG):
        """Sets the location_reference of this Accident.


        :param location_reference: The location_reference of this Accident.
        :type location_reference: LocationReferenceG
        """
        if location_reference is None:
            raise ValueError("Invalid value for `location_reference`, must not be `None`")  # noqa: E501

        self._location_reference = location_reference

    @property
    def vehicle_involved(self) -> List[Vehicle]:
        """Gets the vehicle_involved of this Accident.


        :return: The vehicle_involved of this Accident.
        :rtype: List[Vehicle]
        """
        return self._vehicle_involved

    @vehicle_involved.setter
    def vehicle_involved(self, vehicle_involved: List[Vehicle]):
        """Sets the vehicle_involved of this Accident.


        :param vehicle_involved: The vehicle_involved of this Accident.
        :type vehicle_involved: List[Vehicle]
        """
        if vehicle_involved is not None and len(vehicle_involved) < 0:
            raise ValueError("Invalid value for `vehicle_involved`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._vehicle_involved = vehicle_involved

    @property
    def group_of_vehicles_involved(self) -> List[GroupOfVehiclesInvolved]:
        """Gets the group_of_vehicles_involved of this Accident.


        :return: The group_of_vehicles_involved of this Accident.
        :rtype: List[GroupOfVehiclesInvolved]
        """
        return self._group_of_vehicles_involved

    @group_of_vehicles_involved.setter
    def group_of_vehicles_involved(self, group_of_vehicles_involved: List[GroupOfVehiclesInvolved]):
        """Sets the group_of_vehicles_involved of this Accident.


        :param group_of_vehicles_involved: The group_of_vehicles_involved of this Accident.
        :type group_of_vehicles_involved: List[GroupOfVehiclesInvolved]
        """
        if group_of_vehicles_involved is not None and len(group_of_vehicles_involved) < 0:
            raise ValueError("Invalid value for `group_of_vehicles_involved`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._group_of_vehicles_involved = group_of_vehicles_involved

    @property
    def group_of_people_involved(self) -> List[GroupOfPeopleInvolved]:
        """Gets the group_of_people_involved of this Accident.


        :return: The group_of_people_involved of this Accident.
        :rtype: List[GroupOfPeopleInvolved]
        """
        return self._group_of_people_involved

    @group_of_people_involved.setter
    def group_of_people_involved(self, group_of_people_involved: List[GroupOfPeopleInvolved]):
        """Sets the group_of_people_involved of this Accident.


        :param group_of_people_involved: The group_of_people_involved of this Accident.
        :type group_of_people_involved: List[GroupOfPeopleInvolved]
        """
        if group_of_people_involved is not None and len(group_of_people_involved) < 0:
            raise ValueError("Invalid value for `group_of_people_involved`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._group_of_people_involved = group_of_people_involved

    @property
    def situation_record_extension_g(self) -> Dict[str, object]:
        """Gets the situation_record_extension_g of this Accident.


        :return: The situation_record_extension_g of this Accident.
        :rtype: Dict[str, object]
        """
        return self._situation_record_extension_g

    @situation_record_extension_g.setter
    def situation_record_extension_g(self, situation_record_extension_g: Dict[str, object]):
        """Sets the situation_record_extension_g of this Accident.


        :param situation_record_extension_g: The situation_record_extension_g of this Accident.
        :type situation_record_extension_g: Dict[str, object]
        """

        self._situation_record_extension_g = situation_record_extension_g

    @property
    def traffic_element_extension_g(self) -> Dict[str, object]:
        """Gets the traffic_element_extension_g of this Accident.


        :return: The traffic_element_extension_g of this Accident.
        :rtype: Dict[str, object]
        """
        return self._traffic_element_extension_g

    @traffic_element_extension_g.setter
    def traffic_element_extension_g(self, traffic_element_extension_g: Dict[str, object]):
        """Sets the traffic_element_extension_g of this Accident.


        :param traffic_element_extension_g: The traffic_element_extension_g of this Accident.
        :type traffic_element_extension_g: Dict[str, object]
        """

        self._traffic_element_extension_g = traffic_element_extension_g

    @property
    def accident_extension_g(self) -> Dict[str, object]:
        """Gets the accident_extension_g of this Accident.


        :return: The accident_extension_g of this Accident.
        :rtype: Dict[str, object]
        """
        return self._accident_extension_g

    @accident_extension_g.setter
    def accident_extension_g(self, accident_extension_g: Dict[str, object]):
        """Sets the accident_extension_g of this Accident.


        :param accident_extension_g: The accident_extension_g of this Accident.
        :type accident_extension_g: Dict[str, object]
        """

        self._accident_extension_g = accident_extension_g
