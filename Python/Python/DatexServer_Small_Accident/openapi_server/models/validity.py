from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.overall_period import OverallPeriod
from openapi_server.models.validity_status_enum_g import ValidityStatusEnumG
from openapi_server import util

from openapi_server.models.overall_period import OverallPeriod  # noqa: E501
from openapi_server.models.validity_status_enum_g import ValidityStatusEnumG  # noqa: E501

class Validity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, validity_status=None, validity_time_specification=None, validity_extension_g=None):  # noqa: E501
        """Validity - a model defined in OpenAPI

        :param validity_status: The validity_status of this Validity.  # noqa: E501
        :type validity_status: ValidityStatusEnumG
        :param validity_time_specification: The validity_time_specification of this Validity.  # noqa: E501
        :type validity_time_specification: OverallPeriod
        :param validity_extension_g: The validity_extension_g of this Validity.  # noqa: E501
        :type validity_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'validity_status': ValidityStatusEnumG,
            'validity_time_specification': OverallPeriod,
            'validity_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'validity_status': 'validityStatus',
            'validity_time_specification': 'validityTimeSpecification',
            'validity_extension_g': 'validityExtensionG'
        }

        self._validity_status = validity_status
        self._validity_time_specification = validity_time_specification
        self._validity_extension_g = validity_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'Validity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Validity of this Validity.  # noqa: E501
        :rtype: Validity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def validity_status(self) -> ValidityStatusEnumG:
        """Gets the validity_status of this Validity.


        :return: The validity_status of this Validity.
        :rtype: ValidityStatusEnumG
        """
        return self._validity_status

    @validity_status.setter
    def validity_status(self, validity_status: ValidityStatusEnumG):
        """Sets the validity_status of this Validity.


        :param validity_status: The validity_status of this Validity.
        :type validity_status: ValidityStatusEnumG
        """
        if validity_status is None:
            raise ValueError("Invalid value for `validity_status`, must not be `None`")  # noqa: E501

        self._validity_status = validity_status

    @property
    def validity_time_specification(self) -> OverallPeriod:
        """Gets the validity_time_specification of this Validity.


        :return: The validity_time_specification of this Validity.
        :rtype: OverallPeriod
        """
        return self._validity_time_specification

    @validity_time_specification.setter
    def validity_time_specification(self, validity_time_specification: OverallPeriod):
        """Sets the validity_time_specification of this Validity.


        :param validity_time_specification: The validity_time_specification of this Validity.
        :type validity_time_specification: OverallPeriod
        """
        if validity_time_specification is None:
            raise ValueError("Invalid value for `validity_time_specification`, must not be `None`")  # noqa: E501

        self._validity_time_specification = validity_time_specification

    @property
    def validity_extension_g(self) -> Dict[str, object]:
        """Gets the validity_extension_g of this Validity.


        :return: The validity_extension_g of this Validity.
        :rtype: Dict[str, object]
        """
        return self._validity_extension_g

    @validity_extension_g.setter
    def validity_extension_g(self, validity_extension_g: Dict[str, object]):
        """Sets the validity_extension_g of this Validity.


        :param validity_extension_g: The validity_extension_g of this Validity.
        :type validity_extension_g: Dict[str, object]
        """

        self._validity_extension_g = validity_extension_g
