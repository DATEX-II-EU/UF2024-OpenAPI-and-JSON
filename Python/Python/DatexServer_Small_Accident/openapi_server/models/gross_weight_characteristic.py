from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.comparison_operator_enum_g import ComparisonOperatorEnumG
from openapi_server.models.weight_type_enum_g import WeightTypeEnumG
from openapi_server import util

from openapi_server.models.comparison_operator_enum_g import ComparisonOperatorEnumG  # noqa: E501
from openapi_server.models.weight_type_enum_g import WeightTypeEnumG  # noqa: E501

class GrossWeightCharacteristic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comparison_operator=None, gross_vehicle_weight=None, type_of_weight=None, gross_weight_characteristic_extension_g=None):  # noqa: E501
        """GrossWeightCharacteristic - a model defined in OpenAPI

        :param comparison_operator: The comparison_operator of this GrossWeightCharacteristic.  # noqa: E501
        :type comparison_operator: ComparisonOperatorEnumG
        :param gross_vehicle_weight: The gross_vehicle_weight of this GrossWeightCharacteristic.  # noqa: E501
        :type gross_vehicle_weight: float
        :param type_of_weight: The type_of_weight of this GrossWeightCharacteristic.  # noqa: E501
        :type type_of_weight: WeightTypeEnumG
        :param gross_weight_characteristic_extension_g: The gross_weight_characteristic_extension_g of this GrossWeightCharacteristic.  # noqa: E501
        :type gross_weight_characteristic_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'comparison_operator': ComparisonOperatorEnumG,
            'gross_vehicle_weight': float,
            'type_of_weight': WeightTypeEnumG,
            'gross_weight_characteristic_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'comparison_operator': 'comparisonOperator',
            'gross_vehicle_weight': 'grossVehicleWeight',
            'type_of_weight': 'typeOfWeight',
            'gross_weight_characteristic_extension_g': 'grossWeightCharacteristicExtensionG'
        }

        self._comparison_operator = comparison_operator
        self._gross_vehicle_weight = gross_vehicle_weight
        self._type_of_weight = type_of_weight
        self._gross_weight_characteristic_extension_g = gross_weight_characteristic_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'GrossWeightCharacteristic':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GrossWeightCharacteristic of this GrossWeightCharacteristic.  # noqa: E501
        :rtype: GrossWeightCharacteristic
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comparison_operator(self) -> ComparisonOperatorEnumG:
        """Gets the comparison_operator of this GrossWeightCharacteristic.


        :return: The comparison_operator of this GrossWeightCharacteristic.
        :rtype: ComparisonOperatorEnumG
        """
        return self._comparison_operator

    @comparison_operator.setter
    def comparison_operator(self, comparison_operator: ComparisonOperatorEnumG):
        """Sets the comparison_operator of this GrossWeightCharacteristic.


        :param comparison_operator: The comparison_operator of this GrossWeightCharacteristic.
        :type comparison_operator: ComparisonOperatorEnumG
        """
        if comparison_operator is None:
            raise ValueError("Invalid value for `comparison_operator`, must not be `None`")  # noqa: E501

        self._comparison_operator = comparison_operator

    @property
    def gross_vehicle_weight(self) -> float:
        """Gets the gross_vehicle_weight of this GrossWeightCharacteristic.


        :return: The gross_vehicle_weight of this GrossWeightCharacteristic.
        :rtype: float
        """
        return self._gross_vehicle_weight

    @gross_vehicle_weight.setter
    def gross_vehicle_weight(self, gross_vehicle_weight: float):
        """Sets the gross_vehicle_weight of this GrossWeightCharacteristic.


        :param gross_vehicle_weight: The gross_vehicle_weight of this GrossWeightCharacteristic.
        :type gross_vehicle_weight: float
        """
        if gross_vehicle_weight is None:
            raise ValueError("Invalid value for `gross_vehicle_weight`, must not be `None`")  # noqa: E501

        self._gross_vehicle_weight = gross_vehicle_weight

    @property
    def type_of_weight(self) -> WeightTypeEnumG:
        """Gets the type_of_weight of this GrossWeightCharacteristic.


        :return: The type_of_weight of this GrossWeightCharacteristic.
        :rtype: WeightTypeEnumG
        """
        return self._type_of_weight

    @type_of_weight.setter
    def type_of_weight(self, type_of_weight: WeightTypeEnumG):
        """Sets the type_of_weight of this GrossWeightCharacteristic.


        :param type_of_weight: The type_of_weight of this GrossWeightCharacteristic.
        :type type_of_weight: WeightTypeEnumG
        """
        if type_of_weight is None:
            raise ValueError("Invalid value for `type_of_weight`, must not be `None`")  # noqa: E501

        self._type_of_weight = type_of_weight

    @property
    def gross_weight_characteristic_extension_g(self) -> Dict[str, object]:
        """Gets the gross_weight_characteristic_extension_g of this GrossWeightCharacteristic.


        :return: The gross_weight_characteristic_extension_g of this GrossWeightCharacteristic.
        :rtype: Dict[str, object]
        """
        return self._gross_weight_characteristic_extension_g

    @gross_weight_characteristic_extension_g.setter
    def gross_weight_characteristic_extension_g(self, gross_weight_characteristic_extension_g: Dict[str, object]):
        """Sets the gross_weight_characteristic_extension_g of this GrossWeightCharacteristic.


        :param gross_weight_characteristic_extension_g: The gross_weight_characteristic_extension_g of this GrossWeightCharacteristic.
        :type gross_weight_characteristic_extension_g: Dict[str, object]
        """

        self._gross_weight_characteristic_extension_g = gross_weight_characteristic_extension_g
