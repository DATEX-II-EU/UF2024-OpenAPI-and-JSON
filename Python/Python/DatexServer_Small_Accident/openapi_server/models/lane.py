from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.lane_enum_g import LaneEnumG
from openapi_server import util

from openapi_server.models.lane_enum_g import LaneEnumG  # noqa: E501

class Lane(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lane_number=None, lane_usage=None, lane_extension_g=None):  # noqa: E501
        """Lane - a model defined in OpenAPI

        :param lane_number: The lane_number of this Lane.  # noqa: E501
        :type lane_number: int
        :param lane_usage: The lane_usage of this Lane.  # noqa: E501
        :type lane_usage: LaneEnumG
        :param lane_extension_g: The lane_extension_g of this Lane.  # noqa: E501
        :type lane_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'lane_number': int,
            'lane_usage': LaneEnumG,
            'lane_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'lane_number': 'laneNumber',
            'lane_usage': 'laneUsage',
            'lane_extension_g': 'laneExtensionG'
        }

        self._lane_number = lane_number
        self._lane_usage = lane_usage
        self._lane_extension_g = lane_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'Lane':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Lane of this Lane.  # noqa: E501
        :rtype: Lane
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lane_number(self) -> int:
        """Gets the lane_number of this Lane.


        :return: The lane_number of this Lane.
        :rtype: int
        """
        return self._lane_number

    @lane_number.setter
    def lane_number(self, lane_number: int):
        """Sets the lane_number of this Lane.


        :param lane_number: The lane_number of this Lane.
        :type lane_number: int
        """

        self._lane_number = lane_number

    @property
    def lane_usage(self) -> LaneEnumG:
        """Gets the lane_usage of this Lane.


        :return: The lane_usage of this Lane.
        :rtype: LaneEnumG
        """
        return self._lane_usage

    @lane_usage.setter
    def lane_usage(self, lane_usage: LaneEnumG):
        """Sets the lane_usage of this Lane.


        :param lane_usage: The lane_usage of this Lane.
        :type lane_usage: LaneEnumG
        """

        self._lane_usage = lane_usage

    @property
    def lane_extension_g(self) -> Dict[str, object]:
        """Gets the lane_extension_g of this Lane.


        :return: The lane_extension_g of this Lane.
        :rtype: Dict[str, object]
        """
        return self._lane_extension_g

    @lane_extension_g.setter
    def lane_extension_g(self, lane_extension_g: Dict[str, object]):
        """Sets the lane_extension_g of this Lane.


        :param lane_extension_g: The lane_extension_g of this Lane.
        :type lane_extension_g: Dict[str, object]
        """

        self._lane_extension_g = lane_extension_g
