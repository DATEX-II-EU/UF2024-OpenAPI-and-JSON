from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.reference import Reference
from openapi_server.models.validity import Validity
from openapi_server import util

from openapi_server.models.reference import Reference  # noqa: E501
from openapi_server.models.validity import Validity  # noqa: E501

class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, reference_id=None, subscription_start=None, subscription_end=None, delivey_frequency=None, validity=None, subscription_extension_g=None):  # noqa: E501
        """Subscription - a model defined in OpenAPI

        :param name: The name of this Subscription.  # noqa: E501
        :type name: str
        :param reference_id: The reference_id of this Subscription.  # noqa: E501
        :type reference_id: Reference
        :param subscription_start: The subscription_start of this Subscription.  # noqa: E501
        :type subscription_start: datetime
        :param subscription_end: The subscription_end of this Subscription.  # noqa: E501
        :type subscription_end: datetime
        :param delivey_frequency: The delivey_frequency of this Subscription.  # noqa: E501
        :type delivey_frequency: int
        :param validity: The validity of this Subscription.  # noqa: E501
        :type validity: Validity
        :param subscription_extension_g: The subscription_extension_g of this Subscription.  # noqa: E501
        :type subscription_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'name': str,
            'reference_id': Reference,
            'subscription_start': datetime,
            'subscription_end': datetime,
            'delivey_frequency': int,
            'validity': Validity,
            'subscription_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'name': 'name',
            'reference_id': 'referenceID',
            'subscription_start': 'subscriptionStart',
            'subscription_end': 'subscriptionEnd',
            'delivey_frequency': 'deliveyFrequency',
            'validity': 'validity',
            'subscription_extension_g': 'subscriptionExtensionG'
        }

        self._name = name
        self._reference_id = reference_id
        self._subscription_start = subscription_start
        self._subscription_end = subscription_end
        self._delivey_frequency = delivey_frequency
        self._validity = validity
        self._subscription_extension_g = subscription_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Subscription of this Subscription.  # noqa: E501
        :rtype: Subscription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Subscription.


        :return: The name of this Subscription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Subscription.


        :param name: The name of this Subscription.
        :type name: str
        """
        if name is not None and len(name) > 1024:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `1024`")  # noqa: E501

        self._name = name

    @property
    def reference_id(self) -> Reference:
        """Gets the reference_id of this Subscription.


        :return: The reference_id of this Subscription.
        :rtype: Reference
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id: Reference):
        """Sets the reference_id of this Subscription.


        :param reference_id: The reference_id of this Subscription.
        :type reference_id: Reference
        """

        self._reference_id = reference_id

    @property
    def subscription_start(self) -> datetime:
        """Gets the subscription_start of this Subscription.


        :return: The subscription_start of this Subscription.
        :rtype: datetime
        """
        return self._subscription_start

    @subscription_start.setter
    def subscription_start(self, subscription_start: datetime):
        """Sets the subscription_start of this Subscription.


        :param subscription_start: The subscription_start of this Subscription.
        :type subscription_start: datetime
        """

        self._subscription_start = subscription_start

    @property
    def subscription_end(self) -> datetime:
        """Gets the subscription_end of this Subscription.


        :return: The subscription_end of this Subscription.
        :rtype: datetime
        """
        return self._subscription_end

    @subscription_end.setter
    def subscription_end(self, subscription_end: datetime):
        """Sets the subscription_end of this Subscription.


        :param subscription_end: The subscription_end of this Subscription.
        :type subscription_end: datetime
        """

        self._subscription_end = subscription_end

    @property
    def delivey_frequency(self) -> int:
        """Gets the delivey_frequency of this Subscription.


        :return: The delivey_frequency of this Subscription.
        :rtype: int
        """
        return self._delivey_frequency

    @delivey_frequency.setter
    def delivey_frequency(self, delivey_frequency: int):
        """Sets the delivey_frequency of this Subscription.


        :param delivey_frequency: The delivey_frequency of this Subscription.
        :type delivey_frequency: int
        """
        if delivey_frequency is not None and delivey_frequency < 0:  # noqa: E501
            raise ValueError("Invalid value for `delivey_frequency`, must be a value greater than or equal to `0`")  # noqa: E501

        self._delivey_frequency = delivey_frequency

    @property
    def validity(self) -> Validity:
        """Gets the validity of this Subscription.


        :return: The validity of this Subscription.
        :rtype: Validity
        """
        return self._validity

    @validity.setter
    def validity(self, validity: Validity):
        """Sets the validity of this Subscription.


        :param validity: The validity of this Subscription.
        :type validity: Validity
        """

        self._validity = validity

    @property
    def subscription_extension_g(self) -> Dict[str, object]:
        """Gets the subscription_extension_g of this Subscription.


        :return: The subscription_extension_g of this Subscription.
        :rtype: Dict[str, object]
        """
        return self._subscription_extension_g

    @subscription_extension_g.setter
    def subscription_extension_g(self, subscription_extension_g: Dict[str, object]):
        """Sets the subscription_extension_g of this Subscription.


        :param subscription_extension_g: The subscription_extension_g of this Subscription.
        :type subscription_extension_g: Dict[str, object]
        """

        self._subscription_extension_g = subscription_extension_g
