from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.multilingual_string import MultilingualString
from openapi_server.models.named_area_type_enum_g import NamedAreaTypeEnumG
from openapi_server.models.subdivision_type_enum_g import SubdivisionTypeEnumG
from openapi_server import util

from openapi_server.models.multilingual_string import MultilingualString  # noqa: E501
from openapi_server.models.named_area_type_enum_g import NamedAreaTypeEnumG  # noqa: E501
from openapi_server.models.subdivision_type_enum_g import SubdivisionTypeEnumG  # noqa: E501

class IsoNamedArea(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, area_name=None, named_area_type=None, country=None, subdivision_type=None, subdivision_code=None, named_area_extension_g=None):  # noqa: E501
        """IsoNamedArea - a model defined in OpenAPI

        :param area_name: The area_name of this IsoNamedArea.  # noqa: E501
        :type area_name: MultilingualString
        :param named_area_type: The named_area_type of this IsoNamedArea.  # noqa: E501
        :type named_area_type: NamedAreaTypeEnumG
        :param country: The country of this IsoNamedArea.  # noqa: E501
        :type country: str
        :param subdivision_type: The subdivision_type of this IsoNamedArea.  # noqa: E501
        :type subdivision_type: SubdivisionTypeEnumG
        :param subdivision_code: The subdivision_code of this IsoNamedArea.  # noqa: E501
        :type subdivision_code: str
        :param named_area_extension_g: The named_area_extension_g of this IsoNamedArea.  # noqa: E501
        :type named_area_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'area_name': MultilingualString,
            'named_area_type': NamedAreaTypeEnumG,
            'country': str,
            'subdivision_type': SubdivisionTypeEnumG,
            'subdivision_code': str,
            'named_area_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'area_name': 'areaName',
            'named_area_type': 'namedAreaType',
            'country': 'country',
            'subdivision_type': 'subdivisionType',
            'subdivision_code': 'subdivisionCode',
            'named_area_extension_g': 'namedAreaExtensionG'
        }

        self._area_name = area_name
        self._named_area_type = named_area_type
        self._country = country
        self._subdivision_type = subdivision_type
        self._subdivision_code = subdivision_code
        self._named_area_extension_g = named_area_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'IsoNamedArea':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IsoNamedArea of this IsoNamedArea.  # noqa: E501
        :rtype: IsoNamedArea
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area_name(self) -> MultilingualString:
        """Gets the area_name of this IsoNamedArea.


        :return: The area_name of this IsoNamedArea.
        :rtype: MultilingualString
        """
        return self._area_name

    @area_name.setter
    def area_name(self, area_name: MultilingualString):
        """Sets the area_name of this IsoNamedArea.


        :param area_name: The area_name of this IsoNamedArea.
        :type area_name: MultilingualString
        """
        if area_name is None:
            raise ValueError("Invalid value for `area_name`, must not be `None`")  # noqa: E501

        self._area_name = area_name

    @property
    def named_area_type(self) -> NamedAreaTypeEnumG:
        """Gets the named_area_type of this IsoNamedArea.


        :return: The named_area_type of this IsoNamedArea.
        :rtype: NamedAreaTypeEnumG
        """
        return self._named_area_type

    @named_area_type.setter
    def named_area_type(self, named_area_type: NamedAreaTypeEnumG):
        """Sets the named_area_type of this IsoNamedArea.


        :param named_area_type: The named_area_type of this IsoNamedArea.
        :type named_area_type: NamedAreaTypeEnumG
        """

        self._named_area_type = named_area_type

    @property
    def country(self) -> str:
        """Gets the country of this IsoNamedArea.


        :return: The country of this IsoNamedArea.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this IsoNamedArea.


        :param country: The country of this IsoNamedArea.
        :type country: str
        """
        if country is not None and len(country) > 1024:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `1024`")  # noqa: E501

        self._country = country

    @property
    def subdivision_type(self) -> SubdivisionTypeEnumG:
        """Gets the subdivision_type of this IsoNamedArea.


        :return: The subdivision_type of this IsoNamedArea.
        :rtype: SubdivisionTypeEnumG
        """
        return self._subdivision_type

    @subdivision_type.setter
    def subdivision_type(self, subdivision_type: SubdivisionTypeEnumG):
        """Sets the subdivision_type of this IsoNamedArea.


        :param subdivision_type: The subdivision_type of this IsoNamedArea.
        :type subdivision_type: SubdivisionTypeEnumG
        """
        if subdivision_type is None:
            raise ValueError("Invalid value for `subdivision_type`, must not be `None`")  # noqa: E501

        self._subdivision_type = subdivision_type

    @property
    def subdivision_code(self) -> str:
        """Gets the subdivision_code of this IsoNamedArea.


        :return: The subdivision_code of this IsoNamedArea.
        :rtype: str
        """
        return self._subdivision_code

    @subdivision_code.setter
    def subdivision_code(self, subdivision_code: str):
        """Sets the subdivision_code of this IsoNamedArea.


        :param subdivision_code: The subdivision_code of this IsoNamedArea.
        :type subdivision_code: str
        """
        if subdivision_code is None:
            raise ValueError("Invalid value for `subdivision_code`, must not be `None`")  # noqa: E501
        if subdivision_code is not None and len(subdivision_code) > 1024:
            raise ValueError("Invalid value for `subdivision_code`, length must be less than or equal to `1024`")  # noqa: E501

        self._subdivision_code = subdivision_code

    @property
    def named_area_extension_g(self) -> Dict[str, object]:
        """Gets the named_area_extension_g of this IsoNamedArea.


        :return: The named_area_extension_g of this IsoNamedArea.
        :rtype: Dict[str, object]
        """
        return self._named_area_extension_g

    @named_area_extension_g.setter
    def named_area_extension_g(self, named_area_extension_g: Dict[str, object]):
        """Sets the named_area_extension_g of this IsoNamedArea.


        :param named_area_extension_g: The named_area_extension_g of this IsoNamedArea.
        :type named_area_extension_g: Dict[str, object]
        """

        self._named_area_extension_g = named_area_extension_g
