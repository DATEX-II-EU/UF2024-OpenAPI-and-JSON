from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.injury_status_type_enum_g import InjuryStatusTypeEnumG
from openapi_server.models.involvement_roles_enum_g import InvolvementRolesEnumG
from openapi_server.models.person_category_enum_g import PersonCategoryEnumG
from openapi_server import util

from openapi_server.models.injury_status_type_enum_g import InjuryStatusTypeEnumG  # noqa: E501
from openapi_server.models.involvement_roles_enum_g import InvolvementRolesEnumG  # noqa: E501
from openapi_server.models.person_category_enum_g import PersonCategoryEnumG  # noqa: E501

class GroupOfPeopleInvolved(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, number_of_people=None, injury_status_type=None, involvement_role=None, category_of_people_involved=None, group_of_people_involved_extension_g=None):  # noqa: E501
        """GroupOfPeopleInvolved - a model defined in OpenAPI

        :param number_of_people: The number_of_people of this GroupOfPeopleInvolved.  # noqa: E501
        :type number_of_people: int
        :param injury_status_type: The injury_status_type of this GroupOfPeopleInvolved.  # noqa: E501
        :type injury_status_type: InjuryStatusTypeEnumG
        :param involvement_role: The involvement_role of this GroupOfPeopleInvolved.  # noqa: E501
        :type involvement_role: InvolvementRolesEnumG
        :param category_of_people_involved: The category_of_people_involved of this GroupOfPeopleInvolved.  # noqa: E501
        :type category_of_people_involved: PersonCategoryEnumG
        :param group_of_people_involved_extension_g: The group_of_people_involved_extension_g of this GroupOfPeopleInvolved.  # noqa: E501
        :type group_of_people_involved_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'number_of_people': int,
            'injury_status_type': InjuryStatusTypeEnumG,
            'involvement_role': InvolvementRolesEnumG,
            'category_of_people_involved': PersonCategoryEnumG,
            'group_of_people_involved_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'number_of_people': 'numberOfPeople',
            'injury_status_type': 'injuryStatusType',
            'involvement_role': 'involvementRole',
            'category_of_people_involved': 'categoryOfPeopleInvolved',
            'group_of_people_involved_extension_g': 'groupOfPeopleInvolvedExtensionG'
        }

        self._number_of_people = number_of_people
        self._injury_status_type = injury_status_type
        self._involvement_role = involvement_role
        self._category_of_people_involved = category_of_people_involved
        self._group_of_people_involved_extension_g = group_of_people_involved_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'GroupOfPeopleInvolved':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GroupOfPeopleInvolved of this GroupOfPeopleInvolved.  # noqa: E501
        :rtype: GroupOfPeopleInvolved
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number_of_people(self) -> int:
        """Gets the number_of_people of this GroupOfPeopleInvolved.


        :return: The number_of_people of this GroupOfPeopleInvolved.
        :rtype: int
        """
        return self._number_of_people

    @number_of_people.setter
    def number_of_people(self, number_of_people: int):
        """Sets the number_of_people of this GroupOfPeopleInvolved.


        :param number_of_people: The number_of_people of this GroupOfPeopleInvolved.
        :type number_of_people: int
        """
        if number_of_people is not None and number_of_people < 0:  # noqa: E501
            raise ValueError("Invalid value for `number_of_people`, must be a value greater than or equal to `0`")  # noqa: E501

        self._number_of_people = number_of_people

    @property
    def injury_status_type(self) -> InjuryStatusTypeEnumG:
        """Gets the injury_status_type of this GroupOfPeopleInvolved.


        :return: The injury_status_type of this GroupOfPeopleInvolved.
        :rtype: InjuryStatusTypeEnumG
        """
        return self._injury_status_type

    @injury_status_type.setter
    def injury_status_type(self, injury_status_type: InjuryStatusTypeEnumG):
        """Sets the injury_status_type of this GroupOfPeopleInvolved.


        :param injury_status_type: The injury_status_type of this GroupOfPeopleInvolved.
        :type injury_status_type: InjuryStatusTypeEnumG
        """

        self._injury_status_type = injury_status_type

    @property
    def involvement_role(self) -> InvolvementRolesEnumG:
        """Gets the involvement_role of this GroupOfPeopleInvolved.


        :return: The involvement_role of this GroupOfPeopleInvolved.
        :rtype: InvolvementRolesEnumG
        """
        return self._involvement_role

    @involvement_role.setter
    def involvement_role(self, involvement_role: InvolvementRolesEnumG):
        """Sets the involvement_role of this GroupOfPeopleInvolved.


        :param involvement_role: The involvement_role of this GroupOfPeopleInvolved.
        :type involvement_role: InvolvementRolesEnumG
        """

        self._involvement_role = involvement_role

    @property
    def category_of_people_involved(self) -> PersonCategoryEnumG:
        """Gets the category_of_people_involved of this GroupOfPeopleInvolved.


        :return: The category_of_people_involved of this GroupOfPeopleInvolved.
        :rtype: PersonCategoryEnumG
        """
        return self._category_of_people_involved

    @category_of_people_involved.setter
    def category_of_people_involved(self, category_of_people_involved: PersonCategoryEnumG):
        """Sets the category_of_people_involved of this GroupOfPeopleInvolved.


        :param category_of_people_involved: The category_of_people_involved of this GroupOfPeopleInvolved.
        :type category_of_people_involved: PersonCategoryEnumG
        """

        self._category_of_people_involved = category_of_people_involved

    @property
    def group_of_people_involved_extension_g(self) -> Dict[str, object]:
        """Gets the group_of_people_involved_extension_g of this GroupOfPeopleInvolved.


        :return: The group_of_people_involved_extension_g of this GroupOfPeopleInvolved.
        :rtype: Dict[str, object]
        """
        return self._group_of_people_involved_extension_g

    @group_of_people_involved_extension_g.setter
    def group_of_people_involved_extension_g(self, group_of_people_involved_extension_g: Dict[str, object]):
        """Sets the group_of_people_involved_extension_g of this GroupOfPeopleInvolved.


        :param group_of_people_involved_extension_g: The group_of_people_involved_extension_g of this GroupOfPeopleInvolved.
        :type group_of_people_involved_extension_g: Dict[str, object]
        """

        self._group_of_people_involved_extension_g = group_of_people_involved_extension_g
