from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.comparison_operator_enum_g import ComparisonOperatorEnumG
from openapi_server import util

from openapi_server.models.comparison_operator_enum_g import ComparisonOperatorEnumG  # noqa: E501

class NumberOfAxlesCharacteristic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comparison_operator=None, number_of_axles=None, number_of_axles_characteristic_extension_g=None):  # noqa: E501
        """NumberOfAxlesCharacteristic - a model defined in OpenAPI

        :param comparison_operator: The comparison_operator of this NumberOfAxlesCharacteristic.  # noqa: E501
        :type comparison_operator: ComparisonOperatorEnumG
        :param number_of_axles: The number_of_axles of this NumberOfAxlesCharacteristic.  # noqa: E501
        :type number_of_axles: int
        :param number_of_axles_characteristic_extension_g: The number_of_axles_characteristic_extension_g of this NumberOfAxlesCharacteristic.  # noqa: E501
        :type number_of_axles_characteristic_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'comparison_operator': ComparisonOperatorEnumG,
            'number_of_axles': int,
            'number_of_axles_characteristic_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'comparison_operator': 'comparisonOperator',
            'number_of_axles': 'numberOfAxles',
            'number_of_axles_characteristic_extension_g': 'numberOfAxlesCharacteristicExtensionG'
        }

        self._comparison_operator = comparison_operator
        self._number_of_axles = number_of_axles
        self._number_of_axles_characteristic_extension_g = number_of_axles_characteristic_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'NumberOfAxlesCharacteristic':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NumberOfAxlesCharacteristic of this NumberOfAxlesCharacteristic.  # noqa: E501
        :rtype: NumberOfAxlesCharacteristic
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comparison_operator(self) -> ComparisonOperatorEnumG:
        """Gets the comparison_operator of this NumberOfAxlesCharacteristic.


        :return: The comparison_operator of this NumberOfAxlesCharacteristic.
        :rtype: ComparisonOperatorEnumG
        """
        return self._comparison_operator

    @comparison_operator.setter
    def comparison_operator(self, comparison_operator: ComparisonOperatorEnumG):
        """Sets the comparison_operator of this NumberOfAxlesCharacteristic.


        :param comparison_operator: The comparison_operator of this NumberOfAxlesCharacteristic.
        :type comparison_operator: ComparisonOperatorEnumG
        """
        if comparison_operator is None:
            raise ValueError("Invalid value for `comparison_operator`, must not be `None`")  # noqa: E501

        self._comparison_operator = comparison_operator

    @property
    def number_of_axles(self) -> int:
        """Gets the number_of_axles of this NumberOfAxlesCharacteristic.


        :return: The number_of_axles of this NumberOfAxlesCharacteristic.
        :rtype: int
        """
        return self._number_of_axles

    @number_of_axles.setter
    def number_of_axles(self, number_of_axles: int):
        """Sets the number_of_axles of this NumberOfAxlesCharacteristic.


        :param number_of_axles: The number_of_axles of this NumberOfAxlesCharacteristic.
        :type number_of_axles: int
        """
        if number_of_axles is None:
            raise ValueError("Invalid value for `number_of_axles`, must not be `None`")  # noqa: E501
        if number_of_axles is not None and number_of_axles < 0:  # noqa: E501
            raise ValueError("Invalid value for `number_of_axles`, must be a value greater than or equal to `0`")  # noqa: E501

        self._number_of_axles = number_of_axles

    @property
    def number_of_axles_characteristic_extension_g(self) -> Dict[str, object]:
        """Gets the number_of_axles_characteristic_extension_g of this NumberOfAxlesCharacteristic.


        :return: The number_of_axles_characteristic_extension_g of this NumberOfAxlesCharacteristic.
        :rtype: Dict[str, object]
        """
        return self._number_of_axles_characteristic_extension_g

    @number_of_axles_characteristic_extension_g.setter
    def number_of_axles_characteristic_extension_g(self, number_of_axles_characteristic_extension_g: Dict[str, object]):
        """Sets the number_of_axles_characteristic_extension_g of this NumberOfAxlesCharacteristic.


        :param number_of_axles_characteristic_extension_g: The number_of_axles_characteristic_extension_g of this NumberOfAxlesCharacteristic.
        :type number_of_axles_characteristic_extension_g: Dict[str, object]
        """

        self._number_of_axles_characteristic_extension_g = number_of_axles_characteristic_extension_g
