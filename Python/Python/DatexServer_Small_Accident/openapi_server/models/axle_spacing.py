from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class AxleSpacing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, axle_spacing=None, axle_spacing_sequence_identifier=None, axle_spacing_extension_g=None):  # noqa: E501
        """AxleSpacing - a model defined in OpenAPI

        :param axle_spacing: The axle_spacing of this AxleSpacing.  # noqa: E501
        :type axle_spacing: float
        :param axle_spacing_sequence_identifier: The axle_spacing_sequence_identifier of this AxleSpacing.  # noqa: E501
        :type axle_spacing_sequence_identifier: int
        :param axle_spacing_extension_g: The axle_spacing_extension_g of this AxleSpacing.  # noqa: E501
        :type axle_spacing_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'axle_spacing': float,
            'axle_spacing_sequence_identifier': int,
            'axle_spacing_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'axle_spacing': 'axleSpacing',
            'axle_spacing_sequence_identifier': 'axleSpacingSequenceIdentifier',
            'axle_spacing_extension_g': 'axleSpacingExtensionG'
        }

        self._axle_spacing = axle_spacing
        self._axle_spacing_sequence_identifier = axle_spacing_sequence_identifier
        self._axle_spacing_extension_g = axle_spacing_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'AxleSpacing':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AxleSpacing of this AxleSpacing.  # noqa: E501
        :rtype: AxleSpacing
        """
        return util.deserialize_model(dikt, cls)

    @property
    def axle_spacing(self) -> float:
        """Gets the axle_spacing of this AxleSpacing.


        :return: The axle_spacing of this AxleSpacing.
        :rtype: float
        """
        return self._axle_spacing

    @axle_spacing.setter
    def axle_spacing(self, axle_spacing: float):
        """Sets the axle_spacing of this AxleSpacing.


        :param axle_spacing: The axle_spacing of this AxleSpacing.
        :type axle_spacing: float
        """
        if axle_spacing is None:
            raise ValueError("Invalid value for `axle_spacing`, must not be `None`")  # noqa: E501

        self._axle_spacing = axle_spacing

    @property
    def axle_spacing_sequence_identifier(self) -> int:
        """Gets the axle_spacing_sequence_identifier of this AxleSpacing.


        :return: The axle_spacing_sequence_identifier of this AxleSpacing.
        :rtype: int
        """
        return self._axle_spacing_sequence_identifier

    @axle_spacing_sequence_identifier.setter
    def axle_spacing_sequence_identifier(self, axle_spacing_sequence_identifier: int):
        """Sets the axle_spacing_sequence_identifier of this AxleSpacing.


        :param axle_spacing_sequence_identifier: The axle_spacing_sequence_identifier of this AxleSpacing.
        :type axle_spacing_sequence_identifier: int
        """
        if axle_spacing_sequence_identifier is None:
            raise ValueError("Invalid value for `axle_spacing_sequence_identifier`, must not be `None`")  # noqa: E501
        if axle_spacing_sequence_identifier is not None and axle_spacing_sequence_identifier < 0:  # noqa: E501
            raise ValueError("Invalid value for `axle_spacing_sequence_identifier`, must be a value greater than or equal to `0`")  # noqa: E501

        self._axle_spacing_sequence_identifier = axle_spacing_sequence_identifier

    @property
    def axle_spacing_extension_g(self) -> Dict[str, object]:
        """Gets the axle_spacing_extension_g of this AxleSpacing.


        :return: The axle_spacing_extension_g of this AxleSpacing.
        :rtype: Dict[str, object]
        """
        return self._axle_spacing_extension_g

    @axle_spacing_extension_g.setter
    def axle_spacing_extension_g(self, axle_spacing_extension_g: Dict[str, object]):
        """Sets the axle_spacing_extension_g of this AxleSpacing.


        :param axle_spacing_extension_g: The axle_spacing_extension_g of this AxleSpacing.
        :type axle_spacing_extension_g: Dict[str, object]
        """

        self._axle_spacing_extension_g = axle_spacing_extension_g
