from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.header_information import HeaderInformation
from openapi_server.models.situation_record_g import SituationRecordG
from openapi_server import util

from openapi_server.models.header_information import HeaderInformation  # noqa: E501
from openapi_server.models.situation_record_g import SituationRecordG  # noqa: E501

class Situation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id_g=None, header_information=None, situation_record=None, situation_extension_g=None):  # noqa: E501
        """Situation - a model defined in OpenAPI

        :param id_g: The id_g of this Situation.  # noqa: E501
        :type id_g: str
        :param header_information: The header_information of this Situation.  # noqa: E501
        :type header_information: HeaderInformation
        :param situation_record: The situation_record of this Situation.  # noqa: E501
        :type situation_record: List[SituationRecordG]
        :param situation_extension_g: The situation_extension_g of this Situation.  # noqa: E501
        :type situation_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'id_g': str,
            'header_information': HeaderInformation,
            'situation_record': List[SituationRecordG],
            'situation_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'id_g': 'idG',
            'header_information': 'headerInformation',
            'situation_record': 'situationRecord',
            'situation_extension_g': 'situationExtensionG'
        }

        self._id_g = id_g
        self._header_information = header_information
        self._situation_record = situation_record
        self._situation_extension_g = situation_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'Situation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Situation of this Situation.  # noqa: E501
        :rtype: Situation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_g(self) -> str:
        """Gets the id_g of this Situation.


        :return: The id_g of this Situation.
        :rtype: str
        """
        return self._id_g

    @id_g.setter
    def id_g(self, id_g: str):
        """Sets the id_g of this Situation.


        :param id_g: The id_g of this Situation.
        :type id_g: str
        """
        if id_g is None:
            raise ValueError("Invalid value for `id_g`, must not be `None`")  # noqa: E501

        self._id_g = id_g

    @property
    def header_information(self) -> HeaderInformation:
        """Gets the header_information of this Situation.


        :return: The header_information of this Situation.
        :rtype: HeaderInformation
        """
        return self._header_information

    @header_information.setter
    def header_information(self, header_information: HeaderInformation):
        """Sets the header_information of this Situation.


        :param header_information: The header_information of this Situation.
        :type header_information: HeaderInformation
        """
        if header_information is None:
            raise ValueError("Invalid value for `header_information`, must not be `None`")  # noqa: E501

        self._header_information = header_information

    @property
    def situation_record(self) -> List[SituationRecordG]:
        """Gets the situation_record of this Situation.


        :return: The situation_record of this Situation.
        :rtype: List[SituationRecordG]
        """
        return self._situation_record

    @situation_record.setter
    def situation_record(self, situation_record: List[SituationRecordG]):
        """Sets the situation_record of this Situation.


        :param situation_record: The situation_record of this Situation.
        :type situation_record: List[SituationRecordG]
        """
        if situation_record is None:
            raise ValueError("Invalid value for `situation_record`, must not be `None`")  # noqa: E501
        if situation_record is not None and len(situation_record) < 1:
            raise ValueError("Invalid value for `situation_record`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._situation_record = situation_record

    @property
    def situation_extension_g(self) -> Dict[str, object]:
        """Gets the situation_extension_g of this Situation.


        :return: The situation_extension_g of this Situation.
        :rtype: Dict[str, object]
        """
        return self._situation_extension_g

    @situation_extension_g.setter
    def situation_extension_g(self, situation_extension_g: Dict[str, object]):
        """Sets the situation_extension_g of this Situation.


        :param situation_extension_g: The situation_extension_g of this Situation.
        :type situation_extension_g: Dict[str, object]
        """

        self._situation_extension_g = situation_extension_g
