from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.multilingual_string import MultilingualString
from openapi_server import util

from openapi_server.models.multilingual_string import MultilingualString  # noqa: E501

class AlertCLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_c_location_name=None, specific_location=None, alert_c_location_extension_g=None):  # noqa: E501
        """AlertCLocation - a model defined in OpenAPI

        :param alert_c_location_name: The alert_c_location_name of this AlertCLocation.  # noqa: E501
        :type alert_c_location_name: MultilingualString
        :param specific_location: The specific_location of this AlertCLocation.  # noqa: E501
        :type specific_location: int
        :param alert_c_location_extension_g: The alert_c_location_extension_g of this AlertCLocation.  # noqa: E501
        :type alert_c_location_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'alert_c_location_name': MultilingualString,
            'specific_location': int,
            'alert_c_location_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'alert_c_location_name': 'alertCLocationName',
            'specific_location': 'specificLocation',
            'alert_c_location_extension_g': 'alertCLocationExtensionG'
        }

        self._alert_c_location_name = alert_c_location_name
        self._specific_location = specific_location
        self._alert_c_location_extension_g = alert_c_location_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'AlertCLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AlertCLocation of this AlertCLocation.  # noqa: E501
        :rtype: AlertCLocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_c_location_name(self) -> MultilingualString:
        """Gets the alert_c_location_name of this AlertCLocation.


        :return: The alert_c_location_name of this AlertCLocation.
        :rtype: MultilingualString
        """
        return self._alert_c_location_name

    @alert_c_location_name.setter
    def alert_c_location_name(self, alert_c_location_name: MultilingualString):
        """Sets the alert_c_location_name of this AlertCLocation.


        :param alert_c_location_name: The alert_c_location_name of this AlertCLocation.
        :type alert_c_location_name: MultilingualString
        """

        self._alert_c_location_name = alert_c_location_name

    @property
    def specific_location(self) -> int:
        """Gets the specific_location of this AlertCLocation.


        :return: The specific_location of this AlertCLocation.
        :rtype: int
        """
        return self._specific_location

    @specific_location.setter
    def specific_location(self, specific_location: int):
        """Sets the specific_location of this AlertCLocation.


        :param specific_location: The specific_location of this AlertCLocation.
        :type specific_location: int
        """
        if specific_location is None:
            raise ValueError("Invalid value for `specific_location`, must not be `None`")  # noqa: E501
        if specific_location is not None and specific_location < 0:  # noqa: E501
            raise ValueError("Invalid value for `specific_location`, must be a value greater than or equal to `0`")  # noqa: E501

        self._specific_location = specific_location

    @property
    def alert_c_location_extension_g(self) -> Dict[str, object]:
        """Gets the alert_c_location_extension_g of this AlertCLocation.


        :return: The alert_c_location_extension_g of this AlertCLocation.
        :rtype: Dict[str, object]
        """
        return self._alert_c_location_extension_g

    @alert_c_location_extension_g.setter
    def alert_c_location_extension_g(self, alert_c_location_extension_g: Dict[str, object]):
        """Sets the alert_c_location_extension_g of this AlertCLocation.


        :param alert_c_location_extension_g: The alert_c_location_extension_g of this AlertCLocation.
        :type alert_c_location_extension_g: Dict[str, object]
        """

        self._alert_c_location_extension_g = alert_c_location_extension_g
