from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.height_coordinate import HeightCoordinate
from openapi_server.models.position_accuracy import PositionAccuracy
from openapi_server.models.position_confidence_ellipse import PositionConfidenceEllipse
from openapi_server import util

from openapi_server.models.height_coordinate import HeightCoordinate  # noqa: E501
from openapi_server.models.position_accuracy import PositionAccuracy  # noqa: E501
from openapi_server.models.position_confidence_ellipse import PositionConfidenceEllipse  # noqa: E501

class PointCoordinates(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, latitude=None, longitude=None, height_coordinate=None, position_confidence_ellipse=None, horizontal_position_accuracy=None, point_coordinates_extension_g=None):  # noqa: E501
        """PointCoordinates - a model defined in OpenAPI

        :param latitude: The latitude of this PointCoordinates.  # noqa: E501
        :type latitude: float
        :param longitude: The longitude of this PointCoordinates.  # noqa: E501
        :type longitude: float
        :param height_coordinate: The height_coordinate of this PointCoordinates.  # noqa: E501
        :type height_coordinate: List[HeightCoordinate]
        :param position_confidence_ellipse: The position_confidence_ellipse of this PointCoordinates.  # noqa: E501
        :type position_confidence_ellipse: PositionConfidenceEllipse
        :param horizontal_position_accuracy: The horizontal_position_accuracy of this PointCoordinates.  # noqa: E501
        :type horizontal_position_accuracy: PositionAccuracy
        :param point_coordinates_extension_g: The point_coordinates_extension_g of this PointCoordinates.  # noqa: E501
        :type point_coordinates_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'latitude': float,
            'longitude': float,
            'height_coordinate': List[HeightCoordinate],
            'position_confidence_ellipse': PositionConfidenceEllipse,
            'horizontal_position_accuracy': PositionAccuracy,
            'point_coordinates_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'latitude': 'latitude',
            'longitude': 'longitude',
            'height_coordinate': 'heightCoordinate',
            'position_confidence_ellipse': 'positionConfidenceEllipse',
            'horizontal_position_accuracy': 'horizontalPositionAccuracy',
            'point_coordinates_extension_g': 'pointCoordinatesExtensionG'
        }

        self._latitude = latitude
        self._longitude = longitude
        self._height_coordinate = height_coordinate
        self._position_confidence_ellipse = position_confidence_ellipse
        self._horizontal_position_accuracy = horizontal_position_accuracy
        self._point_coordinates_extension_g = point_coordinates_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'PointCoordinates':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PointCoordinates of this PointCoordinates.  # noqa: E501
        :rtype: PointCoordinates
        """
        return util.deserialize_model(dikt, cls)

    @property
    def latitude(self) -> float:
        """Gets the latitude of this PointCoordinates.


        :return: The latitude of this PointCoordinates.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: float):
        """Sets the latitude of this PointCoordinates.


        :param latitude: The latitude of this PointCoordinates.
        :type latitude: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")  # noqa: E501

        self._latitude = latitude

    @property
    def longitude(self) -> float:
        """Gets the longitude of this PointCoordinates.


        :return: The longitude of this PointCoordinates.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: float):
        """Sets the longitude of this PointCoordinates.


        :param longitude: The longitude of this PointCoordinates.
        :type longitude: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")  # noqa: E501

        self._longitude = longitude

    @property
    def height_coordinate(self) -> List[HeightCoordinate]:
        """Gets the height_coordinate of this PointCoordinates.


        :return: The height_coordinate of this PointCoordinates.
        :rtype: List[HeightCoordinate]
        """
        return self._height_coordinate

    @height_coordinate.setter
    def height_coordinate(self, height_coordinate: List[HeightCoordinate]):
        """Sets the height_coordinate of this PointCoordinates.


        :param height_coordinate: The height_coordinate of this PointCoordinates.
        :type height_coordinate: List[HeightCoordinate]
        """
        if height_coordinate is not None and len(height_coordinate) > 3:
            raise ValueError("Invalid value for `height_coordinate`, number of items must be less than or equal to `3`")  # noqa: E501
        if height_coordinate is not None and len(height_coordinate) < 0:
            raise ValueError("Invalid value for `height_coordinate`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._height_coordinate = height_coordinate

    @property
    def position_confidence_ellipse(self) -> PositionConfidenceEllipse:
        """Gets the position_confidence_ellipse of this PointCoordinates.


        :return: The position_confidence_ellipse of this PointCoordinates.
        :rtype: PositionConfidenceEllipse
        """
        return self._position_confidence_ellipse

    @position_confidence_ellipse.setter
    def position_confidence_ellipse(self, position_confidence_ellipse: PositionConfidenceEllipse):
        """Sets the position_confidence_ellipse of this PointCoordinates.


        :param position_confidence_ellipse: The position_confidence_ellipse of this PointCoordinates.
        :type position_confidence_ellipse: PositionConfidenceEllipse
        """

        self._position_confidence_ellipse = position_confidence_ellipse

    @property
    def horizontal_position_accuracy(self) -> PositionAccuracy:
        """Gets the horizontal_position_accuracy of this PointCoordinates.


        :return: The horizontal_position_accuracy of this PointCoordinates.
        :rtype: PositionAccuracy
        """
        return self._horizontal_position_accuracy

    @horizontal_position_accuracy.setter
    def horizontal_position_accuracy(self, horizontal_position_accuracy: PositionAccuracy):
        """Sets the horizontal_position_accuracy of this PointCoordinates.


        :param horizontal_position_accuracy: The horizontal_position_accuracy of this PointCoordinates.
        :type horizontal_position_accuracy: PositionAccuracy
        """

        self._horizontal_position_accuracy = horizontal_position_accuracy

    @property
    def point_coordinates_extension_g(self) -> Dict[str, object]:
        """Gets the point_coordinates_extension_g of this PointCoordinates.


        :return: The point_coordinates_extension_g of this PointCoordinates.
        :rtype: Dict[str, object]
        """
        return self._point_coordinates_extension_g

    @point_coordinates_extension_g.setter
    def point_coordinates_extension_g(self, point_coordinates_extension_g: Dict[str, object]):
        """Sets the point_coordinates_extension_g of this PointCoordinates.


        :param point_coordinates_extension_g: The point_coordinates_extension_g of this PointCoordinates.
        :type point_coordinates_extension_g: Dict[str, object]
        """

        self._point_coordinates_extension_g = point_coordinates_extension_g
