from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class SessionInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, session_id=None, start_session=None, session_information_extension_g=None):  # noqa: E501
        """SessionInformation - a model defined in OpenAPI

        :param session_id: The session_id of this SessionInformation.  # noqa: E501
        :type session_id: str
        :param start_session: The start_session of this SessionInformation.  # noqa: E501
        :type start_session: datetime
        :param session_information_extension_g: The session_information_extension_g of this SessionInformation.  # noqa: E501
        :type session_information_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'session_id': str,
            'start_session': datetime,
            'session_information_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'session_id': 'sessionID',
            'start_session': 'startSession',
            'session_information_extension_g': 'sessionInformationExtensionG'
        }

        self._session_id = session_id
        self._start_session = start_session
        self._session_information_extension_g = session_information_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'SessionInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SessionInformation of this SessionInformation.  # noqa: E501
        :rtype: SessionInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def session_id(self) -> str:
        """Gets the session_id of this SessionInformation.


        :return: The session_id of this SessionInformation.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id: str):
        """Sets the session_id of this SessionInformation.


        :param session_id: The session_id of this SessionInformation.
        :type session_id: str
        """
        if session_id is None:
            raise ValueError("Invalid value for `session_id`, must not be `None`")  # noqa: E501
        if session_id is not None and len(session_id) > 1024:
            raise ValueError("Invalid value for `session_id`, length must be less than or equal to `1024`")  # noqa: E501

        self._session_id = session_id

    @property
    def start_session(self) -> datetime:
        """Gets the start_session of this SessionInformation.


        :return: The start_session of this SessionInformation.
        :rtype: datetime
        """
        return self._start_session

    @start_session.setter
    def start_session(self, start_session: datetime):
        """Sets the start_session of this SessionInformation.


        :param start_session: The start_session of this SessionInformation.
        :type start_session: datetime
        """

        self._start_session = start_session

    @property
    def session_information_extension_g(self) -> Dict[str, object]:
        """Gets the session_information_extension_g of this SessionInformation.


        :return: The session_information_extension_g of this SessionInformation.
        :rtype: Dict[str, object]
        """
        return self._session_information_extension_g

    @session_information_extension_g.setter
    def session_information_extension_g(self, session_information_extension_g: Dict[str, object]):
        """Sets the session_information_extension_g of this SessionInformation.


        :param session_information_extension_g: The session_information_extension_g of this SessionInformation.
        :type session_information_extension_g: Dict[str, object]
        """

        self._session_information_extension_g = session_information_extension_g
