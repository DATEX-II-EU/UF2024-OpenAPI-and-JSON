from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.exchange_return_enum_g import ExchangeReturnEnumG
from openapi_server.models.invalidity_reason_enum_g import InvalidityReasonEnumG
from openapi_server.models.multilingual_string import MultilingualString
from openapi_server import util

from openapi_server.models.exchange_return_enum_g import ExchangeReturnEnumG  # noqa: E501
from openapi_server.models.invalidity_reason_enum_g import InvalidityReasonEnumG  # noqa: E501
from openapi_server.models.multilingual_string import MultilingualString  # noqa: E501

class ReturnInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, return_status=None, return_status_reason=None, coded_invalidity_reason=None, return_information_extension_g=None):  # noqa: E501
        """ReturnInformation - a model defined in OpenAPI

        :param return_status: The return_status of this ReturnInformation.  # noqa: E501
        :type return_status: ExchangeReturnEnumG
        :param return_status_reason: The return_status_reason of this ReturnInformation.  # noqa: E501
        :type return_status_reason: MultilingualString
        :param coded_invalidity_reason: The coded_invalidity_reason of this ReturnInformation.  # noqa: E501
        :type coded_invalidity_reason: List[InvalidityReasonEnumG]
        :param return_information_extension_g: The return_information_extension_g of this ReturnInformation.  # noqa: E501
        :type return_information_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'return_status': ExchangeReturnEnumG,
            'return_status_reason': MultilingualString,
            'coded_invalidity_reason': List[InvalidityReasonEnumG],
            'return_information_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'return_status': 'returnStatus',
            'return_status_reason': 'returnStatusReason',
            'coded_invalidity_reason': 'codedInvalidityReason',
            'return_information_extension_g': 'returnInformationExtensionG'
        }

        self._return_status = return_status
        self._return_status_reason = return_status_reason
        self._coded_invalidity_reason = coded_invalidity_reason
        self._return_information_extension_g = return_information_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'ReturnInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReturnInformation of this ReturnInformation.  # noqa: E501
        :rtype: ReturnInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def return_status(self) -> ExchangeReturnEnumG:
        """Gets the return_status of this ReturnInformation.


        :return: The return_status of this ReturnInformation.
        :rtype: ExchangeReturnEnumG
        """
        return self._return_status

    @return_status.setter
    def return_status(self, return_status: ExchangeReturnEnumG):
        """Sets the return_status of this ReturnInformation.


        :param return_status: The return_status of this ReturnInformation.
        :type return_status: ExchangeReturnEnumG
        """
        if return_status is None:
            raise ValueError("Invalid value for `return_status`, must not be `None`")  # noqa: E501

        self._return_status = return_status

    @property
    def return_status_reason(self) -> MultilingualString:
        """Gets the return_status_reason of this ReturnInformation.


        :return: The return_status_reason of this ReturnInformation.
        :rtype: MultilingualString
        """
        return self._return_status_reason

    @return_status_reason.setter
    def return_status_reason(self, return_status_reason: MultilingualString):
        """Sets the return_status_reason of this ReturnInformation.


        :param return_status_reason: The return_status_reason of this ReturnInformation.
        :type return_status_reason: MultilingualString
        """

        self._return_status_reason = return_status_reason

    @property
    def coded_invalidity_reason(self) -> List[InvalidityReasonEnumG]:
        """Gets the coded_invalidity_reason of this ReturnInformation.


        :return: The coded_invalidity_reason of this ReturnInformation.
        :rtype: List[InvalidityReasonEnumG]
        """
        return self._coded_invalidity_reason

    @coded_invalidity_reason.setter
    def coded_invalidity_reason(self, coded_invalidity_reason: List[InvalidityReasonEnumG]):
        """Sets the coded_invalidity_reason of this ReturnInformation.


        :param coded_invalidity_reason: The coded_invalidity_reason of this ReturnInformation.
        :type coded_invalidity_reason: List[InvalidityReasonEnumG]
        """
        if coded_invalidity_reason is not None and len(coded_invalidity_reason) < 0:
            raise ValueError("Invalid value for `coded_invalidity_reason`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._coded_invalidity_reason = coded_invalidity_reason

    @property
    def return_information_extension_g(self) -> Dict[str, object]:
        """Gets the return_information_extension_g of this ReturnInformation.


        :return: The return_information_extension_g of this ReturnInformation.
        :rtype: Dict[str, object]
        """
        return self._return_information_extension_g

    @return_information_extension_g.setter
    def return_information_extension_g(self, return_information_extension_g: Dict[str, object]):
        """Sets the return_information_extension_g of this ReturnInformation.


        :param return_information_extension_g: The return_information_extension_g of this ReturnInformation.
        :type return_information_extension_g: Dict[str, object]
        """

        self._return_information_extension_g = return_information_extension_g
