from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.cis_information import CISInformation
from openapi_server.models.exchange_information import ExchangeInformation
from openapi_server.models.information_management import InformationManagement
from openapi_server.models.payload_publication_g import PayloadPublicationG
from openapi_server import util

from openapi_server.models.cis_information import CISInformation  # noqa: E501
from openapi_server.models.exchange_information import ExchangeInformation  # noqa: E501
from openapi_server.models.information_management import InformationManagement  # noqa: E501
from openapi_server.models.payload_publication_g import PayloadPublicationG  # noqa: E501

class MessageContainer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payload=None, cis_information=None, exchange_information=None, information_management=None, message_container_extension_g=None):  # noqa: E501
        """MessageContainer - a model defined in OpenAPI

        :param payload: The payload of this MessageContainer.  # noqa: E501
        :type payload: List[PayloadPublicationG]
        :param cis_information: The cis_information of this MessageContainer.  # noqa: E501
        :type cis_information: CISInformation
        :param exchange_information: The exchange_information of this MessageContainer.  # noqa: E501
        :type exchange_information: ExchangeInformation
        :param information_management: The information_management of this MessageContainer.  # noqa: E501
        :type information_management: InformationManagement
        :param message_container_extension_g: The message_container_extension_g of this MessageContainer.  # noqa: E501
        :type message_container_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'payload': List[PayloadPublicationG],
            'cis_information': CISInformation,
            'exchange_information': ExchangeInformation,
            'information_management': InformationManagement,
            'message_container_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'payload': 'payload',
            'cis_information': 'cisInformation',
            'exchange_information': 'exchangeInformation',
            'information_management': 'informationManagement',
            'message_container_extension_g': 'messageContainerExtensionG'
        }

        self._payload = payload
        self._cis_information = cis_information
        self._exchange_information = exchange_information
        self._information_management = information_management
        self._message_container_extension_g = message_container_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'MessageContainer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MessageContainer of this MessageContainer.  # noqa: E501
        :rtype: MessageContainer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payload(self) -> List[PayloadPublicationG]:
        """Gets the payload of this MessageContainer.


        :return: The payload of this MessageContainer.
        :rtype: List[PayloadPublicationG]
        """
        return self._payload

    @payload.setter
    def payload(self, payload: List[PayloadPublicationG]):
        """Sets the payload of this MessageContainer.


        :param payload: The payload of this MessageContainer.
        :type payload: List[PayloadPublicationG]
        """
        if payload is not None and len(payload) < 0:
            raise ValueError("Invalid value for `payload`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._payload = payload

    @property
    def cis_information(self) -> CISInformation:
        """Gets the cis_information of this MessageContainer.


        :return: The cis_information of this MessageContainer.
        :rtype: CISInformation
        """
        return self._cis_information

    @cis_information.setter
    def cis_information(self, cis_information: CISInformation):
        """Sets the cis_information of this MessageContainer.


        :param cis_information: The cis_information of this MessageContainer.
        :type cis_information: CISInformation
        """

        self._cis_information = cis_information

    @property
    def exchange_information(self) -> ExchangeInformation:
        """Gets the exchange_information of this MessageContainer.


        :return: The exchange_information of this MessageContainer.
        :rtype: ExchangeInformation
        """
        return self._exchange_information

    @exchange_information.setter
    def exchange_information(self, exchange_information: ExchangeInformation):
        """Sets the exchange_information of this MessageContainer.


        :param exchange_information: The exchange_information of this MessageContainer.
        :type exchange_information: ExchangeInformation
        """
        if exchange_information is None:
            raise ValueError("Invalid value for `exchange_information`, must not be `None`")  # noqa: E501

        self._exchange_information = exchange_information

    @property
    def information_management(self) -> InformationManagement:
        """Gets the information_management of this MessageContainer.


        :return: The information_management of this MessageContainer.
        :rtype: InformationManagement
        """
        return self._information_management

    @information_management.setter
    def information_management(self, information_management: InformationManagement):
        """Sets the information_management of this MessageContainer.


        :param information_management: The information_management of this MessageContainer.
        :type information_management: InformationManagement
        """

        self._information_management = information_management

    @property
    def message_container_extension_g(self) -> Dict[str, object]:
        """Gets the message_container_extension_g of this MessageContainer.


        :return: The message_container_extension_g of this MessageContainer.
        :rtype: Dict[str, object]
        """
        return self._message_container_extension_g

    @message_container_extension_g.setter
    def message_container_extension_g(self, message_container_extension_g: Dict[str, object]):
        """Sets the message_container_extension_g of this MessageContainer.


        :param message_container_extension_g: The message_container_extension_g of this MessageContainer.
        :type message_container_extension_g: Dict[str, object]
        """

        self._message_container_extension_g = message_container_extension_g
