from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.service_feedback import ServiceFeedback
from openapi_server.models.service_request import ServiceRequest
from openapi_server import util

from openapi_server.models.service_feedback import ServiceFeedback  # noqa: E501
from openapi_server.models.service_request import ServiceRequest  # noqa: E501

class CISInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_feedback=None, service_request=None, cis_information_extension_g=None):  # noqa: E501
        """CISInformation - a model defined in OpenAPI

        :param service_feedback: The service_feedback of this CISInformation.  # noqa: E501
        :type service_feedback: List[ServiceFeedback]
        :param service_request: The service_request of this CISInformation.  # noqa: E501
        :type service_request: List[ServiceRequest]
        :param cis_information_extension_g: The cis_information_extension_g of this CISInformation.  # noqa: E501
        :type cis_information_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'service_feedback': List[ServiceFeedback],
            'service_request': List[ServiceRequest],
            'cis_information_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'service_feedback': 'serviceFeedback',
            'service_request': 'serviceRequest',
            'cis_information_extension_g': 'cisInformationExtensionG'
        }

        self._service_feedback = service_feedback
        self._service_request = service_request
        self._cis_information_extension_g = cis_information_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'CISInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CISInformation of this CISInformation.  # noqa: E501
        :rtype: CISInformation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_feedback(self) -> List[ServiceFeedback]:
        """Gets the service_feedback of this CISInformation.


        :return: The service_feedback of this CISInformation.
        :rtype: List[ServiceFeedback]
        """
        return self._service_feedback

    @service_feedback.setter
    def service_feedback(self, service_feedback: List[ServiceFeedback]):
        """Sets the service_feedback of this CISInformation.


        :param service_feedback: The service_feedback of this CISInformation.
        :type service_feedback: List[ServiceFeedback]
        """
        if service_feedback is not None and len(service_feedback) < 0:
            raise ValueError("Invalid value for `service_feedback`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._service_feedback = service_feedback

    @property
    def service_request(self) -> List[ServiceRequest]:
        """Gets the service_request of this CISInformation.


        :return: The service_request of this CISInformation.
        :rtype: List[ServiceRequest]
        """
        return self._service_request

    @service_request.setter
    def service_request(self, service_request: List[ServiceRequest]):
        """Sets the service_request of this CISInformation.


        :param service_request: The service_request of this CISInformation.
        :type service_request: List[ServiceRequest]
        """
        if service_request is not None and len(service_request) < 0:
            raise ValueError("Invalid value for `service_request`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._service_request = service_request

    @property
    def cis_information_extension_g(self) -> Dict[str, object]:
        """Gets the cis_information_extension_g of this CISInformation.


        :return: The cis_information_extension_g of this CISInformation.
        :rtype: Dict[str, object]
        """
        return self._cis_information_extension_g

    @cis_information_extension_g.setter
    def cis_information_extension_g(self, cis_information_extension_g: Dict[str, object]):
        """Sets the cis_information_extension_g of this CISInformation.


        :param cis_information_extension_g: The cis_information_extension_g of this CISInformation.
        :type cis_information_extension_g: Dict[str, object]
        """

        self._cis_information_extension_g = cis_information_extension_g
