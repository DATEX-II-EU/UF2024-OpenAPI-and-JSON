from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class OffsetDistance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offset_distance=None, offset_distance_extension_g=None):  # noqa: E501
        """OffsetDistance - a model defined in OpenAPI

        :param offset_distance: The offset_distance of this OffsetDistance.  # noqa: E501
        :type offset_distance: int
        :param offset_distance_extension_g: The offset_distance_extension_g of this OffsetDistance.  # noqa: E501
        :type offset_distance_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'offset_distance': int,
            'offset_distance_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'offset_distance': 'offsetDistance',
            'offset_distance_extension_g': 'offsetDistanceExtensionG'
        }

        self._offset_distance = offset_distance
        self._offset_distance_extension_g = offset_distance_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'OffsetDistance':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OffsetDistance of this OffsetDistance.  # noqa: E501
        :rtype: OffsetDistance
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offset_distance(self) -> int:
        """Gets the offset_distance of this OffsetDistance.


        :return: The offset_distance of this OffsetDistance.
        :rtype: int
        """
        return self._offset_distance

    @offset_distance.setter
    def offset_distance(self, offset_distance: int):
        """Sets the offset_distance of this OffsetDistance.


        :param offset_distance: The offset_distance of this OffsetDistance.
        :type offset_distance: int
        """
        if offset_distance is None:
            raise ValueError("Invalid value for `offset_distance`, must not be `None`")  # noqa: E501
        if offset_distance is not None and offset_distance < 0:  # noqa: E501
            raise ValueError("Invalid value for `offset_distance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._offset_distance = offset_distance

    @property
    def offset_distance_extension_g(self) -> Dict[str, object]:
        """Gets the offset_distance_extension_g of this OffsetDistance.


        :return: The offset_distance_extension_g of this OffsetDistance.
        :rtype: Dict[str, object]
        """
        return self._offset_distance_extension_g

    @offset_distance_extension_g.setter
    def offset_distance_extension_g(self, offset_distance_extension_g: Dict[str, object]):
        """Sets the offset_distance_extension_g of this OffsetDistance.


        :param offset_distance_extension_g: The offset_distance_extension_g of this OffsetDistance.
        :type offset_distance_extension_g: Dict[str, object]
        """

        self._offset_distance_extension_g = offset_distance_extension_g
