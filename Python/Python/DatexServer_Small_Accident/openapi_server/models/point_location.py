from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.alert_c_point_g import AlertCPointG
from openapi_server.models.point_by_coordinates import PointByCoordinates
from openapi_server.models.point_coordinates import PointCoordinates
from openapi_server.models.supplementary_positional_description import SupplementaryPositionalDescription
from openapi_server import util

from openapi_server.models.alert_c_point_g import AlertCPointG  # noqa: E501
from openapi_server.models.point_by_coordinates import PointByCoordinates  # noqa: E501
from openapi_server.models.point_coordinates import PointCoordinates  # noqa: E501
from openapi_server.models.supplementary_positional_description import SupplementaryPositionalDescription  # noqa: E501

class PointLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coordinates_for_display=None, supplementary_positional_description=None, point_by_coordinates=None, alert_c_point=None, location_reference_extension_g=None, location_extension_g=None, network_location_extension_g=None, point_location_extension_g=None):  # noqa: E501
        """PointLocation - a model defined in OpenAPI

        :param coordinates_for_display: The coordinates_for_display of this PointLocation.  # noqa: E501
        :type coordinates_for_display: PointCoordinates
        :param supplementary_positional_description: The supplementary_positional_description of this PointLocation.  # noqa: E501
        :type supplementary_positional_description: SupplementaryPositionalDescription
        :param point_by_coordinates: The point_by_coordinates of this PointLocation.  # noqa: E501
        :type point_by_coordinates: PointByCoordinates
        :param alert_c_point: The alert_c_point of this PointLocation.  # noqa: E501
        :type alert_c_point: List[AlertCPointG]
        :param location_reference_extension_g: The location_reference_extension_g of this PointLocation.  # noqa: E501
        :type location_reference_extension_g: Dict[str, object]
        :param location_extension_g: The location_extension_g of this PointLocation.  # noqa: E501
        :type location_extension_g: Dict[str, object]
        :param network_location_extension_g: The network_location_extension_g of this PointLocation.  # noqa: E501
        :type network_location_extension_g: Dict[str, object]
        :param point_location_extension_g: The point_location_extension_g of this PointLocation.  # noqa: E501
        :type point_location_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'coordinates_for_display': PointCoordinates,
            'supplementary_positional_description': SupplementaryPositionalDescription,
            'point_by_coordinates': PointByCoordinates,
            'alert_c_point': List[AlertCPointG],
            'location_reference_extension_g': Dict[str, object],
            'location_extension_g': Dict[str, object],
            'network_location_extension_g': Dict[str, object],
            'point_location_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'coordinates_for_display': 'coordinatesForDisplay',
            'supplementary_positional_description': 'supplementaryPositionalDescription',
            'point_by_coordinates': 'pointByCoordinates',
            'alert_c_point': 'alertCPoint',
            'location_reference_extension_g': 'locationReferenceExtensionG',
            'location_extension_g': 'locationExtensionG',
            'network_location_extension_g': 'networkLocationExtensionG',
            'point_location_extension_g': 'pointLocationExtensionG'
        }

        self._coordinates_for_display = coordinates_for_display
        self._supplementary_positional_description = supplementary_positional_description
        self._point_by_coordinates = point_by_coordinates
        self._alert_c_point = alert_c_point
        self._location_reference_extension_g = location_reference_extension_g
        self._location_extension_g = location_extension_g
        self._network_location_extension_g = network_location_extension_g
        self._point_location_extension_g = point_location_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'PointLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PointLocation of this PointLocation.  # noqa: E501
        :rtype: PointLocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coordinates_for_display(self) -> PointCoordinates:
        """Gets the coordinates_for_display of this PointLocation.


        :return: The coordinates_for_display of this PointLocation.
        :rtype: PointCoordinates
        """
        return self._coordinates_for_display

    @coordinates_for_display.setter
    def coordinates_for_display(self, coordinates_for_display: PointCoordinates):
        """Sets the coordinates_for_display of this PointLocation.


        :param coordinates_for_display: The coordinates_for_display of this PointLocation.
        :type coordinates_for_display: PointCoordinates
        """

        self._coordinates_for_display = coordinates_for_display

    @property
    def supplementary_positional_description(self) -> SupplementaryPositionalDescription:
        """Gets the supplementary_positional_description of this PointLocation.


        :return: The supplementary_positional_description of this PointLocation.
        :rtype: SupplementaryPositionalDescription
        """
        return self._supplementary_positional_description

    @supplementary_positional_description.setter
    def supplementary_positional_description(self, supplementary_positional_description: SupplementaryPositionalDescription):
        """Sets the supplementary_positional_description of this PointLocation.


        :param supplementary_positional_description: The supplementary_positional_description of this PointLocation.
        :type supplementary_positional_description: SupplementaryPositionalDescription
        """

        self._supplementary_positional_description = supplementary_positional_description

    @property
    def point_by_coordinates(self) -> PointByCoordinates:
        """Gets the point_by_coordinates of this PointLocation.


        :return: The point_by_coordinates of this PointLocation.
        :rtype: PointByCoordinates
        """
        return self._point_by_coordinates

    @point_by_coordinates.setter
    def point_by_coordinates(self, point_by_coordinates: PointByCoordinates):
        """Sets the point_by_coordinates of this PointLocation.


        :param point_by_coordinates: The point_by_coordinates of this PointLocation.
        :type point_by_coordinates: PointByCoordinates
        """

        self._point_by_coordinates = point_by_coordinates

    @property
    def alert_c_point(self) -> List[AlertCPointG]:
        """Gets the alert_c_point of this PointLocation.


        :return: The alert_c_point of this PointLocation.
        :rtype: List[AlertCPointG]
        """
        return self._alert_c_point

    @alert_c_point.setter
    def alert_c_point(self, alert_c_point: List[AlertCPointG]):
        """Sets the alert_c_point of this PointLocation.


        :param alert_c_point: The alert_c_point of this PointLocation.
        :type alert_c_point: List[AlertCPointG]
        """
        if alert_c_point is not None and len(alert_c_point) < 0:
            raise ValueError("Invalid value for `alert_c_point`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._alert_c_point = alert_c_point

    @property
    def location_reference_extension_g(self) -> Dict[str, object]:
        """Gets the location_reference_extension_g of this PointLocation.


        :return: The location_reference_extension_g of this PointLocation.
        :rtype: Dict[str, object]
        """
        return self._location_reference_extension_g

    @location_reference_extension_g.setter
    def location_reference_extension_g(self, location_reference_extension_g: Dict[str, object]):
        """Sets the location_reference_extension_g of this PointLocation.


        :param location_reference_extension_g: The location_reference_extension_g of this PointLocation.
        :type location_reference_extension_g: Dict[str, object]
        """

        self._location_reference_extension_g = location_reference_extension_g

    @property
    def location_extension_g(self) -> Dict[str, object]:
        """Gets the location_extension_g of this PointLocation.


        :return: The location_extension_g of this PointLocation.
        :rtype: Dict[str, object]
        """
        return self._location_extension_g

    @location_extension_g.setter
    def location_extension_g(self, location_extension_g: Dict[str, object]):
        """Sets the location_extension_g of this PointLocation.


        :param location_extension_g: The location_extension_g of this PointLocation.
        :type location_extension_g: Dict[str, object]
        """

        self._location_extension_g = location_extension_g

    @property
    def network_location_extension_g(self) -> Dict[str, object]:
        """Gets the network_location_extension_g of this PointLocation.


        :return: The network_location_extension_g of this PointLocation.
        :rtype: Dict[str, object]
        """
        return self._network_location_extension_g

    @network_location_extension_g.setter
    def network_location_extension_g(self, network_location_extension_g: Dict[str, object]):
        """Sets the network_location_extension_g of this PointLocation.


        :param network_location_extension_g: The network_location_extension_g of this PointLocation.
        :type network_location_extension_g: Dict[str, object]
        """

        self._network_location_extension_g = network_location_extension_g

    @property
    def point_location_extension_g(self) -> Dict[str, object]:
        """Gets the point_location_extension_g of this PointLocation.


        :return: The point_location_extension_g of this PointLocation.
        :rtype: Dict[str, object]
        """
        return self._point_location_extension_g

    @point_location_extension_g.setter
    def point_location_extension_g(self, point_location_extension_g: Dict[str, object]):
        """Sets the point_location_extension_g of this PointLocation.


        :param point_location_extension_g: The point_location_extension_g of this PointLocation.
        :type point_location_extension_g: Dict[str, object]
        """

        self._point_location_extension_g = point_location_extension_g
