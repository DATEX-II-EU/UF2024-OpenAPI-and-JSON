from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.international_identifier import InternationalIdentifier
from openapi_server.models.situation import Situation
from openapi_server import util

from openapi_server.models.international_identifier import InternationalIdentifier  # noqa: E501
from openapi_server.models.situation import Situation  # noqa: E501

class SituationPublication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lang=None, publication_time=None, publication_creator=None, situation=None, payload_publication_extension_g=None, situation_publication_extension_g=None):  # noqa: E501
        """SituationPublication - a model defined in OpenAPI

        :param lang: The lang of this SituationPublication.  # noqa: E501
        :type lang: str
        :param publication_time: The publication_time of this SituationPublication.  # noqa: E501
        :type publication_time: datetime
        :param publication_creator: The publication_creator of this SituationPublication.  # noqa: E501
        :type publication_creator: InternationalIdentifier
        :param situation: The situation of this SituationPublication.  # noqa: E501
        :type situation: List[Situation]
        :param payload_publication_extension_g: The payload_publication_extension_g of this SituationPublication.  # noqa: E501
        :type payload_publication_extension_g: Dict[str, object]
        :param situation_publication_extension_g: The situation_publication_extension_g of this SituationPublication.  # noqa: E501
        :type situation_publication_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'lang': str,
            'publication_time': datetime,
            'publication_creator': InternationalIdentifier,
            'situation': List[Situation],
            'payload_publication_extension_g': Dict[str, object],
            'situation_publication_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'lang': 'lang',
            'publication_time': 'publicationTime',
            'publication_creator': 'publicationCreator',
            'situation': 'situation',
            'payload_publication_extension_g': 'payloadPublicationExtensionG',
            'situation_publication_extension_g': 'situationPublicationExtensionG'
        }

        self._lang = lang
        self._publication_time = publication_time
        self._publication_creator = publication_creator
        self._situation = situation
        self._payload_publication_extension_g = payload_publication_extension_g
        self._situation_publication_extension_g = situation_publication_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'SituationPublication':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SituationPublication of this SituationPublication.  # noqa: E501
        :rtype: SituationPublication
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lang(self) -> str:
        """Gets the lang of this SituationPublication.


        :return: The lang of this SituationPublication.
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang: str):
        """Sets the lang of this SituationPublication.


        :param lang: The lang of this SituationPublication.
        :type lang: str
        """
        if lang is None:
            raise ValueError("Invalid value for `lang`, must not be `None`")  # noqa: E501

        self._lang = lang

    @property
    def publication_time(self) -> datetime:
        """Gets the publication_time of this SituationPublication.


        :return: The publication_time of this SituationPublication.
        :rtype: datetime
        """
        return self._publication_time

    @publication_time.setter
    def publication_time(self, publication_time: datetime):
        """Sets the publication_time of this SituationPublication.


        :param publication_time: The publication_time of this SituationPublication.
        :type publication_time: datetime
        """
        if publication_time is None:
            raise ValueError("Invalid value for `publication_time`, must not be `None`")  # noqa: E501

        self._publication_time = publication_time

    @property
    def publication_creator(self) -> InternationalIdentifier:
        """Gets the publication_creator of this SituationPublication.


        :return: The publication_creator of this SituationPublication.
        :rtype: InternationalIdentifier
        """
        return self._publication_creator

    @publication_creator.setter
    def publication_creator(self, publication_creator: InternationalIdentifier):
        """Sets the publication_creator of this SituationPublication.


        :param publication_creator: The publication_creator of this SituationPublication.
        :type publication_creator: InternationalIdentifier
        """
        if publication_creator is None:
            raise ValueError("Invalid value for `publication_creator`, must not be `None`")  # noqa: E501

        self._publication_creator = publication_creator

    @property
    def situation(self) -> List[Situation]:
        """Gets the situation of this SituationPublication.


        :return: The situation of this SituationPublication.
        :rtype: List[Situation]
        """
        return self._situation

    @situation.setter
    def situation(self, situation: List[Situation]):
        """Sets the situation of this SituationPublication.


        :param situation: The situation of this SituationPublication.
        :type situation: List[Situation]
        """
        if situation is not None and len(situation) < 0:
            raise ValueError("Invalid value for `situation`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._situation = situation

    @property
    def payload_publication_extension_g(self) -> Dict[str, object]:
        """Gets the payload_publication_extension_g of this SituationPublication.


        :return: The payload_publication_extension_g of this SituationPublication.
        :rtype: Dict[str, object]
        """
        return self._payload_publication_extension_g

    @payload_publication_extension_g.setter
    def payload_publication_extension_g(self, payload_publication_extension_g: Dict[str, object]):
        """Sets the payload_publication_extension_g of this SituationPublication.


        :param payload_publication_extension_g: The payload_publication_extension_g of this SituationPublication.
        :type payload_publication_extension_g: Dict[str, object]
        """

        self._payload_publication_extension_g = payload_publication_extension_g

    @property
    def situation_publication_extension_g(self) -> Dict[str, object]:
        """Gets the situation_publication_extension_g of this SituationPublication.


        :return: The situation_publication_extension_g of this SituationPublication.
        :rtype: Dict[str, object]
        """
        return self._situation_publication_extension_g

    @situation_publication_extension_g.setter
    def situation_publication_extension_g(self, situation_publication_extension_g: Dict[str, object]):
        """Sets the situation_publication_extension_g of this SituationPublication.


        :param situation_publication_extension_g: The situation_publication_extension_g of this SituationPublication.
        :type situation_publication_extension_g: Dict[str, object]
        """

        self._situation_publication_extension_g = situation_publication_extension_g
