from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.agent import Agent
from openapi_server.models.predefined_service_enum_g import PredefinedServiceEnumG
from openapi_server.models.reference import Reference
from openapi_server.models.service_action_enum_g import ServiceActionEnumG
from openapi_server.models.service_request_condition import ServiceRequestCondition
from openapi_server.models.versioned_reference import VersionedReference
from openapi_server import util

from openapi_server.models.agent import Agent  # noqa: E501
from openapi_server.models.predefined_service_enum_g import PredefinedServiceEnumG  # noqa: E501
from openapi_server.models.reference import Reference  # noqa: E501
from openapi_server.models.service_action_enum_g import ServiceActionEnumG  # noqa: E501
from openapi_server.models.service_request_condition import ServiceRequestCondition  # noqa: E501
from openapi_server.models.versioned_reference import VersionedReference  # noqa: E501

class ServiceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id_g=None, version_g=None, element_to_process_reference=None, element_to_process_versioned_reference=None, expiry_time=None, external_reference=None, not_predefined_service_name=None, predefined_service=None, requested_action=None, servicer_request_creation_time=None, servicer_request_version_time=None, custom_service_parameter=None, service_requester=None, service_provider=None, service_request_condition=None, service_request_extension_g=None):  # noqa: E501
        """ServiceRequest - a model defined in OpenAPI

        :param id_g: The id_g of this ServiceRequest.  # noqa: E501
        :type id_g: str
        :param version_g: The version_g of this ServiceRequest.  # noqa: E501
        :type version_g: str
        :param element_to_process_reference: The element_to_process_reference of this ServiceRequest.  # noqa: E501
        :type element_to_process_reference: Reference
        :param element_to_process_versioned_reference: The element_to_process_versioned_reference of this ServiceRequest.  # noqa: E501
        :type element_to_process_versioned_reference: VersionedReference
        :param expiry_time: The expiry_time of this ServiceRequest.  # noqa: E501
        :type expiry_time: VersionedReference
        :param external_reference: The external_reference of this ServiceRequest.  # noqa: E501
        :type external_reference: str
        :param not_predefined_service_name: The not_predefined_service_name of this ServiceRequest.  # noqa: E501
        :type not_predefined_service_name: str
        :param predefined_service: The predefined_service of this ServiceRequest.  # noqa: E501
        :type predefined_service: PredefinedServiceEnumG
        :param requested_action: The requested_action of this ServiceRequest.  # noqa: E501
        :type requested_action: ServiceActionEnumG
        :param servicer_request_creation_time: The servicer_request_creation_time of this ServiceRequest.  # noqa: E501
        :type servicer_request_creation_time: datetime
        :param servicer_request_version_time: The servicer_request_version_time of this ServiceRequest.  # noqa: E501
        :type servicer_request_version_time: datetime
        :param custom_service_parameter: The custom_service_parameter of this ServiceRequest.  # noqa: E501
        :type custom_service_parameter: str
        :param service_requester: The service_requester of this ServiceRequest.  # noqa: E501
        :type service_requester: Agent
        :param service_provider: The service_provider of this ServiceRequest.  # noqa: E501
        :type service_provider: List[Agent]
        :param service_request_condition: The service_request_condition of this ServiceRequest.  # noqa: E501
        :type service_request_condition: ServiceRequestCondition
        :param service_request_extension_g: The service_request_extension_g of this ServiceRequest.  # noqa: E501
        :type service_request_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'id_g': str,
            'version_g': str,
            'element_to_process_reference': Reference,
            'element_to_process_versioned_reference': VersionedReference,
            'expiry_time': VersionedReference,
            'external_reference': str,
            'not_predefined_service_name': str,
            'predefined_service': PredefinedServiceEnumG,
            'requested_action': ServiceActionEnumG,
            'servicer_request_creation_time': datetime,
            'servicer_request_version_time': datetime,
            'custom_service_parameter': str,
            'service_requester': Agent,
            'service_provider': List[Agent],
            'service_request_condition': ServiceRequestCondition,
            'service_request_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'id_g': 'idG',
            'version_g': 'versionG',
            'element_to_process_reference': 'elementToProcessReference',
            'element_to_process_versioned_reference': 'elementToProcessVersionedReference',
            'expiry_time': 'expiryTime',
            'external_reference': 'externalReference',
            'not_predefined_service_name': 'notPredefinedServiceName',
            'predefined_service': 'predefinedService',
            'requested_action': 'requestedAction',
            'servicer_request_creation_time': 'servicerRequestCreationTime',
            'servicer_request_version_time': 'servicerRequestVersionTime',
            'custom_service_parameter': 'customServiceParameter',
            'service_requester': 'serviceRequester',
            'service_provider': 'serviceProvider',
            'service_request_condition': 'serviceRequestCondition',
            'service_request_extension_g': 'serviceRequestExtensionG'
        }

        self._id_g = id_g
        self._version_g = version_g
        self._element_to_process_reference = element_to_process_reference
        self._element_to_process_versioned_reference = element_to_process_versioned_reference
        self._expiry_time = expiry_time
        self._external_reference = external_reference
        self._not_predefined_service_name = not_predefined_service_name
        self._predefined_service = predefined_service
        self._requested_action = requested_action
        self._servicer_request_creation_time = servicer_request_creation_time
        self._servicer_request_version_time = servicer_request_version_time
        self._custom_service_parameter = custom_service_parameter
        self._service_requester = service_requester
        self._service_provider = service_provider
        self._service_request_condition = service_request_condition
        self._service_request_extension_g = service_request_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceRequest of this ServiceRequest.  # noqa: E501
        :rtype: ServiceRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_g(self) -> str:
        """Gets the id_g of this ServiceRequest.


        :return: The id_g of this ServiceRequest.
        :rtype: str
        """
        return self._id_g

    @id_g.setter
    def id_g(self, id_g: str):
        """Sets the id_g of this ServiceRequest.


        :param id_g: The id_g of this ServiceRequest.
        :type id_g: str
        """
        if id_g is None:
            raise ValueError("Invalid value for `id_g`, must not be `None`")  # noqa: E501

        self._id_g = id_g

    @property
    def version_g(self) -> str:
        """Gets the version_g of this ServiceRequest.


        :return: The version_g of this ServiceRequest.
        :rtype: str
        """
        return self._version_g

    @version_g.setter
    def version_g(self, version_g: str):
        """Sets the version_g of this ServiceRequest.


        :param version_g: The version_g of this ServiceRequest.
        :type version_g: str
        """
        if version_g is None:
            raise ValueError("Invalid value for `version_g`, must not be `None`")  # noqa: E501

        self._version_g = version_g

    @property
    def element_to_process_reference(self) -> Reference:
        """Gets the element_to_process_reference of this ServiceRequest.


        :return: The element_to_process_reference of this ServiceRequest.
        :rtype: Reference
        """
        return self._element_to_process_reference

    @element_to_process_reference.setter
    def element_to_process_reference(self, element_to_process_reference: Reference):
        """Sets the element_to_process_reference of this ServiceRequest.


        :param element_to_process_reference: The element_to_process_reference of this ServiceRequest.
        :type element_to_process_reference: Reference
        """

        self._element_to_process_reference = element_to_process_reference

    @property
    def element_to_process_versioned_reference(self) -> VersionedReference:
        """Gets the element_to_process_versioned_reference of this ServiceRequest.


        :return: The element_to_process_versioned_reference of this ServiceRequest.
        :rtype: VersionedReference
        """
        return self._element_to_process_versioned_reference

    @element_to_process_versioned_reference.setter
    def element_to_process_versioned_reference(self, element_to_process_versioned_reference: VersionedReference):
        """Sets the element_to_process_versioned_reference of this ServiceRequest.


        :param element_to_process_versioned_reference: The element_to_process_versioned_reference of this ServiceRequest.
        :type element_to_process_versioned_reference: VersionedReference
        """

        self._element_to_process_versioned_reference = element_to_process_versioned_reference

    @property
    def expiry_time(self) -> VersionedReference:
        """Gets the expiry_time of this ServiceRequest.


        :return: The expiry_time of this ServiceRequest.
        :rtype: VersionedReference
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time: VersionedReference):
        """Sets the expiry_time of this ServiceRequest.


        :param expiry_time: The expiry_time of this ServiceRequest.
        :type expiry_time: VersionedReference
        """

        self._expiry_time = expiry_time

    @property
    def external_reference(self) -> str:
        """Gets the external_reference of this ServiceRequest.


        :return: The external_reference of this ServiceRequest.
        :rtype: str
        """
        return self._external_reference

    @external_reference.setter
    def external_reference(self, external_reference: str):
        """Sets the external_reference of this ServiceRequest.


        :param external_reference: The external_reference of this ServiceRequest.
        :type external_reference: str
        """
        if external_reference is not None and len(external_reference) > 1024:
            raise ValueError("Invalid value for `external_reference`, length must be less than or equal to `1024`")  # noqa: E501

        self._external_reference = external_reference

    @property
    def not_predefined_service_name(self) -> str:
        """Gets the not_predefined_service_name of this ServiceRequest.


        :return: The not_predefined_service_name of this ServiceRequest.
        :rtype: str
        """
        return self._not_predefined_service_name

    @not_predefined_service_name.setter
    def not_predefined_service_name(self, not_predefined_service_name: str):
        """Sets the not_predefined_service_name of this ServiceRequest.


        :param not_predefined_service_name: The not_predefined_service_name of this ServiceRequest.
        :type not_predefined_service_name: str
        """
        if not_predefined_service_name is not None and len(not_predefined_service_name) > 1024:
            raise ValueError("Invalid value for `not_predefined_service_name`, length must be less than or equal to `1024`")  # noqa: E501

        self._not_predefined_service_name = not_predefined_service_name

    @property
    def predefined_service(self) -> PredefinedServiceEnumG:
        """Gets the predefined_service of this ServiceRequest.


        :return: The predefined_service of this ServiceRequest.
        :rtype: PredefinedServiceEnumG
        """
        return self._predefined_service

    @predefined_service.setter
    def predefined_service(self, predefined_service: PredefinedServiceEnumG):
        """Sets the predefined_service of this ServiceRequest.


        :param predefined_service: The predefined_service of this ServiceRequest.
        :type predefined_service: PredefinedServiceEnumG
        """
        if predefined_service is None:
            raise ValueError("Invalid value for `predefined_service`, must not be `None`")  # noqa: E501

        self._predefined_service = predefined_service

    @property
    def requested_action(self) -> ServiceActionEnumG:
        """Gets the requested_action of this ServiceRequest.


        :return: The requested_action of this ServiceRequest.
        :rtype: ServiceActionEnumG
        """
        return self._requested_action

    @requested_action.setter
    def requested_action(self, requested_action: ServiceActionEnumG):
        """Sets the requested_action of this ServiceRequest.


        :param requested_action: The requested_action of this ServiceRequest.
        :type requested_action: ServiceActionEnumG
        """
        if requested_action is None:
            raise ValueError("Invalid value for `requested_action`, must not be `None`")  # noqa: E501

        self._requested_action = requested_action

    @property
    def servicer_request_creation_time(self) -> datetime:
        """Gets the servicer_request_creation_time of this ServiceRequest.


        :return: The servicer_request_creation_time of this ServiceRequest.
        :rtype: datetime
        """
        return self._servicer_request_creation_time

    @servicer_request_creation_time.setter
    def servicer_request_creation_time(self, servicer_request_creation_time: datetime):
        """Sets the servicer_request_creation_time of this ServiceRequest.


        :param servicer_request_creation_time: The servicer_request_creation_time of this ServiceRequest.
        :type servicer_request_creation_time: datetime
        """
        if servicer_request_creation_time is None:
            raise ValueError("Invalid value for `servicer_request_creation_time`, must not be `None`")  # noqa: E501

        self._servicer_request_creation_time = servicer_request_creation_time

    @property
    def servicer_request_version_time(self) -> datetime:
        """Gets the servicer_request_version_time of this ServiceRequest.


        :return: The servicer_request_version_time of this ServiceRequest.
        :rtype: datetime
        """
        return self._servicer_request_version_time

    @servicer_request_version_time.setter
    def servicer_request_version_time(self, servicer_request_version_time: datetime):
        """Sets the servicer_request_version_time of this ServiceRequest.


        :param servicer_request_version_time: The servicer_request_version_time of this ServiceRequest.
        :type servicer_request_version_time: datetime
        """
        if servicer_request_version_time is None:
            raise ValueError("Invalid value for `servicer_request_version_time`, must not be `None`")  # noqa: E501

        self._servicer_request_version_time = servicer_request_version_time

    @property
    def custom_service_parameter(self) -> str:
        """Gets the custom_service_parameter of this ServiceRequest.


        :return: The custom_service_parameter of this ServiceRequest.
        :rtype: str
        """
        return self._custom_service_parameter

    @custom_service_parameter.setter
    def custom_service_parameter(self, custom_service_parameter: str):
        """Sets the custom_service_parameter of this ServiceRequest.


        :param custom_service_parameter: The custom_service_parameter of this ServiceRequest.
        :type custom_service_parameter: str
        """
        if custom_service_parameter is not None and len(custom_service_parameter) > 1024:
            raise ValueError("Invalid value for `custom_service_parameter`, length must be less than or equal to `1024`")  # noqa: E501

        self._custom_service_parameter = custom_service_parameter

    @property
    def service_requester(self) -> Agent:
        """Gets the service_requester of this ServiceRequest.


        :return: The service_requester of this ServiceRequest.
        :rtype: Agent
        """
        return self._service_requester

    @service_requester.setter
    def service_requester(self, service_requester: Agent):
        """Sets the service_requester of this ServiceRequest.


        :param service_requester: The service_requester of this ServiceRequest.
        :type service_requester: Agent
        """
        if service_requester is None:
            raise ValueError("Invalid value for `service_requester`, must not be `None`")  # noqa: E501

        self._service_requester = service_requester

    @property
    def service_provider(self) -> List[Agent]:
        """Gets the service_provider of this ServiceRequest.


        :return: The service_provider of this ServiceRequest.
        :rtype: List[Agent]
        """
        return self._service_provider

    @service_provider.setter
    def service_provider(self, service_provider: List[Agent]):
        """Sets the service_provider of this ServiceRequest.


        :param service_provider: The service_provider of this ServiceRequest.
        :type service_provider: List[Agent]
        """
        if service_provider is None:
            raise ValueError("Invalid value for `service_provider`, must not be `None`")  # noqa: E501
        if service_provider is not None and len(service_provider) < 1:
            raise ValueError("Invalid value for `service_provider`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._service_provider = service_provider

    @property
    def service_request_condition(self) -> ServiceRequestCondition:
        """Gets the service_request_condition of this ServiceRequest.


        :return: The service_request_condition of this ServiceRequest.
        :rtype: ServiceRequestCondition
        """
        return self._service_request_condition

    @service_request_condition.setter
    def service_request_condition(self, service_request_condition: ServiceRequestCondition):
        """Sets the service_request_condition of this ServiceRequest.


        :param service_request_condition: The service_request_condition of this ServiceRequest.
        :type service_request_condition: ServiceRequestCondition
        """

        self._service_request_condition = service_request_condition

    @property
    def service_request_extension_g(self) -> Dict[str, object]:
        """Gets the service_request_extension_g of this ServiceRequest.


        :return: The service_request_extension_g of this ServiceRequest.
        :rtype: Dict[str, object]
        """
        return self._service_request_extension_g

    @service_request_extension_g.setter
    def service_request_extension_g(self, service_request_extension_g: Dict[str, object]):
        """Sets the service_request_extension_g of this ServiceRequest.


        :param service_request_extension_g: The service_request_extension_g of this ServiceRequest.
        :type service_request_extension_g: Dict[str, object]
        """

        self._service_request_extension_g = service_request_extension_g
