from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.management_type_enum_g import ManagementTypeEnumG
from openapi_server.models.reference import Reference
from openapi_server.models.versioned_reference import VersionedReference
from openapi_server import util

from openapi_server.models.management_type_enum_g import ManagementTypeEnumG  # noqa: E501
from openapi_server.models.reference import Reference  # noqa: E501
from openapi_server.models.versioned_reference import VersionedReference  # noqa: E501

class ElementReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, management_status=None, reference=None, versioned_reference=None, element_reference_extension_g=None):  # noqa: E501
        """ElementReference - a model defined in OpenAPI

        :param management_status: The management_status of this ElementReference.  # noqa: E501
        :type management_status: ManagementTypeEnumG
        :param reference: The reference of this ElementReference.  # noqa: E501
        :type reference: Reference
        :param versioned_reference: The versioned_reference of this ElementReference.  # noqa: E501
        :type versioned_reference: VersionedReference
        :param element_reference_extension_g: The element_reference_extension_g of this ElementReference.  # noqa: E501
        :type element_reference_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'management_status': ManagementTypeEnumG,
            'reference': Reference,
            'versioned_reference': VersionedReference,
            'element_reference_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'management_status': 'managementStatus',
            'reference': 'reference',
            'versioned_reference': 'versionedReference',
            'element_reference_extension_g': 'elementReferenceExtensionG'
        }

        self._management_status = management_status
        self._reference = reference
        self._versioned_reference = versioned_reference
        self._element_reference_extension_g = element_reference_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'ElementReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ElementReference of this ElementReference.  # noqa: E501
        :rtype: ElementReference
        """
        return util.deserialize_model(dikt, cls)

    @property
    def management_status(self) -> ManagementTypeEnumG:
        """Gets the management_status of this ElementReference.


        :return: The management_status of this ElementReference.
        :rtype: ManagementTypeEnumG
        """
        return self._management_status

    @management_status.setter
    def management_status(self, management_status: ManagementTypeEnumG):
        """Sets the management_status of this ElementReference.


        :param management_status: The management_status of this ElementReference.
        :type management_status: ManagementTypeEnumG
        """
        if management_status is None:
            raise ValueError("Invalid value for `management_status`, must not be `None`")  # noqa: E501

        self._management_status = management_status

    @property
    def reference(self) -> Reference:
        """Gets the reference of this ElementReference.


        :return: The reference of this ElementReference.
        :rtype: Reference
        """
        return self._reference

    @reference.setter
    def reference(self, reference: Reference):
        """Sets the reference of this ElementReference.


        :param reference: The reference of this ElementReference.
        :type reference: Reference
        """

        self._reference = reference

    @property
    def versioned_reference(self) -> VersionedReference:
        """Gets the versioned_reference of this ElementReference.


        :return: The versioned_reference of this ElementReference.
        :rtype: VersionedReference
        """
        return self._versioned_reference

    @versioned_reference.setter
    def versioned_reference(self, versioned_reference: VersionedReference):
        """Sets the versioned_reference of this ElementReference.


        :param versioned_reference: The versioned_reference of this ElementReference.
        :type versioned_reference: VersionedReference
        """

        self._versioned_reference = versioned_reference

    @property
    def element_reference_extension_g(self) -> Dict[str, object]:
        """Gets the element_reference_extension_g of this ElementReference.


        :return: The element_reference_extension_g of this ElementReference.
        :rtype: Dict[str, object]
        """
        return self._element_reference_extension_g

    @element_reference_extension_g.setter
    def element_reference_extension_g(self, element_reference_extension_g: Dict[str, object]):
        """Sets the element_reference_extension_g of this ElementReference.


        :param element_reference_extension_g: The element_reference_extension_g of this ElementReference.
        :type element_reference_extension_g: Dict[str, object]
        """

        self._element_reference_extension_g = element_reference_extension_g
