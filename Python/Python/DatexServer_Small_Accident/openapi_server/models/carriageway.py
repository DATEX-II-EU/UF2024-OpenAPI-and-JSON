from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.carriageway_enum_g import CarriagewayEnumG
from openapi_server.models.lane import Lane
from openapi_server import util

from openapi_server.models.carriageway_enum_g import CarriagewayEnumG  # noqa: E501
from openapi_server.models.lane import Lane  # noqa: E501

class Carriageway(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, carriageway=None, original_number_of_lanes=None, lane=None, carriageway_extension_g=None):  # noqa: E501
        """Carriageway - a model defined in OpenAPI

        :param carriageway: The carriageway of this Carriageway.  # noqa: E501
        :type carriageway: CarriagewayEnumG
        :param original_number_of_lanes: The original_number_of_lanes of this Carriageway.  # noqa: E501
        :type original_number_of_lanes: int
        :param lane: The lane of this Carriageway.  # noqa: E501
        :type lane: List[Lane]
        :param carriageway_extension_g: The carriageway_extension_g of this Carriageway.  # noqa: E501
        :type carriageway_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'carriageway': CarriagewayEnumG,
            'original_number_of_lanes': int,
            'lane': List[Lane],
            'carriageway_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'carriageway': 'carriageway',
            'original_number_of_lanes': 'originalNumberOfLanes',
            'lane': 'lane',
            'carriageway_extension_g': 'carriagewayExtensionG'
        }

        self._carriageway = carriageway
        self._original_number_of_lanes = original_number_of_lanes
        self._lane = lane
        self._carriageway_extension_g = carriageway_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'Carriageway':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Carriageway of this Carriageway.  # noqa: E501
        :rtype: Carriageway
        """
        return util.deserialize_model(dikt, cls)

    @property
    def carriageway(self) -> CarriagewayEnumG:
        """Gets the carriageway of this Carriageway.


        :return: The carriageway of this Carriageway.
        :rtype: CarriagewayEnumG
        """
        return self._carriageway

    @carriageway.setter
    def carriageway(self, carriageway: CarriagewayEnumG):
        """Sets the carriageway of this Carriageway.


        :param carriageway: The carriageway of this Carriageway.
        :type carriageway: CarriagewayEnumG
        """
        if carriageway is None:
            raise ValueError("Invalid value for `carriageway`, must not be `None`")  # noqa: E501

        self._carriageway = carriageway

    @property
    def original_number_of_lanes(self) -> int:
        """Gets the original_number_of_lanes of this Carriageway.


        :return: The original_number_of_lanes of this Carriageway.
        :rtype: int
        """
        return self._original_number_of_lanes

    @original_number_of_lanes.setter
    def original_number_of_lanes(self, original_number_of_lanes: int):
        """Sets the original_number_of_lanes of this Carriageway.


        :param original_number_of_lanes: The original_number_of_lanes of this Carriageway.
        :type original_number_of_lanes: int
        """

        self._original_number_of_lanes = original_number_of_lanes

    @property
    def lane(self) -> List[Lane]:
        """Gets the lane of this Carriageway.


        :return: The lane of this Carriageway.
        :rtype: List[Lane]
        """
        return self._lane

    @lane.setter
    def lane(self, lane: List[Lane]):
        """Sets the lane of this Carriageway.


        :param lane: The lane of this Carriageway.
        :type lane: List[Lane]
        """
        if lane is not None and len(lane) < 0:
            raise ValueError("Invalid value for `lane`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._lane = lane

    @property
    def carriageway_extension_g(self) -> Dict[str, object]:
        """Gets the carriageway_extension_g of this Carriageway.


        :return: The carriageway_extension_g of this Carriageway.
        :rtype: Dict[str, object]
        """
        return self._carriageway_extension_g

    @carriageway_extension_g.setter
    def carriageway_extension_g(self, carriageway_extension_g: Dict[str, object]):
        """Sets the carriageway_extension_g of this Carriageway.


        :param carriageway_extension_g: The carriageway_extension_g of this Carriageway.
        :type carriageway_extension_g: Dict[str, object]
        """

        self._carriageway_extension_g = carriageway_extension_g
