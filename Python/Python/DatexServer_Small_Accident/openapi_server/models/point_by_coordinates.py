from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.point_coordinates import PointCoordinates
from openapi_server import util

from openapi_server.models.point_coordinates import PointCoordinates  # noqa: E501

class PointByCoordinates(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bearing=None, point_coordinates=None, point_by_coordinates_extension_g=None):  # noqa: E501
        """PointByCoordinates - a model defined in OpenAPI

        :param bearing: The bearing of this PointByCoordinates.  # noqa: E501
        :type bearing: int
        :param point_coordinates: The point_coordinates of this PointByCoordinates.  # noqa: E501
        :type point_coordinates: PointCoordinates
        :param point_by_coordinates_extension_g: The point_by_coordinates_extension_g of this PointByCoordinates.  # noqa: E501
        :type point_by_coordinates_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'bearing': int,
            'point_coordinates': PointCoordinates,
            'point_by_coordinates_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'bearing': 'bearing',
            'point_coordinates': 'pointCoordinates',
            'point_by_coordinates_extension_g': 'pointByCoordinatesExtensionG'
        }

        self._bearing = bearing
        self._point_coordinates = point_coordinates
        self._point_by_coordinates_extension_g = point_by_coordinates_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'PointByCoordinates':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PointByCoordinates of this PointByCoordinates.  # noqa: E501
        :rtype: PointByCoordinates
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bearing(self) -> int:
        """Gets the bearing of this PointByCoordinates.


        :return: The bearing of this PointByCoordinates.
        :rtype: int
        """
        return self._bearing

    @bearing.setter
    def bearing(self, bearing: int):
        """Sets the bearing of this PointByCoordinates.


        :param bearing: The bearing of this PointByCoordinates.
        :type bearing: int
        """
        if bearing is not None and bearing < 0:  # noqa: E501
            raise ValueError("Invalid value for `bearing`, must be a value greater than or equal to `0`")  # noqa: E501

        self._bearing = bearing

    @property
    def point_coordinates(self) -> PointCoordinates:
        """Gets the point_coordinates of this PointByCoordinates.


        :return: The point_coordinates of this PointByCoordinates.
        :rtype: PointCoordinates
        """
        return self._point_coordinates

    @point_coordinates.setter
    def point_coordinates(self, point_coordinates: PointCoordinates):
        """Sets the point_coordinates of this PointByCoordinates.


        :param point_coordinates: The point_coordinates of this PointByCoordinates.
        :type point_coordinates: PointCoordinates
        """
        if point_coordinates is None:
            raise ValueError("Invalid value for `point_coordinates`, must not be `None`")  # noqa: E501

        self._point_coordinates = point_coordinates

    @property
    def point_by_coordinates_extension_g(self) -> Dict[str, object]:
        """Gets the point_by_coordinates_extension_g of this PointByCoordinates.


        :return: The point_by_coordinates_extension_g of this PointByCoordinates.
        :rtype: Dict[str, object]
        """
        return self._point_by_coordinates_extension_g

    @point_by_coordinates_extension_g.setter
    def point_by_coordinates_extension_g(self, point_by_coordinates_extension_g: Dict[str, object]):
        """Sets the point_by_coordinates_extension_g of this PointByCoordinates.


        :param point_by_coordinates_extension_g: The point_by_coordinates_extension_g of this PointByCoordinates.
        :type point_by_coordinates_extension_g: Dict[str, object]
        """

        self._point_by_coordinates_extension_g = point_by_coordinates_extension_g
