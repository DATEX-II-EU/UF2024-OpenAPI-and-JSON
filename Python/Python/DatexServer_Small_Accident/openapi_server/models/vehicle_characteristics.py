from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.emissions import Emissions
from openapi_server.models.fuel_type_enum_g import FuelTypeEnumG
from openapi_server.models.gross_weight_characteristic import GrossWeightCharacteristic
from openapi_server.models.heaviest_axle_weight_characteristic import HeaviestAxleWeightCharacteristic
from openapi_server.models.height_characteristic import HeightCharacteristic
from openapi_server.models.length_characteristic import LengthCharacteristic
from openapi_server.models.load_type_enum_g import LoadTypeEnumG
from openapi_server.models.number_of_axles_characteristic import NumberOfAxlesCharacteristic
from openapi_server.models.vehicle_equipment_enum_g import VehicleEquipmentEnumG
from openapi_server.models.vehicle_type_enum_g import VehicleTypeEnumG
from openapi_server.models.vehicle_usage_enum_g import VehicleUsageEnumG
from openapi_server.models.width_characteristic import WidthCharacteristic
from openapi_server import util

from openapi_server.models.emissions import Emissions  # noqa: E501
from openapi_server.models.fuel_type_enum_g import FuelTypeEnumG  # noqa: E501
from openapi_server.models.gross_weight_characteristic import GrossWeightCharacteristic  # noqa: E501
from openapi_server.models.heaviest_axle_weight_characteristic import HeaviestAxleWeightCharacteristic  # noqa: E501
from openapi_server.models.height_characteristic import HeightCharacteristic  # noqa: E501
from openapi_server.models.length_characteristic import LengthCharacteristic  # noqa: E501
from openapi_server.models.load_type_enum_g import LoadTypeEnumG  # noqa: E501
from openapi_server.models.number_of_axles_characteristic import NumberOfAxlesCharacteristic  # noqa: E501
from openapi_server.models.vehicle_equipment_enum_g import VehicleEquipmentEnumG  # noqa: E501
from openapi_server.models.vehicle_type_enum_g import VehicleTypeEnumG  # noqa: E501
from openapi_server.models.vehicle_usage_enum_g import VehicleUsageEnumG  # noqa: E501
from openapi_server.models.width_characteristic import WidthCharacteristic  # noqa: E501

class VehicleCharacteristics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fuel_type=None, load_type=None, vehicle_equipment=None, vehicle_type=None, vehicle_usage=None, year_of_first_registration=None, gross_weight_characteristic=None, height_characteristic=None, length_characteristic=None, width_characteristic=None, heaviest_axle_weight_characteristic=None, number_of_axles_characteristic=None, emissions=None, vehicle_characteristics_extension_g=None):  # noqa: E501
        """VehicleCharacteristics - a model defined in OpenAPI

        :param fuel_type: The fuel_type of this VehicleCharacteristics.  # noqa: E501
        :type fuel_type: List[FuelTypeEnumG]
        :param load_type: The load_type of this VehicleCharacteristics.  # noqa: E501
        :type load_type: LoadTypeEnumG
        :param vehicle_equipment: The vehicle_equipment of this VehicleCharacteristics.  # noqa: E501
        :type vehicle_equipment: VehicleEquipmentEnumG
        :param vehicle_type: The vehicle_type of this VehicleCharacteristics.  # noqa: E501
        :type vehicle_type: List[VehicleTypeEnumG]
        :param vehicle_usage: The vehicle_usage of this VehicleCharacteristics.  # noqa: E501
        :type vehicle_usage: VehicleUsageEnumG
        :param year_of_first_registration: The year_of_first_registration of this VehicleCharacteristics.  # noqa: E501
        :type year_of_first_registration: int
        :param gross_weight_characteristic: The gross_weight_characteristic of this VehicleCharacteristics.  # noqa: E501
        :type gross_weight_characteristic: List[GrossWeightCharacteristic]
        :param height_characteristic: The height_characteristic of this VehicleCharacteristics.  # noqa: E501
        :type height_characteristic: List[HeightCharacteristic]
        :param length_characteristic: The length_characteristic of this VehicleCharacteristics.  # noqa: E501
        :type length_characteristic: List[LengthCharacteristic]
        :param width_characteristic: The width_characteristic of this VehicleCharacteristics.  # noqa: E501
        :type width_characteristic: List[WidthCharacteristic]
        :param heaviest_axle_weight_characteristic: The heaviest_axle_weight_characteristic of this VehicleCharacteristics.  # noqa: E501
        :type heaviest_axle_weight_characteristic: List[HeaviestAxleWeightCharacteristic]
        :param number_of_axles_characteristic: The number_of_axles_characteristic of this VehicleCharacteristics.  # noqa: E501
        :type number_of_axles_characteristic: List[NumberOfAxlesCharacteristic]
        :param emissions: The emissions of this VehicleCharacteristics.  # noqa: E501
        :type emissions: Emissions
        :param vehicle_characteristics_extension_g: The vehicle_characteristics_extension_g of this VehicleCharacteristics.  # noqa: E501
        :type vehicle_characteristics_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'fuel_type': List[FuelTypeEnumG],
            'load_type': LoadTypeEnumG,
            'vehicle_equipment': VehicleEquipmentEnumG,
            'vehicle_type': List[VehicleTypeEnumG],
            'vehicle_usage': VehicleUsageEnumG,
            'year_of_first_registration': int,
            'gross_weight_characteristic': List[GrossWeightCharacteristic],
            'height_characteristic': List[HeightCharacteristic],
            'length_characteristic': List[LengthCharacteristic],
            'width_characteristic': List[WidthCharacteristic],
            'heaviest_axle_weight_characteristic': List[HeaviestAxleWeightCharacteristic],
            'number_of_axles_characteristic': List[NumberOfAxlesCharacteristic],
            'emissions': Emissions,
            'vehicle_characteristics_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'fuel_type': 'fuelType',
            'load_type': 'loadType',
            'vehicle_equipment': 'vehicleEquipment',
            'vehicle_type': 'vehicleType',
            'vehicle_usage': 'vehicleUsage',
            'year_of_first_registration': 'yearOfFirstRegistration',
            'gross_weight_characteristic': 'grossWeightCharacteristic',
            'height_characteristic': 'heightCharacteristic',
            'length_characteristic': 'lengthCharacteristic',
            'width_characteristic': 'widthCharacteristic',
            'heaviest_axle_weight_characteristic': 'heaviestAxleWeightCharacteristic',
            'number_of_axles_characteristic': 'numberOfAxlesCharacteristic',
            'emissions': 'emissions',
            'vehicle_characteristics_extension_g': 'vehicleCharacteristicsExtensionG'
        }

        self._fuel_type = fuel_type
        self._load_type = load_type
        self._vehicle_equipment = vehicle_equipment
        self._vehicle_type = vehicle_type
        self._vehicle_usage = vehicle_usage
        self._year_of_first_registration = year_of_first_registration
        self._gross_weight_characteristic = gross_weight_characteristic
        self._height_characteristic = height_characteristic
        self._length_characteristic = length_characteristic
        self._width_characteristic = width_characteristic
        self._heaviest_axle_weight_characteristic = heaviest_axle_weight_characteristic
        self._number_of_axles_characteristic = number_of_axles_characteristic
        self._emissions = emissions
        self._vehicle_characteristics_extension_g = vehicle_characteristics_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'VehicleCharacteristics':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VehicleCharacteristics of this VehicleCharacteristics.  # noqa: E501
        :rtype: VehicleCharacteristics
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fuel_type(self) -> List[FuelTypeEnumG]:
        """Gets the fuel_type of this VehicleCharacteristics.


        :return: The fuel_type of this VehicleCharacteristics.
        :rtype: List[FuelTypeEnumG]
        """
        return self._fuel_type

    @fuel_type.setter
    def fuel_type(self, fuel_type: List[FuelTypeEnumG]):
        """Sets the fuel_type of this VehicleCharacteristics.


        :param fuel_type: The fuel_type of this VehicleCharacteristics.
        :type fuel_type: List[FuelTypeEnumG]
        """
        if fuel_type is not None and len(fuel_type) < 0:
            raise ValueError("Invalid value for `fuel_type`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._fuel_type = fuel_type

    @property
    def load_type(self) -> LoadTypeEnumG:
        """Gets the load_type of this VehicleCharacteristics.


        :return: The load_type of this VehicleCharacteristics.
        :rtype: LoadTypeEnumG
        """
        return self._load_type

    @load_type.setter
    def load_type(self, load_type: LoadTypeEnumG):
        """Sets the load_type of this VehicleCharacteristics.


        :param load_type: The load_type of this VehicleCharacteristics.
        :type load_type: LoadTypeEnumG
        """

        self._load_type = load_type

    @property
    def vehicle_equipment(self) -> VehicleEquipmentEnumG:
        """Gets the vehicle_equipment of this VehicleCharacteristics.


        :return: The vehicle_equipment of this VehicleCharacteristics.
        :rtype: VehicleEquipmentEnumG
        """
        return self._vehicle_equipment

    @vehicle_equipment.setter
    def vehicle_equipment(self, vehicle_equipment: VehicleEquipmentEnumG):
        """Sets the vehicle_equipment of this VehicleCharacteristics.


        :param vehicle_equipment: The vehicle_equipment of this VehicleCharacteristics.
        :type vehicle_equipment: VehicleEquipmentEnumG
        """

        self._vehicle_equipment = vehicle_equipment

    @property
    def vehicle_type(self) -> List[VehicleTypeEnumG]:
        """Gets the vehicle_type of this VehicleCharacteristics.


        :return: The vehicle_type of this VehicleCharacteristics.
        :rtype: List[VehicleTypeEnumG]
        """
        return self._vehicle_type

    @vehicle_type.setter
    def vehicle_type(self, vehicle_type: List[VehicleTypeEnumG]):
        """Sets the vehicle_type of this VehicleCharacteristics.


        :param vehicle_type: The vehicle_type of this VehicleCharacteristics.
        :type vehicle_type: List[VehicleTypeEnumG]
        """
        if vehicle_type is not None and len(vehicle_type) < 0:
            raise ValueError("Invalid value for `vehicle_type`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._vehicle_type = vehicle_type

    @property
    def vehicle_usage(self) -> VehicleUsageEnumG:
        """Gets the vehicle_usage of this VehicleCharacteristics.


        :return: The vehicle_usage of this VehicleCharacteristics.
        :rtype: VehicleUsageEnumG
        """
        return self._vehicle_usage

    @vehicle_usage.setter
    def vehicle_usage(self, vehicle_usage: VehicleUsageEnumG):
        """Sets the vehicle_usage of this VehicleCharacteristics.


        :param vehicle_usage: The vehicle_usage of this VehicleCharacteristics.
        :type vehicle_usage: VehicleUsageEnumG
        """

        self._vehicle_usage = vehicle_usage

    @property
    def year_of_first_registration(self) -> int:
        """Gets the year_of_first_registration of this VehicleCharacteristics.


        :return: The year_of_first_registration of this VehicleCharacteristics.
        :rtype: int
        """
        return self._year_of_first_registration

    @year_of_first_registration.setter
    def year_of_first_registration(self, year_of_first_registration: int):
        """Sets the year_of_first_registration of this VehicleCharacteristics.


        :param year_of_first_registration: The year_of_first_registration of this VehicleCharacteristics.
        :type year_of_first_registration: int
        """
        if year_of_first_registration is not None and year_of_first_registration < 0:  # noqa: E501
            raise ValueError("Invalid value for `year_of_first_registration`, must be a value greater than or equal to `0`")  # noqa: E501

        self._year_of_first_registration = year_of_first_registration

    @property
    def gross_weight_characteristic(self) -> List[GrossWeightCharacteristic]:
        """Gets the gross_weight_characteristic of this VehicleCharacteristics.


        :return: The gross_weight_characteristic of this VehicleCharacteristics.
        :rtype: List[GrossWeightCharacteristic]
        """
        return self._gross_weight_characteristic

    @gross_weight_characteristic.setter
    def gross_weight_characteristic(self, gross_weight_characteristic: List[GrossWeightCharacteristic]):
        """Sets the gross_weight_characteristic of this VehicleCharacteristics.


        :param gross_weight_characteristic: The gross_weight_characteristic of this VehicleCharacteristics.
        :type gross_weight_characteristic: List[GrossWeightCharacteristic]
        """
        if gross_weight_characteristic is not None and len(gross_weight_characteristic) > 2:
            raise ValueError("Invalid value for `gross_weight_characteristic`, number of items must be less than or equal to `2`")  # noqa: E501
        if gross_weight_characteristic is not None and len(gross_weight_characteristic) < 0:
            raise ValueError("Invalid value for `gross_weight_characteristic`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._gross_weight_characteristic = gross_weight_characteristic

    @property
    def height_characteristic(self) -> List[HeightCharacteristic]:
        """Gets the height_characteristic of this VehicleCharacteristics.


        :return: The height_characteristic of this VehicleCharacteristics.
        :rtype: List[HeightCharacteristic]
        """
        return self._height_characteristic

    @height_characteristic.setter
    def height_characteristic(self, height_characteristic: List[HeightCharacteristic]):
        """Sets the height_characteristic of this VehicleCharacteristics.


        :param height_characteristic: The height_characteristic of this VehicleCharacteristics.
        :type height_characteristic: List[HeightCharacteristic]
        """
        if height_characteristic is not None and len(height_characteristic) > 2:
            raise ValueError("Invalid value for `height_characteristic`, number of items must be less than or equal to `2`")  # noqa: E501
        if height_characteristic is not None and len(height_characteristic) < 0:
            raise ValueError("Invalid value for `height_characteristic`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._height_characteristic = height_characteristic

    @property
    def length_characteristic(self) -> List[LengthCharacteristic]:
        """Gets the length_characteristic of this VehicleCharacteristics.


        :return: The length_characteristic of this VehicleCharacteristics.
        :rtype: List[LengthCharacteristic]
        """
        return self._length_characteristic

    @length_characteristic.setter
    def length_characteristic(self, length_characteristic: List[LengthCharacteristic]):
        """Sets the length_characteristic of this VehicleCharacteristics.


        :param length_characteristic: The length_characteristic of this VehicleCharacteristics.
        :type length_characteristic: List[LengthCharacteristic]
        """
        if length_characteristic is not None and len(length_characteristic) > 2:
            raise ValueError("Invalid value for `length_characteristic`, number of items must be less than or equal to `2`")  # noqa: E501
        if length_characteristic is not None and len(length_characteristic) < 0:
            raise ValueError("Invalid value for `length_characteristic`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._length_characteristic = length_characteristic

    @property
    def width_characteristic(self) -> List[WidthCharacteristic]:
        """Gets the width_characteristic of this VehicleCharacteristics.


        :return: The width_characteristic of this VehicleCharacteristics.
        :rtype: List[WidthCharacteristic]
        """
        return self._width_characteristic

    @width_characteristic.setter
    def width_characteristic(self, width_characteristic: List[WidthCharacteristic]):
        """Sets the width_characteristic of this VehicleCharacteristics.


        :param width_characteristic: The width_characteristic of this VehicleCharacteristics.
        :type width_characteristic: List[WidthCharacteristic]
        """
        if width_characteristic is not None and len(width_characteristic) > 2:
            raise ValueError("Invalid value for `width_characteristic`, number of items must be less than or equal to `2`")  # noqa: E501
        if width_characteristic is not None and len(width_characteristic) < 0:
            raise ValueError("Invalid value for `width_characteristic`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._width_characteristic = width_characteristic

    @property
    def heaviest_axle_weight_characteristic(self) -> List[HeaviestAxleWeightCharacteristic]:
        """Gets the heaviest_axle_weight_characteristic of this VehicleCharacteristics.


        :return: The heaviest_axle_weight_characteristic of this VehicleCharacteristics.
        :rtype: List[HeaviestAxleWeightCharacteristic]
        """
        return self._heaviest_axle_weight_characteristic

    @heaviest_axle_weight_characteristic.setter
    def heaviest_axle_weight_characteristic(self, heaviest_axle_weight_characteristic: List[HeaviestAxleWeightCharacteristic]):
        """Sets the heaviest_axle_weight_characteristic of this VehicleCharacteristics.


        :param heaviest_axle_weight_characteristic: The heaviest_axle_weight_characteristic of this VehicleCharacteristics.
        :type heaviest_axle_weight_characteristic: List[HeaviestAxleWeightCharacteristic]
        """
        if heaviest_axle_weight_characteristic is not None and len(heaviest_axle_weight_characteristic) > 2:
            raise ValueError("Invalid value for `heaviest_axle_weight_characteristic`, number of items must be less than or equal to `2`")  # noqa: E501
        if heaviest_axle_weight_characteristic is not None and len(heaviest_axle_weight_characteristic) < 0:
            raise ValueError("Invalid value for `heaviest_axle_weight_characteristic`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._heaviest_axle_weight_characteristic = heaviest_axle_weight_characteristic

    @property
    def number_of_axles_characteristic(self) -> List[NumberOfAxlesCharacteristic]:
        """Gets the number_of_axles_characteristic of this VehicleCharacteristics.


        :return: The number_of_axles_characteristic of this VehicleCharacteristics.
        :rtype: List[NumberOfAxlesCharacteristic]
        """
        return self._number_of_axles_characteristic

    @number_of_axles_characteristic.setter
    def number_of_axles_characteristic(self, number_of_axles_characteristic: List[NumberOfAxlesCharacteristic]):
        """Sets the number_of_axles_characteristic of this VehicleCharacteristics.


        :param number_of_axles_characteristic: The number_of_axles_characteristic of this VehicleCharacteristics.
        :type number_of_axles_characteristic: List[NumberOfAxlesCharacteristic]
        """
        if number_of_axles_characteristic is not None and len(number_of_axles_characteristic) > 2:
            raise ValueError("Invalid value for `number_of_axles_characteristic`, number of items must be less than or equal to `2`")  # noqa: E501
        if number_of_axles_characteristic is not None and len(number_of_axles_characteristic) < 0:
            raise ValueError("Invalid value for `number_of_axles_characteristic`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._number_of_axles_characteristic = number_of_axles_characteristic

    @property
    def emissions(self) -> Emissions:
        """Gets the emissions of this VehicleCharacteristics.


        :return: The emissions of this VehicleCharacteristics.
        :rtype: Emissions
        """
        return self._emissions

    @emissions.setter
    def emissions(self, emissions: Emissions):
        """Sets the emissions of this VehicleCharacteristics.


        :param emissions: The emissions of this VehicleCharacteristics.
        :type emissions: Emissions
        """

        self._emissions = emissions

    @property
    def vehicle_characteristics_extension_g(self) -> Dict[str, object]:
        """Gets the vehicle_characteristics_extension_g of this VehicleCharacteristics.


        :return: The vehicle_characteristics_extension_g of this VehicleCharacteristics.
        :rtype: Dict[str, object]
        """
        return self._vehicle_characteristics_extension_g

    @vehicle_characteristics_extension_g.setter
    def vehicle_characteristics_extension_g(self, vehicle_characteristics_extension_g: Dict[str, object]):
        """Sets the vehicle_characteristics_extension_g of this VehicleCharacteristics.


        :param vehicle_characteristics_extension_g: The vehicle_characteristics_extension_g of this VehicleCharacteristics.
        :type vehicle_characteristics_extension_g: Dict[str, object]
        """

        self._vehicle_characteristics_extension_g = vehicle_characteristics_extension_g
