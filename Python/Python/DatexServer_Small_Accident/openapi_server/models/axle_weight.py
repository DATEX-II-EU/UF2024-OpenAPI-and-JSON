from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class AxleWeight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, axle_position_identifier=None, axle_weight=None, maximum_permitted_axle_weight=None, axle_weight_extension_g=None):  # noqa: E501
        """AxleWeight - a model defined in OpenAPI

        :param axle_position_identifier: The axle_position_identifier of this AxleWeight.  # noqa: E501
        :type axle_position_identifier: int
        :param axle_weight: The axle_weight of this AxleWeight.  # noqa: E501
        :type axle_weight: float
        :param maximum_permitted_axle_weight: The maximum_permitted_axle_weight of this AxleWeight.  # noqa: E501
        :type maximum_permitted_axle_weight: float
        :param axle_weight_extension_g: The axle_weight_extension_g of this AxleWeight.  # noqa: E501
        :type axle_weight_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'axle_position_identifier': int,
            'axle_weight': float,
            'maximum_permitted_axle_weight': float,
            'axle_weight_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'axle_position_identifier': 'axlePositionIdentifier',
            'axle_weight': 'axleWeight',
            'maximum_permitted_axle_weight': 'maximumPermittedAxleWeight',
            'axle_weight_extension_g': 'axleWeightExtensionG'
        }

        self._axle_position_identifier = axle_position_identifier
        self._axle_weight = axle_weight
        self._maximum_permitted_axle_weight = maximum_permitted_axle_weight
        self._axle_weight_extension_g = axle_weight_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'AxleWeight':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AxleWeight of this AxleWeight.  # noqa: E501
        :rtype: AxleWeight
        """
        return util.deserialize_model(dikt, cls)

    @property
    def axle_position_identifier(self) -> int:
        """Gets the axle_position_identifier of this AxleWeight.


        :return: The axle_position_identifier of this AxleWeight.
        :rtype: int
        """
        return self._axle_position_identifier

    @axle_position_identifier.setter
    def axle_position_identifier(self, axle_position_identifier: int):
        """Sets the axle_position_identifier of this AxleWeight.


        :param axle_position_identifier: The axle_position_identifier of this AxleWeight.
        :type axle_position_identifier: int
        """
        if axle_position_identifier is None:
            raise ValueError("Invalid value for `axle_position_identifier`, must not be `None`")  # noqa: E501
        if axle_position_identifier is not None and axle_position_identifier < 0:  # noqa: E501
            raise ValueError("Invalid value for `axle_position_identifier`, must be a value greater than or equal to `0`")  # noqa: E501

        self._axle_position_identifier = axle_position_identifier

    @property
    def axle_weight(self) -> float:
        """Gets the axle_weight of this AxleWeight.


        :return: The axle_weight of this AxleWeight.
        :rtype: float
        """
        return self._axle_weight

    @axle_weight.setter
    def axle_weight(self, axle_weight: float):
        """Sets the axle_weight of this AxleWeight.


        :param axle_weight: The axle_weight of this AxleWeight.
        :type axle_weight: float
        """

        self._axle_weight = axle_weight

    @property
    def maximum_permitted_axle_weight(self) -> float:
        """Gets the maximum_permitted_axle_weight of this AxleWeight.


        :return: The maximum_permitted_axle_weight of this AxleWeight.
        :rtype: float
        """
        return self._maximum_permitted_axle_weight

    @maximum_permitted_axle_weight.setter
    def maximum_permitted_axle_weight(self, maximum_permitted_axle_weight: float):
        """Sets the maximum_permitted_axle_weight of this AxleWeight.


        :param maximum_permitted_axle_weight: The maximum_permitted_axle_weight of this AxleWeight.
        :type maximum_permitted_axle_weight: float
        """

        self._maximum_permitted_axle_weight = maximum_permitted_axle_weight

    @property
    def axle_weight_extension_g(self) -> Dict[str, object]:
        """Gets the axle_weight_extension_g of this AxleWeight.


        :return: The axle_weight_extension_g of this AxleWeight.
        :rtype: Dict[str, object]
        """
        return self._axle_weight_extension_g

    @axle_weight_extension_g.setter
    def axle_weight_extension_g(self, axle_weight_extension_g: Dict[str, object]):
        """Sets the axle_weight_extension_g of this AxleWeight.


        :param axle_weight_extension_g: The axle_weight_extension_g of this AxleWeight.
        :type axle_weight_extension_g: Dict[str, object]
        """

        self._axle_weight_extension_g = axle_weight_extension_g
