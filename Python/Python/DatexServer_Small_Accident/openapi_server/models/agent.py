from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.international_identifier import InternationalIdentifier
from openapi_server import util

from openapi_server.models.international_identifier import InternationalIdentifier  # noqa: E501

class Agent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address=None, name=None, reference_id=None, service_url=None, international_identifier=None, agent_extension_g=None):  # noqa: E501
        """Agent - a model defined in OpenAPI

        :param address: The address of this Agent.  # noqa: E501
        :type address: str
        :param name: The name of this Agent.  # noqa: E501
        :type name: str
        :param reference_id: The reference_id of this Agent.  # noqa: E501
        :type reference_id: str
        :param service_url: The service_url of this Agent.  # noqa: E501
        :type service_url: str
        :param international_identifier: The international_identifier of this Agent.  # noqa: E501
        :type international_identifier: InternationalIdentifier
        :param agent_extension_g: The agent_extension_g of this Agent.  # noqa: E501
        :type agent_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'address': str,
            'name': str,
            'reference_id': str,
            'service_url': str,
            'international_identifier': InternationalIdentifier,
            'agent_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'address': 'address',
            'name': 'name',
            'reference_id': 'referenceID',
            'service_url': 'serviceURL',
            'international_identifier': 'internationalIdentifier',
            'agent_extension_g': 'agentExtensionG'
        }

        self._address = address
        self._name = name
        self._reference_id = reference_id
        self._service_url = service_url
        self._international_identifier = international_identifier
        self._agent_extension_g = agent_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'Agent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Agent of this Agent.  # noqa: E501
        :rtype: Agent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self) -> str:
        """Gets the address of this Agent.


        :return: The address of this Agent.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this Agent.


        :param address: The address of this Agent.
        :type address: str
        """
        if address is not None and len(address) > 1024:
            raise ValueError("Invalid value for `address`, length must be less than or equal to `1024`")  # noqa: E501

        self._address = address

    @property
    def name(self) -> str:
        """Gets the name of this Agent.


        :return: The name of this Agent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Agent.


        :param name: The name of this Agent.
        :type name: str
        """
        if name is not None and len(name) > 1024:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `1024`")  # noqa: E501

        self._name = name

    @property
    def reference_id(self) -> str:
        """Gets the reference_id of this Agent.


        :return: The reference_id of this Agent.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id: str):
        """Sets the reference_id of this Agent.


        :param reference_id: The reference_id of this Agent.
        :type reference_id: str
        """
        if reference_id is not None and len(reference_id) > 1024:
            raise ValueError("Invalid value for `reference_id`, length must be less than or equal to `1024`")  # noqa: E501

        self._reference_id = reference_id

    @property
    def service_url(self) -> str:
        """Gets the service_url of this Agent.


        :return: The service_url of this Agent.
        :rtype: str
        """
        return self._service_url

    @service_url.setter
    def service_url(self, service_url: str):
        """Sets the service_url of this Agent.


        :param service_url: The service_url of this Agent.
        :type service_url: str
        """
        if service_url is not None and len(service_url) > 1024:
            raise ValueError("Invalid value for `service_url`, length must be less than or equal to `1024`")  # noqa: E501

        self._service_url = service_url

    @property
    def international_identifier(self) -> InternationalIdentifier:
        """Gets the international_identifier of this Agent.


        :return: The international_identifier of this Agent.
        :rtype: InternationalIdentifier
        """
        return self._international_identifier

    @international_identifier.setter
    def international_identifier(self, international_identifier: InternationalIdentifier):
        """Sets the international_identifier of this Agent.


        :param international_identifier: The international_identifier of this Agent.
        :type international_identifier: InternationalIdentifier
        """

        self._international_identifier = international_identifier

    @property
    def agent_extension_g(self) -> Dict[str, object]:
        """Gets the agent_extension_g of this Agent.


        :return: The agent_extension_g of this Agent.
        :rtype: Dict[str, object]
        """
        return self._agent_extension_g

    @agent_extension_g.setter
    def agent_extension_g(self, agent_extension_g: Dict[str, object]):
        """Sets the agent_extension_g of this Agent.


        :param agent_extension_g: The agent_extension_g of this Agent.
        :type agent_extension_g: Dict[str, object]
        """

        self._agent_extension_g = agent_extension_g
