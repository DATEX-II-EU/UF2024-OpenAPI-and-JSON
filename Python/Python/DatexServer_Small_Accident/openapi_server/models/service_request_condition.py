from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.multilingual_string import MultilingualString
from openapi_server.models.reference import Reference
from openapi_server.models.versioned_reference import VersionedReference
from openapi_server import util

from openapi_server.models.multilingual_string import MultilingualString  # noqa: E501
from openapi_server.models.reference import Reference  # noqa: E501
from openapi_server.models.versioned_reference import VersionedReference  # noqa: E501

class ServiceRequestCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition_description=None, external_id_condition=None, referenced_condition=None, version_referenced_condition=None, service_request_condition_extension_g=None):  # noqa: E501
        """ServiceRequestCondition - a model defined in OpenAPI

        :param condition_description: The condition_description of this ServiceRequestCondition.  # noqa: E501
        :type condition_description: MultilingualString
        :param external_id_condition: The external_id_condition of this ServiceRequestCondition.  # noqa: E501
        :type external_id_condition: List[str]
        :param referenced_condition: The referenced_condition of this ServiceRequestCondition.  # noqa: E501
        :type referenced_condition: List[Reference]
        :param version_referenced_condition: The version_referenced_condition of this ServiceRequestCondition.  # noqa: E501
        :type version_referenced_condition: List[VersionedReference]
        :param service_request_condition_extension_g: The service_request_condition_extension_g of this ServiceRequestCondition.  # noqa: E501
        :type service_request_condition_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'condition_description': MultilingualString,
            'external_id_condition': List[str],
            'referenced_condition': List[Reference],
            'version_referenced_condition': List[VersionedReference],
            'service_request_condition_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'condition_description': 'conditionDescription',
            'external_id_condition': 'externalIdCondition',
            'referenced_condition': 'referencedCondition',
            'version_referenced_condition': 'versionReferencedCondition',
            'service_request_condition_extension_g': 'serviceRequestConditionExtensionG'
        }

        self._condition_description = condition_description
        self._external_id_condition = external_id_condition
        self._referenced_condition = referenced_condition
        self._version_referenced_condition = version_referenced_condition
        self._service_request_condition_extension_g = service_request_condition_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceRequestCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceRequestCondition of this ServiceRequestCondition.  # noqa: E501
        :rtype: ServiceRequestCondition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition_description(self) -> MultilingualString:
        """Gets the condition_description of this ServiceRequestCondition.


        :return: The condition_description of this ServiceRequestCondition.
        :rtype: MultilingualString
        """
        return self._condition_description

    @condition_description.setter
    def condition_description(self, condition_description: MultilingualString):
        """Sets the condition_description of this ServiceRequestCondition.


        :param condition_description: The condition_description of this ServiceRequestCondition.
        :type condition_description: MultilingualString
        """

        self._condition_description = condition_description

    @property
    def external_id_condition(self) -> List[str]:
        """Gets the external_id_condition of this ServiceRequestCondition.


        :return: The external_id_condition of this ServiceRequestCondition.
        :rtype: List[str]
        """
        return self._external_id_condition

    @external_id_condition.setter
    def external_id_condition(self, external_id_condition: List[str]):
        """Sets the external_id_condition of this ServiceRequestCondition.


        :param external_id_condition: The external_id_condition of this ServiceRequestCondition.
        :type external_id_condition: List[str]
        """
        if external_id_condition is not None and len(external_id_condition) < 0:
            raise ValueError("Invalid value for `external_id_condition`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._external_id_condition = external_id_condition

    @property
    def referenced_condition(self) -> List[Reference]:
        """Gets the referenced_condition of this ServiceRequestCondition.


        :return: The referenced_condition of this ServiceRequestCondition.
        :rtype: List[Reference]
        """
        return self._referenced_condition

    @referenced_condition.setter
    def referenced_condition(self, referenced_condition: List[Reference]):
        """Sets the referenced_condition of this ServiceRequestCondition.


        :param referenced_condition: The referenced_condition of this ServiceRequestCondition.
        :type referenced_condition: List[Reference]
        """
        if referenced_condition is not None and len(referenced_condition) < 0:
            raise ValueError("Invalid value for `referenced_condition`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._referenced_condition = referenced_condition

    @property
    def version_referenced_condition(self) -> List[VersionedReference]:
        """Gets the version_referenced_condition of this ServiceRequestCondition.


        :return: The version_referenced_condition of this ServiceRequestCondition.
        :rtype: List[VersionedReference]
        """
        return self._version_referenced_condition

    @version_referenced_condition.setter
    def version_referenced_condition(self, version_referenced_condition: List[VersionedReference]):
        """Sets the version_referenced_condition of this ServiceRequestCondition.


        :param version_referenced_condition: The version_referenced_condition of this ServiceRequestCondition.
        :type version_referenced_condition: List[VersionedReference]
        """
        if version_referenced_condition is not None and len(version_referenced_condition) < 0:
            raise ValueError("Invalid value for `version_referenced_condition`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._version_referenced_condition = version_referenced_condition

    @property
    def service_request_condition_extension_g(self) -> Dict[str, object]:
        """Gets the service_request_condition_extension_g of this ServiceRequestCondition.


        :return: The service_request_condition_extension_g of this ServiceRequestCondition.
        :rtype: Dict[str, object]
        """
        return self._service_request_condition_extension_g

    @service_request_condition_extension_g.setter
    def service_request_condition_extension_g(self, service_request_condition_extension_g: Dict[str, object]):
        """Sets the service_request_condition_extension_g of this ServiceRequestCondition.


        :param service_request_condition_extension_g: The service_request_condition_extension_g of this ServiceRequestCondition.
        :type service_request_condition_extension_g: Dict[str, object]
        """

        self._service_request_condition_extension_g = service_request_condition_extension_g
