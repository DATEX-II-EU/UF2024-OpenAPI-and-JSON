from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class VersionedReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id_g=None, version_g=None):  # noqa: E501
        """VersionedReference - a model defined in OpenAPI

        :param id_g: The id_g of this VersionedReference.  # noqa: E501
        :type id_g: str
        :param version_g: The version_g of this VersionedReference.  # noqa: E501
        :type version_g: str
        """
        self.openapi_types = {
            'id_g': str,
            'version_g': str
        }

        self.attribute_map = {
            'id_g': 'idG',
            'version_g': 'versionG'
        }

        self._id_g = id_g
        self._version_g = version_g

    @classmethod
    def from_dict(cls, dikt) -> 'VersionedReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VersionedReference of this VersionedReference.  # noqa: E501
        :rtype: VersionedReference
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_g(self) -> str:
        """Gets the id_g of this VersionedReference.


        :return: The id_g of this VersionedReference.
        :rtype: str
        """
        return self._id_g

    @id_g.setter
    def id_g(self, id_g: str):
        """Sets the id_g of this VersionedReference.


        :param id_g: The id_g of this VersionedReference.
        :type id_g: str
        """
        if id_g is None:
            raise ValueError("Invalid value for `id_g`, must not be `None`")  # noqa: E501

        self._id_g = id_g

    @property
    def version_g(self) -> str:
        """Gets the version_g of this VersionedReference.


        :return: The version_g of this VersionedReference.
        :rtype: str
        """
        return self._version_g

    @version_g.setter
    def version_g(self, version_g: str):
        """Sets the version_g of this VersionedReference.


        :param version_g: The version_g of this VersionedReference.
        :type version_g: str
        """

        self._version_g = version_g
