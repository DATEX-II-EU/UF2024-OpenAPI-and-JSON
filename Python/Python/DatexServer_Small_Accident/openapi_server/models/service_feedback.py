from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.agent import Agent
from openapi_server.models.multilingual_string import MultilingualString
from openapi_server.models.service_action_status_enum_g import ServiceActionStatusEnumG
from openapi_server.models.versioned_reference import VersionedReference
from openapi_server import util

from openapi_server.models.agent import Agent  # noqa: E501
from openapi_server.models.multilingual_string import MultilingualString  # noqa: E501
from openapi_server.models.service_action_status_enum_g import ServiceActionStatusEnumG  # noqa: E501
from openapi_server.models.versioned_reference import VersionedReference  # noqa: E501

class ServiceFeedback(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_request_feedback_reason=None, service_request_status=None, service_request_reference=None, service_provider=None, service_feedback_extension_g=None):  # noqa: E501
        """ServiceFeedback - a model defined in OpenAPI

        :param service_request_feedback_reason: The service_request_feedback_reason of this ServiceFeedback.  # noqa: E501
        :type service_request_feedback_reason: MultilingualString
        :param service_request_status: The service_request_status of this ServiceFeedback.  # noqa: E501
        :type service_request_status: ServiceActionStatusEnumG
        :param service_request_reference: The service_request_reference of this ServiceFeedback.  # noqa: E501
        :type service_request_reference: VersionedReference
        :param service_provider: The service_provider of this ServiceFeedback.  # noqa: E501
        :type service_provider: Agent
        :param service_feedback_extension_g: The service_feedback_extension_g of this ServiceFeedback.  # noqa: E501
        :type service_feedback_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'service_request_feedback_reason': MultilingualString,
            'service_request_status': ServiceActionStatusEnumG,
            'service_request_reference': VersionedReference,
            'service_provider': Agent,
            'service_feedback_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'service_request_feedback_reason': 'serviceRequestFeedbackReason',
            'service_request_status': 'serviceRequestStatus',
            'service_request_reference': 'serviceRequestReference',
            'service_provider': 'serviceProvider',
            'service_feedback_extension_g': 'serviceFeedbackExtensionG'
        }

        self._service_request_feedback_reason = service_request_feedback_reason
        self._service_request_status = service_request_status
        self._service_request_reference = service_request_reference
        self._service_provider = service_provider
        self._service_feedback_extension_g = service_feedback_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceFeedback':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceFeedback of this ServiceFeedback.  # noqa: E501
        :rtype: ServiceFeedback
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_request_feedback_reason(self) -> MultilingualString:
        """Gets the service_request_feedback_reason of this ServiceFeedback.


        :return: The service_request_feedback_reason of this ServiceFeedback.
        :rtype: MultilingualString
        """
        return self._service_request_feedback_reason

    @service_request_feedback_reason.setter
    def service_request_feedback_reason(self, service_request_feedback_reason: MultilingualString):
        """Sets the service_request_feedback_reason of this ServiceFeedback.


        :param service_request_feedback_reason: The service_request_feedback_reason of this ServiceFeedback.
        :type service_request_feedback_reason: MultilingualString
        """

        self._service_request_feedback_reason = service_request_feedback_reason

    @property
    def service_request_status(self) -> ServiceActionStatusEnumG:
        """Gets the service_request_status of this ServiceFeedback.


        :return: The service_request_status of this ServiceFeedback.
        :rtype: ServiceActionStatusEnumG
        """
        return self._service_request_status

    @service_request_status.setter
    def service_request_status(self, service_request_status: ServiceActionStatusEnumG):
        """Sets the service_request_status of this ServiceFeedback.


        :param service_request_status: The service_request_status of this ServiceFeedback.
        :type service_request_status: ServiceActionStatusEnumG
        """
        if service_request_status is None:
            raise ValueError("Invalid value for `service_request_status`, must not be `None`")  # noqa: E501

        self._service_request_status = service_request_status

    @property
    def service_request_reference(self) -> VersionedReference:
        """Gets the service_request_reference of this ServiceFeedback.


        :return: The service_request_reference of this ServiceFeedback.
        :rtype: VersionedReference
        """
        return self._service_request_reference

    @service_request_reference.setter
    def service_request_reference(self, service_request_reference: VersionedReference):
        """Sets the service_request_reference of this ServiceFeedback.


        :param service_request_reference: The service_request_reference of this ServiceFeedback.
        :type service_request_reference: VersionedReference
        """
        if service_request_reference is None:
            raise ValueError("Invalid value for `service_request_reference`, must not be `None`")  # noqa: E501

        self._service_request_reference = service_request_reference

    @property
    def service_provider(self) -> Agent:
        """Gets the service_provider of this ServiceFeedback.


        :return: The service_provider of this ServiceFeedback.
        :rtype: Agent
        """
        return self._service_provider

    @service_provider.setter
    def service_provider(self, service_provider: Agent):
        """Sets the service_provider of this ServiceFeedback.


        :param service_provider: The service_provider of this ServiceFeedback.
        :type service_provider: Agent
        """
        if service_provider is None:
            raise ValueError("Invalid value for `service_provider`, must not be `None`")  # noqa: E501

        self._service_provider = service_provider

    @property
    def service_feedback_extension_g(self) -> Dict[str, object]:
        """Gets the service_feedback_extension_g of this ServiceFeedback.


        :return: The service_feedback_extension_g of this ServiceFeedback.
        :rtype: Dict[str, object]
        """
        return self._service_feedback_extension_g

    @service_feedback_extension_g.setter
    def service_feedback_extension_g(self, service_feedback_extension_g: Dict[str, object]):
        """Sets the service_feedback_extension_g of this ServiceFeedback.


        :param service_feedback_extension_g: The service_feedback_extension_g of this ServiceFeedback.
        :type service_feedback_extension_g: Dict[str, object]
        """

        self._service_feedback_extension_g = service_feedback_extension_g
