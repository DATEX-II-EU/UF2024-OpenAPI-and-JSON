from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.gml_line_string_g import GmlLineStringG
from openapi_server.models.point_coordinates import PointCoordinates
from openapi_server.models.supplementary_positional_description import SupplementaryPositionalDescription
from openapi_server import util

from openapi_server.models.gml_line_string_g import GmlLineStringG  # noqa: E501
from openapi_server.models.point_coordinates import PointCoordinates  # noqa: E501
from openapi_server.models.supplementary_positional_description import SupplementaryPositionalDescription  # noqa: E501

class LinearLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coordinates_for_display=None, supplementary_positional_description=None, gml_line_string=None, location_reference_extension_g=None, location_extension_g=None, network_location_extension_g=None, linear_location_extension_g=None):  # noqa: E501
        """LinearLocation - a model defined in OpenAPI

        :param coordinates_for_display: The coordinates_for_display of this LinearLocation.  # noqa: E501
        :type coordinates_for_display: PointCoordinates
        :param supplementary_positional_description: The supplementary_positional_description of this LinearLocation.  # noqa: E501
        :type supplementary_positional_description: SupplementaryPositionalDescription
        :param gml_line_string: The gml_line_string of this LinearLocation.  # noqa: E501
        :type gml_line_string: GmlLineStringG
        :param location_reference_extension_g: The location_reference_extension_g of this LinearLocation.  # noqa: E501
        :type location_reference_extension_g: Dict[str, object]
        :param location_extension_g: The location_extension_g of this LinearLocation.  # noqa: E501
        :type location_extension_g: Dict[str, object]
        :param network_location_extension_g: The network_location_extension_g of this LinearLocation.  # noqa: E501
        :type network_location_extension_g: Dict[str, object]
        :param linear_location_extension_g: The linear_location_extension_g of this LinearLocation.  # noqa: E501
        :type linear_location_extension_g: Dict[str, object]
        """
        self.openapi_types = {
            'coordinates_for_display': PointCoordinates,
            'supplementary_positional_description': SupplementaryPositionalDescription,
            'gml_line_string': GmlLineStringG,
            'location_reference_extension_g': Dict[str, object],
            'location_extension_g': Dict[str, object],
            'network_location_extension_g': Dict[str, object],
            'linear_location_extension_g': Dict[str, object]
        }

        self.attribute_map = {
            'coordinates_for_display': 'coordinatesForDisplay',
            'supplementary_positional_description': 'supplementaryPositionalDescription',
            'gml_line_string': 'gmlLineString',
            'location_reference_extension_g': 'locationReferenceExtensionG',
            'location_extension_g': 'locationExtensionG',
            'network_location_extension_g': 'networkLocationExtensionG',
            'linear_location_extension_g': 'linearLocationExtensionG'
        }

        self._coordinates_for_display = coordinates_for_display
        self._supplementary_positional_description = supplementary_positional_description
        self._gml_line_string = gml_line_string
        self._location_reference_extension_g = location_reference_extension_g
        self._location_extension_g = location_extension_g
        self._network_location_extension_g = network_location_extension_g
        self._linear_location_extension_g = linear_location_extension_g

    @classmethod
    def from_dict(cls, dikt) -> 'LinearLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LinearLocation of this LinearLocation.  # noqa: E501
        :rtype: LinearLocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coordinates_for_display(self) -> PointCoordinates:
        """Gets the coordinates_for_display of this LinearLocation.


        :return: The coordinates_for_display of this LinearLocation.
        :rtype: PointCoordinates
        """
        return self._coordinates_for_display

    @coordinates_for_display.setter
    def coordinates_for_display(self, coordinates_for_display: PointCoordinates):
        """Sets the coordinates_for_display of this LinearLocation.


        :param coordinates_for_display: The coordinates_for_display of this LinearLocation.
        :type coordinates_for_display: PointCoordinates
        """

        self._coordinates_for_display = coordinates_for_display

    @property
    def supplementary_positional_description(self) -> SupplementaryPositionalDescription:
        """Gets the supplementary_positional_description of this LinearLocation.


        :return: The supplementary_positional_description of this LinearLocation.
        :rtype: SupplementaryPositionalDescription
        """
        return self._supplementary_positional_description

    @supplementary_positional_description.setter
    def supplementary_positional_description(self, supplementary_positional_description: SupplementaryPositionalDescription):
        """Sets the supplementary_positional_description of this LinearLocation.


        :param supplementary_positional_description: The supplementary_positional_description of this LinearLocation.
        :type supplementary_positional_description: SupplementaryPositionalDescription
        """

        self._supplementary_positional_description = supplementary_positional_description

    @property
    def gml_line_string(self) -> GmlLineStringG:
        """Gets the gml_line_string of this LinearLocation.


        :return: The gml_line_string of this LinearLocation.
        :rtype: GmlLineStringG
        """
        return self._gml_line_string

    @gml_line_string.setter
    def gml_line_string(self, gml_line_string: GmlLineStringG):
        """Sets the gml_line_string of this LinearLocation.


        :param gml_line_string: The gml_line_string of this LinearLocation.
        :type gml_line_string: GmlLineStringG
        """

        self._gml_line_string = gml_line_string

    @property
    def location_reference_extension_g(self) -> Dict[str, object]:
        """Gets the location_reference_extension_g of this LinearLocation.


        :return: The location_reference_extension_g of this LinearLocation.
        :rtype: Dict[str, object]
        """
        return self._location_reference_extension_g

    @location_reference_extension_g.setter
    def location_reference_extension_g(self, location_reference_extension_g: Dict[str, object]):
        """Sets the location_reference_extension_g of this LinearLocation.


        :param location_reference_extension_g: The location_reference_extension_g of this LinearLocation.
        :type location_reference_extension_g: Dict[str, object]
        """

        self._location_reference_extension_g = location_reference_extension_g

    @property
    def location_extension_g(self) -> Dict[str, object]:
        """Gets the location_extension_g of this LinearLocation.


        :return: The location_extension_g of this LinearLocation.
        :rtype: Dict[str, object]
        """
        return self._location_extension_g

    @location_extension_g.setter
    def location_extension_g(self, location_extension_g: Dict[str, object]):
        """Sets the location_extension_g of this LinearLocation.


        :param location_extension_g: The location_extension_g of this LinearLocation.
        :type location_extension_g: Dict[str, object]
        """

        self._location_extension_g = location_extension_g

    @property
    def network_location_extension_g(self) -> Dict[str, object]:
        """Gets the network_location_extension_g of this LinearLocation.


        :return: The network_location_extension_g of this LinearLocation.
        :rtype: Dict[str, object]
        """
        return self._network_location_extension_g

    @network_location_extension_g.setter
    def network_location_extension_g(self, network_location_extension_g: Dict[str, object]):
        """Sets the network_location_extension_g of this LinearLocation.


        :param network_location_extension_g: The network_location_extension_g of this LinearLocation.
        :type network_location_extension_g: Dict[str, object]
        """

        self._network_location_extension_g = network_location_extension_g

    @property
    def linear_location_extension_g(self) -> Dict[str, object]:
        """Gets the linear_location_extension_g of this LinearLocation.


        :return: The linear_location_extension_g of this LinearLocation.
        :rtype: Dict[str, object]
        """
        return self._linear_location_extension_g

    @linear_location_extension_g.setter
    def linear_location_extension_g(self, linear_location_extension_g: Dict[str, object]):
        """Sets the linear_location_extension_g of this LinearLocation.


        :param linear_location_extension_g: The linear_location_extension_g of this LinearLocation.
        :type linear_location_extension_g: Dict[str, object]
        """

        self._linear_location_extension_g = linear_location_extension_g
